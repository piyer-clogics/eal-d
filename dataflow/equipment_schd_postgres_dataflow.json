{
	"name": "equipment_schd_postgres_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "eal_az_equipment_schd",
						"type": "DatasetReference"
					},
					"name": "AzureBlob"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sql_eqip_schd",
						"type": "DatasetReference"
					},
					"name": "WriteToSQL"
				}
			],
			"transformations": [
				{
					"name": "AddADFColumns"
				}
			],
			"script": "parameters{\n\tADF_RUN_ID as string ('')\n}\nsource(output(\n\t\tac_registration as string,\n\t\tend_time as string,\n\t\teqp_sched_id as short,\n\t\tis_deleted as boolean,\n\t\tnotes as string,\n\t\tstart_time as string,\n\t\tstatus_code as string,\n\t\tstatus_description as string,\n\t\tstatus_name as string,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> AzureBlob\nAzureBlob derive(ADF_TIME_STMP = currentTimestamp(),\n\t\tADF_RUN_ID = $ADF_RUN_ID) ~> AddADFColumns\nAddADFColumns sink(input(\n\t\tEQP_SCHED_ID as integer,\n\t\tAC_RGSTRN as string,\n\t\tSTS_CD as string,\n\t\tSTS_NAME as string,\n\t\tSTS_DESC as string,\n\t\tSTRT_TIME as string,\n\t\tEND_TIME as string,\n\t\tNOTE as string,\n\t\tIS_DELD as boolean,\n\t\tUPDTD_AT as string,\n\t\tADF_TIME_STMP as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tEQP_SCHED_ID = eqp_sched_id,\n\t\tAC_RGSTRN = ac_registration,\n\t\tSTS_CD = status_code,\n\t\tSTS_NAME = status_name,\n\t\tSTS_DESC = status_description,\n\t\tSTRT_TIME = start_time,\n\t\tEND_TIME = end_time,\n\t\tNOTE = notes,\n\t\tIS_DELD = is_deleted,\n\t\tUPDTD_AT = updated_at,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> WriteToSQL"
		}
	}
}