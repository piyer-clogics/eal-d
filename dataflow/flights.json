{
	"name": "flights",
	"properties": {
		"folder": {
			"name": "Rejections"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "sql_flights",
						"type": "DatasetReference"
					},
					"name": "StgFlights"
				},
				{
					"dataset": {
						"referenceName": "eal_ac_bdavis_Airports",
						"type": "DatasetReference"
					},
					"name": "BdavisAirport"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sql_flights_Test",
						"type": "DatasetReference"
					},
					"name": "Flights"
				},
				{
					"dataset": {
						"referenceName": "sql_flights_Reject",
						"type": "DatasetReference"
					},
					"name": "Reject"
				}
			],
			"transformations": [
				{
					"name": "ConditionalSplit1"
				},
				{
					"name": "AirportExists"
				},
				{
					"name": "AirportDoesntExsist"
				},
				{
					"name": "AirportExsists"
				},
				{
					"name": "FilterUnion"
				},
				{
					"name": "ICAOdoesntExists"
				},
				{
					"name": "RejectUnion"
				},
				{
					"name": "AddRejectReason1"
				},
				{
					"name": "AddRejectReason2"
				}
			],
			"script": "source(output(\n\t\tACTL_ARRVL_AIR_PORT as string,\n\t\tACTL_DPTR_AIR_PORT as string,\n\t\tACTL_OOOI_IN as string,\n\t\tACTL_OOOI_OFF as string,\n\t\tACTL_OOOI_ON as string,\n\t\tACTL_OOOI_OUT as string,\n\t\tAIR_CRAFT_RGSTRN_NUM as string,\n\t\tAIR_CRAFT_TYPE as string,\n\t\tBASE_AIR_PORT as string,\n\t\tCRGO_WGT as string,\n\t\tESTD_ARRVL as string,\n\t\tESTD_DPTR as string,\n\t\tFLT_DT as string,\n\t\tFLT_ID as integer,\n\t\tFLT_NUM as string,\n\t\tFLT_TYPE as string,\n\t\tFUEL_IN as double,\n\t\tFUEL_OUT as double,\n\t\tFUEL_UPLIFT as integer,\n\t\tIS_CNCLD as boolean,\n\t\tIS_VERFD as boolean,\n\t\tMAINT_LOG_PG as integer,\n\t\tNOTES as string,\n\t\tSCHDD_ARRVL as string,\n\t\tSCHDD_ARRVL_AIR_PORT as string,\n\t\tSCHDD_DPTR as string,\n\t\tSCHDD_DPTR_AIR_PORT as string,\n\t\tUPDTD_AT as string,\n\t\tADF_TIME_STMP as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StgFlights\nsource(output(\n\t\tAirport_Name as string,\n\t\tCity as string,\n\t\tCountry as string,\n\t\tIATA as string,\n\t\tICAO as string,\n\t\tLatitude as double,\n\t\tLongitude as double,\n\t\tAltitude as integer,\n\t\tUTC_offset as double,\n\t\tDST as string,\n\t\tTime_Zone as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> BdavisAirport\nStgFlights split(isNull(FLT_DT) || isNull(FLT_ID) || isNull(FLT_NUM) || isNull(FLT_TYPE) || isNull(SCHDD_DPTR) || isNull(UPDTD_AT) ||\r\niif(isNull(ACTL_OOOI_IN), false(), iif(isNull(ACTL_OOOI_ON), iif(isNull(ACTL_OOOI_OUT), false(), ACTL_OOOI_IN>ACTL_OOOI_OUT), ACTL_OOOI_IN<ACTL_OOOI_ON)) || \r\niif(isNull(ACTL_OOOI_OFF), iif(isNull(ACTL_OOOI_ON), false(),true()), iif(isNull(ACTL_OOOI_OUT), false(), ACTL_OOOI_OFF<ACTL_OOOI_OUT)) ||\r\niif(isNull(ACTL_OOOI_ON), iif(isNull(ACTL_OOOI_IN), false(), true()), iif(isNull(ACTL_OOOI_IN), false(), ACTL_OOOI_ON<ACTL_OOOI_OFF)) ||\r\niif(isNull(ACTL_OOOI_OUT), iif(isNull(ACTL_OOOI_OFF), false(), true()), false()) ||\r\niif(isNull(ESTD_ARRVL), iif(isNull(ESTD_DPTR), false(), true()), ESTD_ARRVL<ESTD_DPTR) ||\r\niif(isNull(SCHDD_ARRVL), true(), SCHDD_ARRVL<SCHDD_DPTR),\n\tdisjoint: false) ~> ConditionalSplit1@(Reject, FilterData)\nConditionalSplit1@FilterData, BdavisAirport exists(ACTL_ARRVL_AIR_PORT == IATA,\n\tnegate:false,\n\tbroadcast: 'auto')~> AirportExists\nConditionalSplit1@FilterData, BdavisAirport exists(ACTL_ARRVL_AIR_PORT == IATA,\n\tnegate:true,\n\tbroadcast: 'auto')~> AirportDoesntExsist\nAirportDoesntExsist, BdavisAirport exists(toString(ACTL_ARRVL_AIR_PORT)  == ICAO,\n\tnegate:false,\n\tbroadcast: 'auto')~> AirportExsists\nAirportExists, AirportExsists union(byName: true)~> FilterUnion\nAirportDoesntExsist, BdavisAirport exists(ACTL_ARRVL_AIR_PORT == ICAO,\n\tnegate:true,\n\tbroadcast: 'auto')~> ICAOdoesntExists\nAddRejectReason2, ConditionalSplit1@Reject union(byName: true)~> RejectUnion\nConditionalSplit1@Reject derive(Reject_Reason = \"Validation Error\") ~> AddRejectReason1\nICAOdoesntExists derive(Reject_Reason = \"Invalid Airport Name\") ~> AddRejectReason2\nFilterUnion sink(input(\n\t\tACTL_ARRVL_AIR_PORT as string,\n\t\tACTL_DPTR_AIR_PORT as string,\n\t\tACTL_OOOI_IN as string,\n\t\tACTL_OOOI_OFF as string,\n\t\tACTL_OOOI_ON as string,\n\t\tACTL_OOOI_OUT as string,\n\t\tAIR_CRAFT_RGSTRN_NUM as string,\n\t\tAIR_CRAFT_TYPE as string,\n\t\tBASE_AIR_PORT as string,\n\t\tCRGO_WGT as string,\n\t\tESTD_ARRVL as string,\n\t\tESTD_DPTR as string,\n\t\tFLT_DT as string,\n\t\tFLT_ID as integer,\n\t\tFLT_NUM as string,\n\t\tFLT_TYPE as string,\n\t\tFUEL_IN as double,\n\t\tFUEL_OUT as double,\n\t\tFUEL_UPLIFT as integer,\n\t\tIS_CNCLD as boolean,\n\t\tIS_VERFD as boolean,\n\t\tMAINT_LOG_PG as integer,\n\t\tNOTES as string,\n\t\tSCHDD_ARRVL as string,\n\t\tSCHDD_ARRVL_AIR_PORT as string,\n\t\tSCHDD_DPTR as string,\n\t\tSCHDD_DPTR_AIR_PORT as string,\n\t\tUPDTD_AT as string,\n\t\tADF_TIME_STMP as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Flights\nRejectUnion sink(input(\n\t\tACTL_ARRVL_AIR_PORT as string,\n\t\tACTL_DPTR_AIR_PORT as string,\n\t\tACTL_OOOI_IN as string,\n\t\tACTL_OOOI_OFF as string,\n\t\tACTL_OOOI_ON as string,\n\t\tACTL_OOOI_OUT as string,\n\t\tAIR_CRAFT_RGSTRN_NUM as string,\n\t\tAIR_CRAFT_TYPE as string,\n\t\tBASE_AIR_PORT as string,\n\t\tCRGO_WGT as string,\n\t\tESTD_ARRVL as string,\n\t\tESTD_DPTR as string,\n\t\tFLT_DT as string,\n\t\tFLT_ID as integer,\n\t\tFLT_NUM as string,\n\t\tFLT_TYPE as string,\n\t\tFUEL_IN as double,\n\t\tFUEL_OUT as double,\n\t\tFUEL_UPLIFT as integer,\n\t\tIS_CNCLD as boolean,\n\t\tIS_VERFD as boolean,\n\t\tMAINT_LOG_PG as integer,\n\t\tNOTES as string,\n\t\tSCHDD_ARRVL as string,\n\t\tSCHDD_ARRVL_AIR_PORT as string,\n\t\tSCHDD_DPTR as string,\n\t\tSCHDD_DPTR_AIR_PORT as string,\n\t\tUPDTD_AT as string,\n\t\tADF_TIME_STMP as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tUPDTD_AT,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Reject"
		}
	}
}