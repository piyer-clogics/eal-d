{
	"name": "flights_delay",
	"properties": {
		"folder": {
			"name": "Rejections"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "sql_flights_delay",
						"type": "DatasetReference"
					},
					"name": "StgFlightsDelay"
				},
				{
					"dataset": {
						"referenceName": "sql_flights",
						"type": "DatasetReference"
					},
					"name": "StgFlights"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sql_flights_delay_reject",
						"type": "DatasetReference"
					},
					"name": "RejectTable"
				},
				{
					"dataset": {
						"referenceName": "sql_flights_delay_test",
						"type": "DatasetReference"
					},
					"name": "FlightsDelay"
				}
			],
			"transformations": [
				{
					"name": "ConditionalSplit1"
				},
				{
					"name": "RejectAndDoesntExsist"
				},
				{
					"name": "FlightsIdExists"
				},
				{
					"name": "FlightsIdDoesntExists"
				},
				{
					"name": "AddRejectReasonNull"
				},
				{
					"name": "AddRejectReasonNoId"
				},
				{
					"name": "RemoveADFColumns"
				},
				{
					"name": "AddADFColumns"
				},
				{
					"name": "AddADFColumns2"
				}
			],
			"script": "parameters{\n\trun_id as string ('')\n}\nsource(output(\n\t\tFLT_ID as integer,\n\t\tDLAY_TYP as string,\n\t\tDURTN_MNT as integer,\n\t\tDLAY_CD as string,\n\t\tDLAY_CD_NAME as string,\n\t\tADF_TIME_STMP as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StgFlightsDelay\nsource(output(\n\t\tACTL_ARRVL_AIR_PORT as string,\n\t\tACTL_DPTR_AIR_PORT as string,\n\t\tACTL_OOOI_IN as string,\n\t\tACTL_OOOI_OFF as string,\n\t\tACTL_OOOI_ON as string,\n\t\tACTL_OOOI_OUT as string,\n\t\tAIR_CRAFT_RGSTRN_NUM as string,\n\t\tAIR_CRAFT_TYPE as string,\n\t\tBASE_AIR_PORT as string,\n\t\tCRGO_WGT as string,\n\t\tESTD_ARRVL as string,\n\t\tESTD_DPTR as string,\n\t\tFLT_DT as string,\n\t\tFLT_ID as integer,\n\t\tFLT_NUM as string,\n\t\tFLT_TYPE as string,\n\t\tFUEL_IN as double,\n\t\tFUEL_OUT as double,\n\t\tFUEL_UPLIFT as integer,\n\t\tIS_CNCLD as boolean,\n\t\tIS_VERFD as boolean,\n\t\tMAINT_LOG_PG as integer,\n\t\tNOTES as string,\n\t\tSCHDD_ARRVL as string,\n\t\tSCHDD_ARRVL_AIR_PORT as string,\n\t\tSCHDD_DPTR as string,\n\t\tSCHDD_DPTR_AIR_PORT as string,\n\t\tUPDTD_AT as string,\n\t\tADF_TIME_STMP as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StgFlights\nRemoveADFColumns split(isNull(DLAY_CD) || isNull(DLAY_CD_NAME) || isNull(FLT_ID) || isNull(DLAY_TYP),\n\tdisjoint: false) ~> ConditionalSplit1@(Reject, FilteredData)\nAddRejectReasonNull, AddRejectReasonNoId union(byName: true)~> RejectAndDoesntExsist\nConditionalSplit1@FilteredData, StgFlights exists(ConditionalSplit1@FilteredData@FLT_ID == StgFlights@FLT_ID,\n\tnegate:false,\n\tbroadcast: 'auto')~> FlightsIdExists\nConditionalSplit1@FilteredData, StgFlights exists(ConditionalSplit1@FilteredData@FLT_ID == StgFlights@FLT_ID,\n\tnegate:true,\n\tbroadcast: 'auto')~> FlightsIdDoesntExists\nConditionalSplit1@Reject derive(Reject_Reason = \"Validation Error: NULLS Found\") ~> AddRejectReasonNull\nFlightsIdDoesntExists derive(Reject_Reason = \"Flight ID not found in Flights Table\") ~> AddRejectReasonNoId\nStgFlightsDelay select(mapColumn(\n\t\tFLT_ID,\n\t\tDLAY_TYP,\n\t\tDURTN_MNT,\n\t\tDLAY_CD,\n\t\tDLAY_CD_NAME\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveADFColumns\nRejectAndDoesntExsist derive(ADF_TIME_STMP = currentTimestamp(),\n\t\tADF_RUN_ID = $run_id) ~> AddADFColumns\nFlightsIdExists derive(ADF_TIME_STMP = currentTimestamp(),\n\t\tADF_RUN_ID = '') ~> AddADFColumns2\nAddADFColumns sink(input(\n\t\tACTL_ARRVL_AIR_PORT as string,\n\t\tACTL_DPTR_AIR_PORT as string,\n\t\tACTL_OOOI_IN as string,\n\t\tACTL_OOOI_OFF as string,\n\t\tACTL_OOOI_ON as string,\n\t\tACTL_OOOI_OUT as string,\n\t\tAIR_CRAFT_RGSTRN_NUM as string,\n\t\tAIR_CRAFT_TYPE as string,\n\t\tBASE_AIR_PORT as string,\n\t\tCRGO_WGT as string,\n\t\tESTD_ARRVL as string,\n\t\tESTD_DPTR as string,\n\t\tFLT_DT as string,\n\t\tFLT_ID as integer,\n\t\tFLT_NUM as string,\n\t\tFLT_TYPE as string,\n\t\tFUEL_IN as double,\n\t\tFUEL_OUT as double,\n\t\tFUEL_UPLIFT as integer,\n\t\tIS_CNCLD as boolean,\n\t\tIS_VERFD as boolean,\n\t\tMAINT_LOG_PG as integer,\n\t\tNOTES as string,\n\t\tSCHDD_ARRVL as string,\n\t\tSCHDD_ARRVL_AIR_PORT as string,\n\t\tSCHDD_DPTR as string,\n\t\tSCHDD_DPTR_AIR_PORT as string,\n\t\tUPDTD_AT as string,\n\t\tADF_TIME_STMP as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> RejectTable\nAddADFColumns2 sink(input(\n\t\tACTL_ARRVL_AIR_PORT as string,\n\t\tACTL_DPTR_AIR_PORT as string,\n\t\tACTL_OOOI_IN as string,\n\t\tACTL_OOOI_OFF as string,\n\t\tACTL_OOOI_ON as string,\n\t\tACTL_OOOI_OUT as string,\n\t\tAIR_CRAFT_RGSTRN_NUM as string,\n\t\tAIR_CRAFT_TYPE as string,\n\t\tBASE_AIR_PORT as string,\n\t\tCRGO_WGT as string,\n\t\tESTD_ARRVL as string,\n\t\tESTD_DPTR as string,\n\t\tFLT_DT as string,\n\t\tFLT_ID as integer,\n\t\tFLT_NUM as string,\n\t\tFLT_TYPE as string,\n\t\tFUEL_IN as double,\n\t\tFUEL_OUT as double,\n\t\tFUEL_UPLIFT as integer,\n\t\tIS_CNCLD as boolean,\n\t\tIS_VERFD as boolean,\n\t\tMAINT_LOG_PG as integer,\n\t\tNOTES as string,\n\t\tSCHDD_ARRVL as string,\n\t\tSCHDD_ARRVL_AIR_PORT as string,\n\t\tSCHDD_DPTR as string,\n\t\tSCHDD_DPTR_AIR_PORT as string,\n\t\tUPDTD_AT as string,\n\t\tADF_TIME_STMP as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FlightsDelay"
		}
	}
}