{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "eal-adf-d"
		},
		"AWSPostgreSql_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AWSPostgreSql'"
		},
		"AzurePostgreSql_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzurePostgreSql'"
		},
		"Swagger Connection_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'Swagger Connection'"
		},
		"eal_airlinechoice_src_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'eal_airlinechoice_src'"
		},
		"eal_cosmos_db_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'eal_cosmos_db'"
		},
		"eal_sqldb_EDW_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'eal_sqldb_EDW'"
		},
		"eal_sqldb_STG_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'eal_sqldb_STG'"
		},
		"eal_sqldb_bdavis_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'eal_sqldb_bdavis'"
		},
		"eal_sqldb_d_tgt_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'eal_sqldb_d_tgt'"
		},
		"eal_sqldb_piyer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'eal_sqldb_piyer'"
		},
		"ealblobdconnection_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ealblobdconnection'"
		},
		"Swagger Connection_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.airline-choice.com/rest/"
		},
		"Swagger Connection_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "eastern-test"
		},
		"eal_airlinechoice_src_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.airline-choice.com/rest/"
		},
		"eal_airlinechoice_src_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "eastern-test"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/eal_d_arpt_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Call d_daily_load_Update",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set variable Last Updated Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "d_arpt_daily_load_update",
								"type": "DataFlowReference",
								"parameters": {
									"dt": {
										"value": "'@{variables('dt')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"StgArpt": {},
									"DARPT": {},
									"WriteUpdates": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Call d_daily_load_Insert",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Call d_daily_load_Update",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "d_arpt_daily_load_insert",
								"type": "DataFlowReference",
								"parameters": {
									"dt": {
										"value": "'@{variables('dt')}'",
										"type": "Expression"
									},
									"row_num": {
										"value": "@int(variables('row_num'))",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"StgArpt": {},
									"WriteNewRows": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Get Last Row Number",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select max(ARPT_ID) as row FROM [dbo].[D_ARPT]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sql_d_aprt",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get Last Updated Date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT \n [ADF_SUC_TS]\n  FROM [dbo].[S_ADF_CNTRL] where ADF_JOB_NAME = 'eal_d_arpt_load'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "eal_adf_cntrl",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Update Control Table",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Call d_daily_load_Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "adf_control",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"adf_name": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ADFCONTROL": {},
									"Write": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set variable Last Updated Date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Last Updated Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "dt",
							"value": {
								"value": "@string(activity('Get Last Updated Date').output['value'][0]['ADF_SUC_TS'])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Last Row Number",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Get Last Row Number').output['value'][0]['row'],NULL)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set Row Count",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "row_num",
										"value": {
											"value": "@string(activity('Get Last Row Number').output['value'][0]['row'])",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set Row Count as 0",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "row_num",
										"value": {
											"value": "@string('0')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"variables": {
					"dt": {
						"type": "String"
					},
					"row_num": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Airport"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/d_arpt_daily_load_update')]",
				"[concat(variables('factoryId'), '/dataflows/d_arpt_daily_load_insert')]",
				"[concat(variables('factoryId'), '/datasets/sql_d_aprt')]",
				"[concat(variables('factoryId'), '/datasets/eal_adf_cntrl')]",
				"[concat(variables('factoryId'), '/dataflows/adf_control')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_f_equip_schd_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Call d_daily_load_Update",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set variable Last Updated Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "f_equip_schd_load_update",
								"type": "DataFlowReference",
								"parameters": {
									"date": {
										"value": "'@{variables('dt')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"StgEquipSchd": {},
									"EquipSchd": {},
									"UpdateRows": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Call d_daily_load_Insert",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Call d_daily_load_Update",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "f_equip_schd_load_insert",
								"type": "DataFlowReference",
								"parameters": {
									"date": {
										"value": "'@{variables('dt')}'",
										"type": "Expression"
									},
									"row_num": {
										"value": "@variables('row_num')",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"StgEquipSchd": {},
									"InsertRows": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Get Last Row Number",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select max([EQP_SCHED_ID]) as row FROM [dbo].[F_EQUIP_SCHD]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sql_d_aprt",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get Last Updated Date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [ADF_SUC_TS]\n  FROM [dbo].[S_ADF_CNTRL] where ADF_JOB_NAME = 'eal_f_equip_schd_load'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "eal_adf_cntrl",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Update Control Table",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Call d_daily_load_Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "adf_control",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"adf_name": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ADFCONTROL": {},
									"Write": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set variable Last Updated Date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Last Updated Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "dt",
							"value": {
								"value": "@string(activity('Get Last Updated Date').output['value'][0]['ADF_SUC_TS'])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Last Row Number",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Get Last Row Number').output['value'][0]['row'],NULL)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set Row Count",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "row_num",
										"value": {
											"value": "@string(activity('Get Last Row Number').output['value'][0]['row'])",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set Row Count as 0",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "row_num",
										"value": {
											"value": "@string('0')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"variables": {
					"dt": {
						"type": "String"
					},
					"row_num": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Equip Schedule"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/f_equip_schd_load_update')]",
				"[concat(variables('factoryId'), '/dataflows/f_equip_schd_load_insert')]",
				"[concat(variables('factoryId'), '/datasets/sql_d_aprt')]",
				"[concat(variables('factoryId'), '/datasets/eal_adf_cntrl')]",
				"[concat(variables('factoryId'), '/dataflows/adf_control')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_f_flights_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Call f_flights_update",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set variable Last Updated Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "f_flights_load_update",
								"type": "DataFlowReference",
								"parameters": {
									"date": {
										"value": "'@{variables('dt')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"StagingFlights": {},
									"ARPT": {},
									"CLNDR": {},
									"Flights": {},
									"Update": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Get Last Row Number",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select max(FLGHT_ID) as row FROM [dbo].[F_FLGHT_OPS]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sql_d_aprt",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get Last Updated Date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT \n [ADF_SUC_TS]\n  FROM [dbo].[S_ADF_CNTRL] where ADF_JOB_NAME = 'eal_f_flights_load'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "eal_adf_cntrl",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Update Control Table",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Call f_flights_insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "adf_control",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"adf_name": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ADFCONTROL": {},
									"Write": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set variable Last Updated Date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Last Updated Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "dt",
							"value": {
								"value": "@string(activity('Get Last Updated Date').output['value'][0]['ADF_SUC_TS'])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Last Row Number",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Get Last Row Number').output['value'][0]['row'],NULL)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set Row Count",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "row_num",
										"value": {
											"value": "@string(activity('Get Last Row Number').output['value'][0]['row'])",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set Row Count as 0",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "row_num",
										"value": {
											"value": "@string('0')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Call f_flights_insert",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Call f_flights_update",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "f_flights_load_insert",
								"type": "DataFlowReference",
								"parameters": {
									"row_num": {
										"value": "@variables('row_num')",
										"type": "Expression"
									},
									"date": {
										"value": "'@{variables('dt')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"StagingFlights": {},
									"ARPT": {},
									"CLNDR": {},
									"Flights": {},
									"Write": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"variables": {
					"dt": {
						"type": "String"
					},
					"row_num": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Flights"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/f_flights_load_update')]",
				"[concat(variables('factoryId'), '/datasets/sql_d_aprt')]",
				"[concat(variables('factoryId'), '/datasets/eal_adf_cntrl')]",
				"[concat(variables('factoryId'), '/dataflows/adf_control')]",
				"[concat(variables('factoryId'), '/dataflows/f_flights_load_insert')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_reset_controls')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Reset Controls",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "adf_reset_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"job_name": "'eal_s_arpt_load'"
								},
								"datasetParameters": {
									"GetControls": {},
									"WriteResetDate": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/adf_reset_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_stg_arpt_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data from BDAVIS to blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "sql_bdavis_test_arpt",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "eal_arpt_az_blob",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Write Data to Staging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set variable date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "s_arpt_load",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"date": {
										"value": "'@{variables('date')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ArptBlob": {},
									"StgAirports": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Update Control Table",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Write Data to Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "adf_control",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"adf_name": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ADFCONTROL": {},
									"Write": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Get Last Updated Date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data from BDAVIS to blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [ADF_SUC_TS]\n  FROM [dbo].[S_ADF_CNTRL] where ADF_JOB_NAME = 'eal_stg_arpt_load'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "eal_adf_cntrl",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set variable date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Last Updated Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "date",
							"value": {
								"value": "@string(activity('Get Last Updated Date').output['value'][0]['ADF_SUC_TS'])",
								"type": "Expression"
							}
						}
					}
				],
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Airport"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_bdavis_test_arpt')]",
				"[concat(variables('factoryId'), '/datasets/eal_arpt_az_blob')]",
				"[concat(variables('factoryId'), '/dataflows/s_arpt_load')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/dataflows/adf_control')]",
				"[concat(variables('factoryId'), '/datasets/eal_adf_cntrl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_stg_equip_schd_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data from Postgres to Azure Blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "eal_postgresql_equip_schd",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "eal_az_equipment_schd",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Call s_equip_schd_load",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set variable date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "s_equip_schd_load",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"date": {
										"value": "'@{variables('date')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"StgEquipSchd": {},
									"EquipReject": {},
									"EquipStg": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Get Last Updated Date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data from Postgres to Azure Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [ADF_SUC_TS]\n  FROM [dbo].[S_ADF_CNTRL] where ADF_JOB_NAME = 'eal_stg_equip_schd_load'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "eal_adf_cntrl",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set variable date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Last Updated Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "date",
							"value": {
								"value": "@string(activity('Get Last Updated Date').output['value'][0]['ADF_SUC_TS'])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Update Control Table",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Call s_equip_schd_load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "adf_control",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"adf_name": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ADFCONTROL": {},
									"Write": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Equip Schedule"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/eal_postgresql_equip_schd')]",
				"[concat(variables('factoryId'), '/datasets/eal_az_equipment_schd')]",
				"[concat(variables('factoryId'), '/dataflows/s_equip_schd_load')]",
				"[concat(variables('factoryId'), '/datasets/eal_adf_cntrl')]",
				"[concat(variables('factoryId'), '/dataflows/adf_control')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_stg_flights_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy flights table from postgresql to blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "eal_postgresql_flights_db",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "eal_arpt_az_blob",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Write Data to Staging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set variable date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "s_flights_load",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"date": {
										"value": "'@{variables('date')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"StgFlights": {},
									"BdavisAirport": {},
									"FlightsDelay": {},
									"Reject": {},
									"StagingFlights": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Update Control Table",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Write Data to Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "adf_control",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"adf_name": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ADFCONTROL": {},
									"Write": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Get Last Updated Date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy flights delay table from postgresql to blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [ADF_SUC_TS]\n  FROM [dbo].[S_ADF_CNTRL] where ADF_JOB_NAME = 'eal_stg_flights_load'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "eal_adf_cntrl",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set variable date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Last Updated Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "date",
							"value": {
								"value": "@string(activity('Get Last Updated Date').output['value'][0]['ADF_SUC_TS'])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy flights delay table from postgresql to blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy flights table from postgresql to blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "eal_postgresql_delay_db",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "eal_az_flights_delay",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Flights"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/eal_postgresql_flights_db')]",
				"[concat(variables('factoryId'), '/datasets/eal_arpt_az_blob')]",
				"[concat(variables('factoryId'), '/dataflows/s_flights_load')]",
				"[concat(variables('factoryId'), '/dataflows/adf_control')]",
				"[concat(variables('factoryId'), '/datasets/eal_adf_cntrl')]",
				"[concat(variables('factoryId'), '/datasets/eal_postgresql_delay_db')]",
				"[concat(variables('factoryId'), '/datasets/eal_az_flights_delay')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADF_Control')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ealblobdconnection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Azure blobs"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "sample.json",
						"container": "eal-src-stg"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"row": {
							"type": "integer"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ealblobdconnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_ac_active_flights')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ealblobdconnection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Azure blobs"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "eal_ac_active_flights.json",
						"container": "eal-src-stg"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"Success": {
							"type": "boolean"
						},
						"Flights": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"ID": {
										"type": "string"
									},
									"SegmentNo": {
										"type": "integer"
									},
									"ExternalID": {
										"type": "string"
									},
									"CarrierCode": {
										"type": "string"
									},
									"FlightNo": {
										"type": "string"
									},
									"MarketingCarrierCode": {
										"type": "string"
									},
									"MarketingFlightNo": {
										"type": "string"
									},
									"Type": {
										"type": "string"
									},
									"TailNo": {
										"type": "string"
									},
									"OriginIATA": {
										"type": "string"
									},
									"OriginICAO": {
										"type": "string"
									},
									"OriginAirportName": {
										"type": "string"
									},
									"OriginAirportCity": {
										"type": "string"
									},
									"OriginAirportCountryCode": {
										"type": "string"
									},
									"DepartureTerminal": {
										"type": "string"
									},
									"DepartureGate": {
										"type": "string"
									},
									"DestinationIATA": {
										"type": "string"
									},
									"DestinationICAO": {
										"type": "string"
									},
									"DestinationAirportName": {
										"type": "string"
									},
									"DestinationAirportCity": {
										"type": "string"
									},
									"DestinationAirportCountryCode": {
										"type": "string"
									},
									"ArrivalTerminal": {
										"type": "string"
									},
									"ArrivalGate": {
										"type": "string"
									},
									"ScheduledDepartureTime": {
										"type": "string"
									},
									"ScheduledDepartureTimeUTC": {
										"type": "string"
									},
									"OffBlocksTime": {
										"type": "string"
									},
									"TakeOffTime": {
										"type": "string"
									},
									"ScheduledArrivalTime": {
										"type": "string"
									},
									"EstimatedArrivalTime": {
										"type": "string"
									},
									"TouchDownTime": {
										"type": "string"
									},
									"OnBlocksTime": {
										"type": "string"
									},
									"FlightTimeMinutes": {
										"type": "integer"
									},
									"BoardingTime": {
										"type": "string"
									},
									"Message": {
										"type": "string"
									},
									"Status": {
										"type": "string"
									},
									"EnablePassengerAPIS": {
										"type": "boolean"
									},
									"EnableCrewAPIS": {
										"type": "boolean"
									},
									"EnableDCS": {
										"type": "boolean"
									},
									"WeightUnitsKgs": {
										"type": "boolean"
									},
									"IsOpenSeating": {
										"type": "boolean"
									},
									"IsProgressiveFlight": {
										"type": "boolean"
									},
									"EnableThroughCheckIn": {
										"type": "boolean"
									},
									"EnableBoarding": {
										"type": "boolean"
									},
									"UseAveragePaxWeight": {
										"type": "boolean"
									},
									"UseAverageBagWeight": {
										"type": "boolean"
									},
									"PnlImported": {
										"type": "boolean"
									},
									"IsCancelled": {
										"type": "boolean"
									},
									"CancelledBy": {
										"type": "string"
									},
									"CancelledReason": {
										"type": "string"
									},
									"AircraftCapacity": {
										"type": "integer"
									},
									"BookedPassengersCount": {
										"type": "integer"
									},
									"TotalCargoLoad": {
										"type": "integer"
									},
									"UpliftFuelLoad": {
										"type": "integer"
									},
									"TotalFuelLoad": {
										"type": "integer"
									},
									"RemainingFuelLoad": {
										"type": "integer"
									},
									"Carrier": {
										"type": "object",
										"properties": {
											"CarrierName": {
												"type": "string"
											},
											"Code": {
												"type": "string"
											},
											"IATA": {
												"type": "string"
											},
											"ICAO": {
												"type": "string"
											},
											"ApisCarrierCode": {
												"type": "string"
											},
											"Prefix": {
												"type": "string"
											},
											"Logo": {
												"type": "string"
											},
											"Icon": {
												"type": "string"
											},
											"Address": {
												"type": "object",
												"properties": {
													"ID": {
														"type": "string"
													},
													"Location": {
														"type": "string"
													},
													"Street1": {
														"type": "string"
													},
													"Street2": {
														"type": "string"
													},
													"City": {
														"type": "string"
													},
													"StateCode": {
														"type": "string"
													},
													"PostalCode": {
														"type": "string"
													},
													"CountryCode": {
														"type": "string"
													},
													"CustomData": {
														"type": "object",
														"properties": {
															"Properties": {
																"type": "object"
															}
														}
													}
												}
											},
											"ApisSenderID": {
												"type": "string"
											},
											"ApisContactName": {
												"type": "string"
											},
											"ApisTelephone": {
												"type": "string"
											},
											"ApisFax": {
												"type": "string"
											},
											"Email": {
												"type": "string"
											},
											"Website": {
												"type": "string"
											},
											"TsaPreCheck": {
												"type": "boolean"
											},
											"MaximumPassengerBags": {
												"type": "integer"
											},
											"DefaultChildAge": {
												"type": "integer"
											},
											"DefaultAdultAge": {
												"type": "integer"
											},
											"PnlImportCloseTime": {
												"type": "integer"
											},
											"IsPrintingBagTagWithoutCheckInAllowed": {
												"type": "boolean"
											},
											"WatchlistNoFlyMatchInstructions": {
												"type": "string"
											},
											"WatchlistPreventMatchInstructions": {
												"type": "string"
											},
											"WatchlistSelecteeMatchInstructions": {
												"type": "string"
											},
											"SelecteeGateStopInstructions": {
												"type": "string"
											},
											"EmergencySeatGateStopInstructions": {
												"type": "string"
											},
											"UnverifiedDocumentsGateStopInstructions": {
												"type": "string"
											},
											"EmailSenderAddress": {
												"type": "string"
											},
											"CustomData": {
												"type": "object",
												"properties": {
													"Properties": {
														"type": "object"
													}
												}
											}
										}
									},
									"Passengers": {
										"type": "array"
									},
									"FlightDelays": {
										"type": "array"
									},
									"AncillaryTemplateID": {
										"type": "string"
									},
									"CustomerID": {
										"type": "string"
									},
									"CrewMemberSecurityRules": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"CountryEntity": {
													"type": "string"
												},
												"FlightType": {
													"type": "integer"
												},
												"FlightRouting": {
													"type": "integer"
												},
												"InterchangeRecipientID": {
													"type": "string"
												},
												"ApplicationRecipientID": {
													"type": "string"
												},
												"CommonAccessReference": {
													"type": "string"
												},
												"BuildFcmFromMclOnly": {
													"type": "boolean"
												},
												"InteractiveComms": {
													"type": "boolean"
												},
												"BatchSubmission": {
													"type": "boolean"
												},
												"BatchTriggerHours": {
													"type": "integer"
												},
												"BatchValidation": {
													"type": "boolean"
												},
												"WatchlistVet": {
													"type": "integer"
												},
												"RequireSecurityClearance": {
													"type": "boolean"
												},
												"OutageVettingStatus": {
													"type": "integer"
												},
												"FlightAdd": {
													"type": "boolean"
												},
												"FlightChange": {
													"type": "boolean"
												},
												"FlightCancel": {
													"type": "boolean"
												},
												"FlightPreDepartureCloseout": {
													"type": "boolean"
												},
												"FlightPostDepartureCloseout": {
													"type": "boolean"
												},
												"FlightPostDepartureCloseoutOnBoard": {
													"type": "boolean"
												},
												"HasFlightCloseoutRequirement": {
													"type": "boolean"
												},
												"CrewAdd": {
													"type": "boolean"
												},
												"CrewChange": {
													"type": "boolean"
												},
												"CrewCancel": {
													"type": "boolean"
												},
												"BatchDestinationAddressCondition": {
													"type": "integer"
												},
												"BatchContactDetails": {
													"type": "boolean"
												},
												"CheckinStatusOnBoard": {
													"type": "boolean"
												},
												"CheckinDOB": {
													"type": "boolean"
												},
												"CheckinGender": {
													"type": "boolean"
												},
												"CheckinNationality": {
													"type": "boolean"
												},
												"CheckinResidence": {
													"type": "boolean"
												},
												"CheckinOrigDest": {
													"type": "boolean"
												},
												"CheckinClearance": {
													"type": "boolean"
												},
												"CheckinTravelDoc": {
													"type": "boolean"
												},
												"CheckinHomeAddress": {
													"type": "boolean"
												},
												"CheckinDestinationAddress": {
													"type": "boolean"
												},
												"CheckinDestinationAddressCondition": {
													"type": "integer"
												},
												"CheckinBirthPlace": {
													"type": "boolean"
												},
												"CheckinContactDetails": {
													"type": "boolean"
												}
											}
										}
									},
									"PassengerSecurityRules": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"CountryEntity": {
													"type": "string"
												},
												"FlightType": {
													"type": "integer"
												},
												"FlightRouting": {
													"type": "integer"
												},
												"InterchangeRecipientID": {
													"type": "string"
												},
												"ApplicationRecipientID": {
													"type": "string"
												},
												"CommonAccessReference": {
													"type": "string"
												},
												"InteractiveComms": {
													"type": "boolean"
												},
												"BatchSubmission": {
													"type": "boolean"
												},
												"BatchTriggerHours": {
													"type": "integer"
												},
												"BatchValidation": {
													"type": "boolean"
												},
												"WatchlistVet": {
													"type": "integer"
												},
												"RequireSecurityClearance": {
													"type": "boolean"
												},
												"OutageVettingStatus": {
													"type": "integer"
												},
												"FlightAdd": {
													"type": "boolean"
												},
												"FlightChange": {
													"type": "boolean"
												},
												"FlightCancel": {
													"type": "boolean"
												},
												"FlightPreDepartureCloseout": {
													"type": "boolean"
												},
												"FlightPostDepartureCloseout": {
													"type": "boolean"
												},
												"FlightPostDepartureCloseoutOnBoard": {
													"type": "boolean"
												},
												"HasFlightCloseoutRequirement": {
													"type": "boolean"
												},
												"PaxAdd": {
													"type": "boolean"
												},
												"PaxChange": {
													"type": "boolean"
												},
												"PaxCancel": {
													"type": "boolean"
												},
												"PaxTransfer": {
													"type": "boolean"
												},
												"PaxVerifiedID": {
													"type": "boolean"
												},
												"GatePass": {
													"type": "boolean"
												},
												"BatchPNR": {
													"type": "boolean"
												},
												"BatchResidence": {
													"type": "boolean"
												},
												"BatchOrigDest": {
													"type": "boolean"
												},
												"BatchClearance": {
													"type": "boolean"
												},
												"BatchDestinationAddress": {
													"type": "boolean"
												},
												"BatchDestinationAddressCondition": {
													"type": "integer"
												},
												"CheckinPNR": {
													"type": "boolean"
												},
												"CheckinDOB": {
													"type": "boolean"
												},
												"CheckinGender": {
													"type": "boolean"
												},
												"CheckinNationality": {
													"type": "boolean"
												},
												"CheckinResidence": {
													"type": "boolean"
												},
												"CheckinOrigDest": {
													"type": "boolean"
												},
												"CheckinClearance": {
													"type": "boolean"
												},
												"CheckinTravelDoc": {
													"type": "boolean"
												},
												"CheckinDestinationAddress": {
													"type": "boolean"
												},
												"CheckinDestinationAddressCondition": {
													"type": "integer"
												}
											}
										}
									},
									"BatchPassengerMask": {
										"type": "string"
									},
									"BatchCrewMemberMask": {
										"type": "string"
									},
									"PreDepartureCloseOutPassengerMask": {
										"type": "string"
									},
									"PostDepartureCloseOutPassengerMask": {
										"type": "string"
									},
									"PreDepartureCloseOutCrewMemberMask": {
										"type": "string"
									},
									"PostDepartureCloseOutCrewMemberMask": {
										"type": "string"
									},
									"PaxFlightPreDepartureCloseOutStatus": {
										"type": "string"
									},
									"PaxFlightPostDepartureCloseOutStatus": {
										"type": "string"
									},
									"CrewFlightPreDepartureCloseOutStatus": {
										"type": "string"
									},
									"CrewFlightPostDepartureCloseOutStatus": {
										"type": "string"
									},
									"PaxBatchPreVetStatus": {
										"type": "string"
									},
									"HasPassengerSecurityTransactions": {
										"type": "boolean"
									},
									"CustomData": {
										"type": "object",
										"properties": {
											"Properties": {
												"type": "object"
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ealblobdconnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_ac_airport')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ealblobdconnection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Azure blobs"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "eal_ac_airport.json",
						"container": "eal-src-stg"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ealblobdconnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_ac_bdavis_Airports')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_sqldb_bdavis",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Azure blobs"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Airport_Name",
						"type": "nvarchar"
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "Country",
						"type": "nvarchar"
					},
					{
						"name": "IATA",
						"type": "nvarchar"
					},
					{
						"name": "ICAO",
						"type": "nvarchar"
					},
					{
						"name": "Latitude",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Longitude",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Altitude",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "UTC_offset",
						"type": "float",
						"precision": 15
					},
					{
						"name": "DST",
						"type": "nvarchar"
					},
					{
						"name": "Time_Zone",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Airports_with_UTC_offset"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_sqldb_bdavis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_ac_flights_by_ID')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ealblobdconnection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Azure blobs"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "eal_ac_flightById.json",
						"container": "eal-src-stg"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ealblobdconnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_ac_passengers_by_Id')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ealblobdconnection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Azure blobs"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "passenger_by_id.json",
						"container": "eal-src-stg"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ealblobdconnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_ac_src_active_flights')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_airlinechoice_src",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Source"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": "flights/GetActiveFlights"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_airlinechoice_src')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_ac_src_airports')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_airlinechoice_src",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Source"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": "airports"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_airlinechoice_src')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_ac_src_passengers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_airlinechoice_src",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"flightID": {
						"type": "string"
					},
					"flightSegmentNo": {
						"type": "int"
					},
					"includeBags": {
						"type": "bool",
						"defaultValue": true
					},
					"includeAncillaries": {
						"type": "bool",
						"defaultValue": false
					},
					"includeBagTracking": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "Source"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat('passengers/GetPassengersByFlightID?flightID=',dataset().flightID,'&flightsegmentNo=',string(dataset().flightSegmentNo))",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_airlinechoice_src')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_adf_cntrl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_sqldb_STG",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Destination Table/Staging"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ADF_RUN_ID",
						"type": "varchar"
					},
					{
						"name": "ADF_JOB_NAME",
						"type": "varchar"
					},
					{
						"name": "ADF_SUC_TS",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "S_ADF_CNTRL"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_sqldb_STG')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_arpt_az_blob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ealblobdconnection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Azure blobs"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "eal_aprt.json",
						"container": "eal-src-stg"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"ARPT_NAME": {
							"type": "string"
						},
						"ARPT_CITY": {
							"type": "string"
						},
						"ARPT_CNTRY": {
							"type": "string"
						},
						"ARPT_IATA_CD": {
							"type": "string"
						},
						"ARPT_ICAO_CD": {
							"type": "string"
						},
						"ARPT_LAT": {
							"type": "number"
						},
						"ARPT_LONG": {
							"type": "number"
						},
						"ARPT_ALTD": {
							"type": "integer"
						},
						"ARPT_UTC_OFSET": {
							"type": "number"
						},
						"ARPT_DST": {
							"type": "string"
						},
						"ARPT_TZONE": {
							"type": "string"
						},
						"LAST_UPDT_DT": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ealblobdconnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_az_equipment_schd')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ealblobdconnection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Azure blobs"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "eal_az_equipment_schd.json",
						"container": "eal-src-stg"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"eqp_sched_id": {
							"type": "integer"
						},
						"ac_registration": {
							"type": "string"
						},
						"status_code": {
							"type": "string"
						},
						"status_name": {
							"type": "string"
						},
						"status_description": {
							"type": "string"
						},
						"start_time": {
							"type": "string"
						},
						"end_time": {
							"type": "string"
						},
						"notes": {
							"type": "string"
						},
						"is_deleted": {
							"type": "boolean"
						},
						"updated_at": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ealblobdconnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_az_flights')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ealblobdconnection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Azure blobs"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "eal_flights_postgres.json",
						"container": "eal-src-stg"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"flight_id": {
							"type": "integer"
						},
						"flight_number": {
							"type": "string"
						},
						"flight_date": {
							"type": "string"
						},
						"aircraft_registration_number": {
							"type": "string"
						},
						"aircraft_type": {
							"type": "string"
						},
						"scheduled_departure": {
							"type": "string"
						},
						"scheduled_arrival": {
							"type": "string"
						},
						"estimated_departure": {
							"type": "null"
						},
						"estimated_arrival": {
							"type": "null"
						},
						"actual_oooi_out": {
							"type": "null"
						},
						"actual_oooi_off": {
							"type": "null"
						},
						"actual_oooi_on": {
							"type": "null"
						},
						"actual_oooi_in": {
							"type": "null"
						},
						"base_airport": {
							"type": "string"
						},
						"scheduled_departure_airport": {
							"type": "string"
						},
						"scheduled_arrival_airport": {
							"type": "string"
						},
						"actual_departure_airport": {
							"type": "string"
						},
						"actual_arrival_airport": {
							"type": "string"
						},
						"is_verified": {
							"type": "boolean"
						},
						"notes": {
							"type": "null"
						},
						"is_canceled": {
							"type": "boolean"
						},
						"flight_type": {
							"type": "string"
						},
						"cargo_weight": {
							"type": "null"
						},
						"fuel_out": {
							"type": "null"
						},
						"fuel_in": {
							"type": "null"
						},
						"fuel_uplift": {
							"type": "null"
						},
						"maint_log_page": {
							"type": "null"
						},
						"updated_at": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ealblobdconnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_az_flights_delay')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ealblobdconnection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Azure blobs"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "eal_az_flights_delay.json",
						"container": "eal-src-stg"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"flight_id": {
							"type": "integer"
						},
						"delay_type": {
							"type": "string"
						},
						"duration_mins": {
							"type": "integer"
						},
						"delay_code": {
							"type": "string"
						},
						"delay_code_name": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ealblobdconnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_postgresql_delay_db')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AWSPostgreSql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Source"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "bi",
					"table": "flight_delay"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AWSPostgreSql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_postgresql_equip_schd')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AWSPostgreSql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Source"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "bi",
					"table": "equipment_sched"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AWSPostgreSql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_postgresql_flights_db')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AWSPostgreSql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Source"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "bi",
					"table": "flight"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AWSPostgreSql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_active_flights')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_sqldb_piyer",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Destination Table"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "AIR_CRAFT_CPTY",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ANCLRY_TMPLT_ID",
						"type": "varchar"
					},
					{
						"name": "ARRVL_GT",
						"type": "varchar"
					},
					{
						"name": "ARRVL_TRMNL",
						"type": "varchar"
					},
					{
						"name": "BTCH_CREW_MBR_MASK",
						"type": "varchar"
					},
					{
						"name": "BTCH_PSNGR_MASK",
						"type": "varchar"
					},
					{
						"name": "BRDNG_TIME",
						"type": "varchar"
					},
					{
						"name": "BKD_PSNGR_CNT",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "CNCLD_BY",
						"type": "varchar"
					},
					{
						"name": "CNCLD_RSN",
						"type": "varchar"
					},
					{
						"name": "CARR_CD",
						"type": "float",
						"precision": 15
					},
					{
						"name": "CREW_FLT_POST_DPTR_CLS_OUT_STS",
						"type": "varchar"
					},
					{
						"name": "CREW_FLT_PRE_DPTR_CLS_OUT_STS",
						"type": "varchar"
					},
					{
						"name": "CUST_ID",
						"type": "varchar"
					},
					{
						"name": "DPTR_GT",
						"type": "varchar"
					},
					{
						"name": "DPTR_TRMNL",
						"type": "varchar"
					},
					{
						"name": "DEST_AIRPORT_CITY",
						"type": "varchar"
					},
					{
						"name": "DEST_AIRPORT_CNTRY_CD",
						"type": "varchar"
					},
					{
						"name": "DEST_AIRPORT_NAME",
						"type": "varchar"
					},
					{
						"name": "DEST_IATA",
						"type": "varchar"
					},
					{
						"name": "DEST_ICAO",
						"type": "varchar"
					},
					{
						"name": "ENABL_BRDNG",
						"type": "bit"
					},
					{
						"name": "ENABL_CREW_APIS",
						"type": "bit"
					},
					{
						"name": "ENABL_DCS",
						"type": "bit"
					},
					{
						"name": "ENABL_PSNGR_APIS",
						"type": "bit"
					},
					{
						"name": "ENABL_THRU_CHK_IN",
						"type": "bit"
					},
					{
						"name": "ESTD_ARRVL_TIME",
						"type": "varchar"
					},
					{
						"name": "ESTD_DPTR_TIME",
						"type": "varchar"
					},
					{
						"name": "EXTRNL_ID",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "FLT_DLAY",
						"type": "varchar"
					},
					{
						"name": "FLT_NO",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "HAS_PSNGR_SCRTY_TRNS",
						"type": "bit"
					},
					{
						"name": "HLTH_CHK_RULES_ID",
						"type": "varchar"
					},
					{
						"name": "PSNGRS",
						"type": "varchar"
					},
					{
						"name": "PAX_BTCH_PRE_VET_STS",
						"type": "varchar"
					},
					{
						"name": "FLT_ID",
						"type": "varchar"
					},
					{
						"name": "IS_CNCLD",
						"type": "bit"
					},
					{
						"name": "IS_OPEN_STNG",
						"type": "bit"
					},
					{
						"name": "IS_PRGRSV_FLT",
						"type": "bit"
					},
					{
						"name": "MKTG_CARR_CD",
						"type": "varchar"
					},
					{
						"name": "MSG",
						"type": "varchar"
					},
					{
						"name": "ORIG_AIRPORT_CITY",
						"type": "varchar"
					},
					{
						"name": "ORIG_AIRPORT_CNTRY_CD",
						"type": "varchar"
					},
					{
						"name": "ORIG_AIRPORT_NAME",
						"type": "varchar"
					},
					{
						"name": "ORIG_IATA",
						"type": "varchar"
					},
					{
						"name": "ORIG_ICAO",
						"type": "varchar"
					},
					{
						"name": "PSNGR_APP_RCPNT_ID",
						"type": "varchar"
					},
					{
						"name": "PAX_FLT_POST_DPTR_CLS_OUT_STS",
						"type": "varchar"
					},
					{
						"name": "PAX_FLT_PRE_DPTR_CLS_OUT_STS",
						"type": "varchar"
					},
					{
						"name": "PNL_IMPRTD",
						"type": "bit"
					},
					{
						"name": "POST_DPTR_CLS_OUT_CREW_MBR_MASK",
						"type": "varchar"
					},
					{
						"name": "POST_DPTR_CLS_OUT_PSNGR_MASK",
						"type": "varchar"
					},
					{
						"name": "PRE_DPTR_CLS_OUT_CREW_MBR_MASK",
						"type": "varchar"
					},
					{
						"name": "PRE_DPTR_CLS_OUT_PSNGR_MASK",
						"type": "varchar"
					},
					{
						"name": "REMNG_FUEL_LOAD",
						"type": "bit"
					},
					{
						"name": "SCHDD_ARRVL_TIME",
						"type": "varchar"
					},
					{
						"name": "SCHDD_DPTR_TIME",
						"type": "varchar"
					},
					{
						"name": "SCHDD_DPTR_TIME_UTC",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SEG_NO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "STS",
						"type": "varchar"
					},
					{
						"name": "TAIL_NO",
						"type": "varchar"
					},
					{
						"name": "TOT_CRGO_LOAD",
						"type": "bit"
					},
					{
						"name": "TOT_FUEL_LOAD",
						"type": "bit"
					},
					{
						"name": "TYPE",
						"type": "varchar"
					},
					{
						"name": "UPLIFT_FUEL_LOAD",
						"type": "bit"
					},
					{
						"name": "USE_AVG_BAG_WGT",
						"type": "bit"
					},
					{
						"name": "USE_AVG_PAX_WGT",
						"type": "bit"
					},
					{
						"name": "WGT_UNITS_KG",
						"type": "bit"
					},
					{
						"name": "CREW_APP_RCPNT_ID",
						"type": "varchar"
					},
					{
						"name": "ETL_CAPT_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ADF_RUN_ID",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "S_ACTV_FLT"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_sqldb_piyer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_bdavis_test_arpt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_sqldb_piyer",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Destination Table"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ARPT_NAME",
						"type": "nvarchar"
					},
					{
						"name": "ARPT_CITY",
						"type": "nvarchar"
					},
					{
						"name": "ARPT_CNTRY",
						"type": "nvarchar"
					},
					{
						"name": "ARPT_IATA_CD",
						"type": "nvarchar"
					},
					{
						"name": "ARPT_ICAO_CD",
						"type": "nvarchar"
					},
					{
						"name": "ARPT_LAT",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ARPT_LONG",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ARPT_ALTD",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ARPT_UTC_OFSET",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ARPT_DST",
						"type": "nvarchar"
					},
					{
						"name": "ARPT_TZONE",
						"type": "nvarchar"
					},
					{
						"name": "LAST_UPDT_DT",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "BDAVIS_AIRPORTS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_sqldb_piyer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_carrier')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_sqldb_piyer",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Destination Table"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ApisCarrierCode",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ApisContactName",
						"type": "varchar"
					},
					{
						"name": "ApisFax",
						"type": "varchar"
					},
					{
						"name": "ApisSenderID",
						"type": "varchar"
					},
					{
						"name": "ApisTelephone",
						"type": "varchar"
					},
					{
						"name": "CarrierName",
						"type": "varchar"
					},
					{
						"name": "Code",
						"type": "float",
						"precision": 15
					},
					{
						"name": "DefaultAdultAge",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "DefaultChildAge",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Email",
						"type": "varchar"
					},
					{
						"name": "EmailSenderAddress",
						"type": "varchar"
					},
					{
						"name": "EmergencySeatGateStopInstructions",
						"type": "varchar"
					},
					{
						"name": "IATA",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ICAO",
						"type": "varchar"
					},
					{
						"name": "Icon",
						"type": "varchar"
					},
					{
						"name": "IsPrintingBagTagWithoutCheckInAllowed",
						"type": "bit"
					},
					{
						"name": "Logo",
						"type": "varchar"
					},
					{
						"name": "MaximumPassengerBags",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "PnlImportCloseTime",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Prefix",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "SelecteeGateStopInstructions",
						"type": "varchar"
					},
					{
						"name": "TsaPreCheck",
						"type": "bit"
					},
					{
						"name": "UnverifiedDocumentsGateStopInstructions",
						"type": "varchar"
					},
					{
						"name": "WatchlistNoFlyMatchInstructions",
						"type": "varchar"
					},
					{
						"name": "WatchlistPreventMatchInstructions",
						"type": "varchar"
					},
					{
						"name": "WatchlistSelecteeMatchInstructions",
						"type": "varchar"
					},
					{
						"name": "Website",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "S_CARRIER"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_sqldb_piyer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_carrier_address')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_sqldb_piyer",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Destination Table"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CountryCode",
						"type": "varchar"
					},
					{
						"name": "City",
						"type": "varchar"
					},
					{
						"name": "Location",
						"type": "varchar"
					},
					{
						"name": "PostalCode",
						"type": "varchar"
					},
					{
						"name": "StateCode",
						"type": "varchar"
					},
					{
						"name": "Street1",
						"type": "varchar"
					},
					{
						"name": "Street2",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "S_CARRIER_ADDR"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_sqldb_piyer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_crew_security_rules')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_sqldb_piyer",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Destination Table"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ApplicationRecipientID",
						"type": "varchar"
					},
					{
						"name": "BatchContactDetails",
						"type": "bit"
					},
					{
						"name": "BatchDestinationAddressCondition",
						"type": "bit"
					},
					{
						"name": "BatchSubmission",
						"type": "bit"
					},
					{
						"name": "BatchTriggerHours",
						"type": "bit"
					},
					{
						"name": "BatchValidation",
						"type": "bit"
					},
					{
						"name": "BuildFcmFromMclOnly",
						"type": "bit"
					},
					{
						"name": "CheckinBirthPlace",
						"type": "bit"
					},
					{
						"name": "CheckinClearance",
						"type": "bit"
					},
					{
						"name": "CheckinContactDetails",
						"type": "bit"
					},
					{
						"name": "CheckinDOB",
						"type": "bit"
					},
					{
						"name": "CheckinDestinationAddress",
						"type": "bit"
					},
					{
						"name": "CheckinDestinationAddressCondition",
						"type": "bit"
					},
					{
						"name": "CheckinGender",
						"type": "bit"
					},
					{
						"name": "CheckinHomeAddress",
						"type": "bit"
					},
					{
						"name": "Nationality",
						"type": "bit"
					},
					{
						"name": "CheckinOrigDest",
						"type": "bit"
					},
					{
						"name": "Residence",
						"type": "bit"
					},
					{
						"name": "CheckinStatusOnBoard",
						"type": "bit"
					},
					{
						"name": "CheckinTravelDoc",
						"type": "bit"
					},
					{
						"name": "CommonAccessReference",
						"type": "varchar"
					},
					{
						"name": "CountryEntity",
						"type": "varchar"
					},
					{
						"name": "CrewAdd",
						"type": "bit"
					},
					{
						"name": "CrewCancel",
						"type": "bit"
					},
					{
						"name": "CrewChange",
						"type": "bit"
					},
					{
						"name": "FlightAdd",
						"type": "bit"
					},
					{
						"name": "FlightCancel",
						"type": "bit"
					},
					{
						"name": "FlightChange",
						"type": "bit"
					},
					{
						"name": "FlightPostDepartureCloseout",
						"type": "bit"
					},
					{
						"name": "FlightPostDepartureCloseoutOnBoard",
						"type": "bit"
					},
					{
						"name": "FlightPreDepartureCloseout",
						"type": "bit"
					},
					{
						"name": "FlightRouting",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FlightType",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HasFlightCloseoutRequirement",
						"type": "bit"
					},
					{
						"name": "InteractiveComms",
						"type": "bit"
					},
					{
						"name": "InterchangeRecipientID",
						"type": "varchar"
					},
					{
						"name": "OutageVettingStatus",
						"type": "bit"
					},
					{
						"name": "RequireSecurityClearance",
						"type": "bit"
					},
					{
						"name": "WatchlistVet",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "S_CREW_SEC_RULES"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_sqldb_piyer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_d_aprt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_sqldb_EDW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Destination Table/Prod"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ARPT_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ARPT_IATA_CD",
						"type": "varchar"
					},
					{
						"name": "ARPT_ICAO_CD",
						"type": "varchar"
					},
					{
						"name": "ARPT_NAME",
						"type": "varchar"
					},
					{
						"name": "ARPT_CNTRY",
						"type": "varchar"
					},
					{
						"name": "ARPT_CITY",
						"type": "varchar"
					},
					{
						"name": "ARPT_LAT",
						"type": "decimal",
						"precision": 8,
						"scale": 6
					},
					{
						"name": "ARPT_LONG",
						"type": "decimal",
						"precision": 9,
						"scale": 6
					},
					{
						"name": "ARPT_ALTD",
						"type": "decimal",
						"precision": 6,
						"scale": 2
					},
					{
						"name": "ARPT_UTC_OFSET",
						"type": "decimal",
						"precision": 2,
						"scale": 2
					},
					{
						"name": "ARPT_DST_CD",
						"type": "varchar"
					},
					{
						"name": "ARPT_TZONE",
						"type": "varchar"
					},
					{
						"name": "EFF_STRT_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EFF_END_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTV_IND",
						"type": "char"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "D_ARPT"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_sqldb_EDW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_d_clndr')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_sqldb_EDW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Destination Table/Prod"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CLNDR_ID",
						"type": "char"
					},
					{
						"name": "TheDate",
						"type": "date"
					},
					{
						"name": "TheDay",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TheDaySuffix",
						"type": "char"
					},
					{
						"name": "TheDayName",
						"type": "nvarchar"
					},
					{
						"name": "TheDayOfWeek",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TheDayOfWeekInMonth",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "TheDayOfYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IsWeekend",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TheWeek",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TheISOweek",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TheFirstOfWeek",
						"type": "date"
					},
					{
						"name": "TheLastOfWeek",
						"type": "date"
					},
					{
						"name": "TheWeekOfMonth",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "TheMonth",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TheMonthName",
						"type": "nvarchar"
					},
					{
						"name": "TheFirstOfMonth",
						"type": "date"
					},
					{
						"name": "TheLastOfMonth",
						"type": "date"
					},
					{
						"name": "TheFirstOfNextMonth",
						"type": "date"
					},
					{
						"name": "TheLastOfNextMonth",
						"type": "date"
					},
					{
						"name": "TheQuarter",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TheFirstOfQuarter",
						"type": "date"
					},
					{
						"name": "TheLastOfQuarter",
						"type": "date"
					},
					{
						"name": "TheYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TheISOYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TheFirstOfYear",
						"type": "date"
					},
					{
						"name": "TheLastOfYear",
						"type": "date"
					},
					{
						"name": "IsLeapYear",
						"type": "bit"
					},
					{
						"name": "Has53Weeks",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Has53ISOWeeks",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MMYYYY",
						"type": "char"
					},
					{
						"name": "Style101",
						"type": "char"
					},
					{
						"name": "Style103",
						"type": "char"
					},
					{
						"name": "Style112",
						"type": "char"
					},
					{
						"name": "Style120",
						"type": "char"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "D_CLNDR"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_sqldb_EDW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_eqip_schd_rej')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_sqldb_STG",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Destination Table/Rejections"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "EQP_SCHED_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AC_RGSTRN",
						"type": "text"
					},
					{
						"name": "STS_CD",
						"type": "text"
					},
					{
						"name": "STS_NAME",
						"type": "text"
					},
					{
						"name": "STS_DESC",
						"type": "text"
					},
					{
						"name": "STRT_TIME",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "END_TIME",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "NOTE",
						"type": "text"
					},
					{
						"name": "IS_DELD",
						"type": "bit"
					},
					{
						"name": "UPDTD_AT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "REJECT_REASON",
						"type": "varchar"
					},
					{
						"name": "ADF_TIME_STMP",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ADF_RUN_ID",
						"type": "text"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "S_EQUIP_SCHD_REJ"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_sqldb_STG')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_f_equip_schd')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_sqldb_EDW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Destination Table/Prod"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ARPT_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ARPT_IATA_CD",
						"type": "varchar"
					},
					{
						"name": "ARPT_ICAO_CD",
						"type": "varchar"
					},
					{
						"name": "ARPT_NAME",
						"type": "varchar"
					},
					{
						"name": "ARPT_CNTRY",
						"type": "varchar"
					},
					{
						"name": "ARPT_CITY",
						"type": "varchar"
					},
					{
						"name": "ARPT_LAT",
						"type": "decimal",
						"precision": 8,
						"scale": 6
					},
					{
						"name": "ARPT_LONG",
						"type": "decimal",
						"precision": 9,
						"scale": 6
					},
					{
						"name": "ARPT_ALTD",
						"type": "decimal",
						"precision": 6,
						"scale": 2
					},
					{
						"name": "ARPT_UTC_OFSET",
						"type": "decimal",
						"precision": 2,
						"scale": 2
					},
					{
						"name": "ARPT_DST_CD",
						"type": "varchar"
					},
					{
						"name": "ARPT_TZONE",
						"type": "varchar"
					},
					{
						"name": "EFF_STRT_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EFF_END_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTV_IND",
						"type": "char"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "F_EQUIP_SCHD"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_sqldb_EDW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_f_flights_ops')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_sqldb_EDW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Destination Table/Prod"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "FLGHT_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FLGHT_DT_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FLGHT_NUM",
						"type": "varchar"
					},
					{
						"name": "FLGHT_TYP",
						"type": "varchar"
					},
					{
						"name": "AIR_CRAFT_RGSTRN_NUM",
						"type": "varchar"
					},
					{
						"name": "AIR_CRAFT_TYP",
						"type": "varchar"
					},
					{
						"name": "SCHDD_DPRT_TS_UTC",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SCHDD_ARRVL_TS_UTC",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ESTD_DPRT_TS_UTC",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ESTD_ARRVL_TS_UTC",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTL_OOOI_OUT_TS_UTC",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTL_OOOI_OFF_TS_UTC",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTL_OOOI_ON_TS_UTC",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTL_OOOI_IN_TS_UTC",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "BASE_ARPT_CD",
						"type": "varchar"
					},
					{
						"name": "BASE_ARPT_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SCHDD_DRPT_ARPT_CD",
						"type": "varchar"
					},
					{
						"name": "SCHDD_DRPT_ARPT_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SCHDD_ARRVL_ARPT_CD",
						"type": "varchar"
					},
					{
						"name": "SCHDD_ARRVL_ARPT_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ACTL_ARRVL_ARPT_CD",
						"type": "varchar"
					},
					{
						"name": "ACTL_ARRVL_ARPT_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ACTL_DPTR_ARPT_CD",
						"type": "varchar"
					},
					{
						"name": "ACTL_DPTR_ARPT_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FUEL_IN",
						"type": "char"
					},
					{
						"name": "FUEL_OUT",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FUEL_UPLIFT",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CRGO_WT",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MAINT_LOG",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NOTES",
						"type": "varchar"
					},
					{
						"name": "IS_CNCLD",
						"type": "bit"
					},
					{
						"name": "IS_VERFD",
						"type": "bit"
					},
					{
						"name": "DEP_VAR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ARRVL_VAR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SCHDD_BLK_DUR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ACTL_BLK_DUR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ACTL_FLGHT_DUR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DPRT_DELAY_DUR_D0_IND",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "DPRT_DELAY_DUR_D15_IND",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ARRVL_DELAY_DUR_A0_IND",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ARRVL_DELAY_DUR_A14_IND",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "BLK_DUR_B0_IND",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "SCHDD_FLT_DUR",
						"type": "varchar"
					},
					{
						"name": "DELAY_TYP",
						"type": "varchar"
					},
					{
						"name": "DELAY_DUR",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "DELAY_CD",
						"type": "varchar"
					},
					{
						"name": "DELAY_DESC",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "F_FLGHT_OPS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_sqldb_EDW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_flights_rej')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_sqldb_STG",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Destination Table/Rejections"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ACTL_ARRVL_AIR_PORT",
						"type": "text"
					},
					{
						"name": "ACTL_DPTR_AIR_PORT",
						"type": "text"
					},
					{
						"name": "ACTL_OOOI_IN",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTL_OOOI_OFF",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTL_OOOI_ON",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTL_OOOI_OUT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "AIR_CRAFT_RGSTRN_NUM",
						"type": "text"
					},
					{
						"name": "AIR_CRAFT_TYPE",
						"type": "text"
					},
					{
						"name": "BASE_AIR_PORT",
						"type": "text"
					},
					{
						"name": "CRGO_WGT",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ESTD_ARRVL",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ESTD_DPTR",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "FLT_DT",
						"type": "date"
					},
					{
						"name": "FLT_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "FLT_NUM",
						"type": "text"
					},
					{
						"name": "FLT_TYPE",
						"type": "text"
					},
					{
						"name": "FUEL_IN",
						"type": "float",
						"precision": 15
					},
					{
						"name": "FUEL_OUT",
						"type": "float",
						"precision": 15
					},
					{
						"name": "FUEL_UPLIFT",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IS_CNCLD",
						"type": "bit"
					},
					{
						"name": "IS_VERFD",
						"type": "bit"
					},
					{
						"name": "MAINT_LOG_PG",
						"type": "text"
					},
					{
						"name": "NOTES",
						"type": "text"
					},
					{
						"name": "SCHDD_ARRVL",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SCHDD_ARRVL_AIR_PORT",
						"type": "text"
					},
					{
						"name": "SCHDD_DPTR",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SCHDD_DPTR_AIR_PORT",
						"type": "text"
					},
					{
						"name": "UPDTD_AT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "REJECT_REASON",
						"type": "varchar"
					},
					{
						"name": "ADF_TIME_STMP",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ADF_RUN_ID",
						"type": "text"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "S_FLIGHTS_REJ"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_sqldb_STG')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_health_check_rules')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_sqldb_piyer",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Destination Table"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CarrierCode",
						"type": "float",
						"precision": 15
					},
					{
						"name": "CreatedBy",
						"type": "varchar"
					},
					{
						"name": "CreatedTimestampUTC",
						"type": "varchar"
					},
					{
						"name": "DestinationAirport",
						"type": "varchar"
					},
					{
						"name": "DestinationCountryEntity",
						"type": "varchar"
					},
					{
						"name": "ID",
						"type": "varchar"
					},
					{
						"name": "Instructions",
						"type": "varchar"
					},
					{
						"name": "IsActive",
						"type": "bit"
					},
					{
						"name": "IsClearToBoard",
						"type": "bit"
					},
					{
						"name": "IsRequireProofForRemoteCheckIn",
						"type": "bit"
					},
					{
						"name": "IsRequireRemarksForFailStatus",
						"type": "bit"
					},
					{
						"name": "OriginAirport",
						"type": "varchar"
					},
					{
						"name": "OriginCountryEntity",
						"type": "varchar"
					},
					{
						"name": "UpdatedBy",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "S_HLTH_CHK_RULES"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_sqldb_piyer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_passenger_info')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_sqldb_piyer",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Destination Table"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "S_PSNGR_INFO"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_sqldb_piyer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_passenger_security_rules')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_sqldb_piyer",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Destination Table"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ApplicationRecipientID",
						"type": "varchar"
					},
					{
						"name": "BatchClearance",
						"type": "bit"
					},
					{
						"name": "BatchDestinationAddress",
						"type": "bit"
					},
					{
						"name": "BatchDestinationAddressCondition",
						"type": "bit"
					},
					{
						"name": "BatchOrigDest",
						"type": "bit"
					},
					{
						"name": "BatchPNR",
						"type": "bit"
					},
					{
						"name": "BatchResidence",
						"type": "bit"
					},
					{
						"name": "BatchSubmission",
						"type": "bit"
					},
					{
						"name": "BatchTriggerHours",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BatchValidation",
						"type": "bit"
					},
					{
						"name": "CheckinClearance",
						"type": "bit"
					},
					{
						"name": "CheckinDOB",
						"type": "bit"
					},
					{
						"name": "CheckinDestinationAddress",
						"type": "bit"
					},
					{
						"name": "CheckinDestinationAddressCondition",
						"type": "bit"
					},
					{
						"name": "CheckinGender",
						"type": "bit"
					},
					{
						"name": "CheckinNationality",
						"type": "bit"
					},
					{
						"name": "CheckinOrigDest",
						"type": "bit"
					},
					{
						"name": "CheckinPNR",
						"type": "bit"
					},
					{
						"name": "CheckinResidence",
						"type": "bit"
					},
					{
						"name": "CheckinTravelDoc",
						"type": "bit"
					},
					{
						"name": "CommonAccessReference",
						"type": "varchar"
					},
					{
						"name": "CountryEntity",
						"type": "varchar"
					},
					{
						"name": "FlightAdd",
						"type": "bit"
					},
					{
						"name": "FlightCancel",
						"type": "bit"
					},
					{
						"name": "FlightChange",
						"type": "bit"
					},
					{
						"name": "FlightPostDepartureCloseout",
						"type": "bit"
					},
					{
						"name": "FlightPostDepartureCloseoutOnBoard",
						"type": "bit"
					},
					{
						"name": "FlightPreDepartureCloseout",
						"type": "bit"
					},
					{
						"name": "FlightRouting",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FlightType",
						"type": "int",
						"precision": 10
					},
					{
						"name": "GatePass",
						"type": "bit"
					},
					{
						"name": "HasFlightCloseoutRequirement",
						"type": "bit"
					},
					{
						"name": "InteractiveComms",
						"type": "bit"
					},
					{
						"name": "InterchangeRecipientID",
						"type": "varchar"
					},
					{
						"name": "OutageVettingStatus",
						"type": "bit"
					},
					{
						"name": "PaxAdd",
						"type": "bit"
					},
					{
						"name": "PaxCancel",
						"type": "bit"
					},
					{
						"name": "PaxChange",
						"type": "bit"
					},
					{
						"name": "PaxTransfer",
						"type": "bit"
					},
					{
						"name": "PaxVerifiedID",
						"type": "bit"
					},
					{
						"name": "RequireSecurityClearance",
						"type": "bit"
					},
					{
						"name": "WatchlistVet",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "S_PSNGR_SEC_RULES"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_sqldb_piyer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_s_airports')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_sqldb_STG",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Destination Table/Staging"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ARPT_NAME",
						"type": "nvarchar"
					},
					{
						"name": "ARPT_CITY",
						"type": "nvarchar"
					},
					{
						"name": "ARPT_CNTRY",
						"type": "nvarchar"
					},
					{
						"name": "ARPT_IATA_CD",
						"type": "nvarchar"
					},
					{
						"name": "ARPT_ICAO_CD",
						"type": "nvarchar"
					},
					{
						"name": "ARPT_LAT",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ARPT_LONG",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ARPT_ALTD",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ARPT_UTC_OFSET",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ARPT_DST",
						"type": "nvarchar"
					},
					{
						"name": "ARPT_TZONE",
						"type": "nvarchar"
					},
					{
						"name": "LAST_UPDT_DT",
						"type": "date"
					},
					{
						"name": "ADF_RUN_ID",
						"type": "text"
					},
					{
						"name": "ADF_TIME_STMP",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "S_AIRPORTS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_sqldb_STG')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_s_eqip_schd')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_sqldb_STG",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Destination Table/Staging"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "EQP_SCHED_ID",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "AC_RGSTRN",
						"type": "varchar"
					},
					{
						"name": "STS_CD",
						"type": "varchar"
					},
					{
						"name": "STS_NAME",
						"type": "varchar"
					},
					{
						"name": "STS_DESC",
						"type": "varchar"
					},
					{
						"name": "STRT_TIME",
						"type": "varchar"
					},
					{
						"name": "END_TIME",
						"type": "varchar"
					},
					{
						"name": "NOTE",
						"type": "varchar"
					},
					{
						"name": "IS_DELD",
						"type": "bit"
					},
					{
						"name": "UPDTD_AT",
						"type": "varchar"
					},
					{
						"name": "ADF_TIME_STMP",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ADF_RUN_ID",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "S_EQUIP_SCHD"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_sqldb_STG')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_s_flights')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_sqldb_STG",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Destination Table/Staging"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ACTL_ARRVL_AIR_PORT",
						"type": "text"
					},
					{
						"name": "ACTL_DPTR_AIR_PORT",
						"type": "text"
					},
					{
						"name": "ACTL_OOOI_IN",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTL_OOOI_OFF",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTL_OOOI_ON",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTL_OOOI_OUT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "AIR_CRAFT_RGSTRN_NUM",
						"type": "text"
					},
					{
						"name": "AIR_CRAFT_TYPE",
						"type": "text"
					},
					{
						"name": "BASE_AIR_PORT",
						"type": "text"
					},
					{
						"name": "CRGO_WGT",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ESTD_ARRVL",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ESTD_DPTR",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "FLT_DT",
						"type": "date"
					},
					{
						"name": "FLT_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "FLT_NUM",
						"type": "text"
					},
					{
						"name": "FLT_TYPE",
						"type": "text"
					},
					{
						"name": "FUEL_IN",
						"type": "float",
						"precision": 15
					},
					{
						"name": "FUEL_OUT",
						"type": "float",
						"precision": 15
					},
					{
						"name": "FUEL_UPLIFT",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IS_CNCLD",
						"type": "bit"
					},
					{
						"name": "IS_VERFD",
						"type": "bit"
					},
					{
						"name": "MAINT_LOG_PG",
						"type": "text"
					},
					{
						"name": "NOTES",
						"type": "text"
					},
					{
						"name": "SCHDD_ARRVL",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SCHDD_ARRVL_AIR_PORT",
						"type": "text"
					},
					{
						"name": "SCHDD_DPTR",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SCHDD_DPTR_AIR_PORT",
						"type": "text"
					},
					{
						"name": "UPDTD_AT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DLAY_TYP",
						"type": "text"
					},
					{
						"name": "DURTN_MNT",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DLAY_CD",
						"type": "text"
					},
					{
						"name": "DLAY_CD_NAME",
						"type": "text"
					},
					{
						"name": "ADF_TIME_STMP",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ADF_RUN_ID",
						"type": "text"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "S_FLIGHTS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eal_sqldb_STG')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AWSPostgreSql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "PostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('AWSPostgreSql_connectionString')]"
				},
				"connectVia": {
					"referenceName": "Azure-VM-Intergation-Runtime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-VM-Intergation-Runtime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzurePostgreSql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzurePostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('AzurePostgreSql_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Swagger Connection')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('Swagger Connection_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('Swagger Connection_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Swagger Connection_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_airlinechoice_src')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('eal_airlinechoice_src_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('eal_airlinechoice_src_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('eal_airlinechoice_src_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_cosmos_db')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('eal_cosmos_db_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_sqldb_EDW')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('eal_sqldb_EDW_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_sqldb_STG')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('eal_sqldb_STG_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_sqldb_bdavis')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('eal_sqldb_bdavis_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_sqldb_d_tgt')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('eal_sqldb_d_tgt_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_sqldb_piyer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('eal_sqldb_piyer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ealblobdconnection')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ealblobdconnection_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure-VM-Intergation-Runtime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/active_flight_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "eal_ac_active_flights",
								"type": "DatasetReference"
							},
							"name": "ActiveFlights"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_active_flights",
								"type": "DatasetReference"
							},
							"name": "WriteFlightToSQL"
						},
						{
							"dataset": {
								"referenceName": "sql_carrier",
								"type": "DatasetReference"
							},
							"name": "WriteCarrierToSQL"
						},
						{
							"dataset": {
								"referenceName": "sql_carrier_address",
								"type": "DatasetReference"
							},
							"name": "WriteCarrierAddressToSQL"
						},
						{
							"dataset": {
								"referenceName": "sql_crew_security_rules",
								"type": "DatasetReference"
							},
							"name": "WriteCrewMemberSecurityRulesToSQL"
						},
						{
							"dataset": {
								"referenceName": "sql_health_check_rules",
								"type": "DatasetReference"
							},
							"name": "WriteHealthCheckRulesToSQL"
						},
						{
							"dataset": {
								"referenceName": "sql_passenger_security_rules",
								"type": "DatasetReference"
							},
							"name": "WritePassengerSecurityRules"
						}
					],
					"transformations": [
						{
							"name": "ExtractFlightColumns"
						},
						{
							"name": "SelectFlightsJson"
						},
						{
							"name": "ExtractCarrierColumns"
						},
						{
							"name": "SelectFlight"
						},
						{
							"name": "ExtractCarrierAddress"
						},
						{
							"name": "ExtractCrewMemberSecurityRules"
						},
						{
							"name": "ExtractHealthCheckRuleColumns"
						},
						{
							"name": "ExtractPassengerSecurityRulesColumns"
						},
						{
							"name": "AddAdditionalColumns"
						},
						{
							"name": "AddAdditionalColumns2"
						},
						{
							"name": "AddAdditionalColumns3"
						},
						{
							"name": "AddAdditionalColumns4"
						},
						{
							"name": "AddAdditionalColumns5"
						},
						{
							"name": "AddAdditionalColumns6"
						},
						{
							"name": "ConvertSegmentNoToInt"
						}
					],
					"script": "parameters{\n\trun_id as string\n}\nsource(output(\n\t\tFlights as (AircraftCapacity as short, AncillaryTemplateID as string, ArrivalGate as string, ArrivalTerminal as boolean, BatchCrewMemberMask as string, BatchPassengerMask as string, BoardingTime as string, BookedPassengersCount as short, CancelledBy as string, CancelledReason as string, CancelledTimestamp as string, Carrier as (Address as (City as string, CountryCode as string, ID as string, Location as string, PostalCode as short, StateCode as string, Street1 as string, Street2 as string), ApisCarrierCode as double, ApisContactName as string, ApisFax as string, ApisSenderID as string, ApisTelephone as string, CarrierName as string, Code as double, DefaultAdultAge as short, DefaultChildAge as short, Email as string, EmailSenderAddress as string, EmergencySeatGateStopInstructions as string, IATA as double, ICAO as string, Icon as string, IsPrintingBagTagWithoutCheckInAllowed as boolean, Logo as string, MaximumPassengerBags as short, PnlImportCloseTime as short, Prefix as short, SelecteeGateStopInstructions as string, TsaPreCheck as boolean, UnverifiedDocumentsGateStopInstructions as string, WatchlistNoFlyMatchInstructions as string, WatchlistPreventMatchInstructions as string, WatchlistSelecteeMatchInstructions as string, Website as string), CarrierCode as double, CrewFlightPostDepartureCloseOutStatus as string, CrewFlightPreDepartureCloseOutStatus as string, CrewMemberSecurityRules as (ApplicationRecipientID as string, BatchContactDetails as boolean, BatchDestinationAddressCondition as boolean, BatchSubmission as boolean, BatchTriggerHours as boolean, BatchValidation as boolean, BuildFcmFromMclOnly as boolean, CheckinBirthPlace as boolean, CheckinClearance as boolean, CheckinContactDetails as boolean, CheckinDOB as boolean, CheckinDestinationAddress as boolean, CheckinDestinationAddressCondition as boolean, CheckinGender as boolean, CheckinHomeAddress as boolean, CheckinNationality as boolean, CheckinOrigDest as boolean, CheckinResidence as boolean, CheckinStatusOnBoard as boolean, CheckinTravelDoc as boolean, CommonAccessReference as string, CountryEntity as string, CrewAdd as boolean, CrewCancel as boolean, CrewChange as boolean, FlightAdd as boolean, FlightCancel as boolean, FlightChange as boolean, FlightPostDepartureCloseout as boolean, FlightPostDepartureCloseoutOnBoard as boolean, FlightPreDepartureCloseout as boolean, FlightRouting as short, FlightType as short, HasFlightCloseoutRequirement as boolean, InteractiveComms as boolean, InterchangeRecipientID as string, OutageVettingStatus as boolean, RequireSecurityClearance as boolean, WatchlistVet as boolean)[], CustomerID as string, DepartureGate as string, DepartureTerminal as string, DestinationAirportCity as string, DestinationAirportCountryCode as string, DestinationAirportName as string, DestinationIATA as string, DestinationICAO as string, EnableBoarding as boolean, EnableCrewAPIS as boolean, EnableDCS as boolean, EnablePassengerAPIS as boolean, EnableThroughCheckIn as boolean, EstimatedArrivalTime as string, EstimatedDepartureTime as string, ExternalID as short, FlightDelays as string[], FlightNo as short, FlightTimeMinutes as short, HasPassengerSecurityTransactions as boolean, ID as string, IsCancelled as boolean, IsOpenSeating as boolean, IsProgressiveFlight as boolean, MarketingCarrierCode as string, MarketingFlightNo as string, Message as string, OffBlocksTime as string, OnBlocksTime as string, OriginAirportCity as string, OriginAirportCountryCode as string, OriginAirportName as string, OriginIATA as string, OriginICAO as string, PassengerSecurityRules as (ApplicationRecipientID as string, BatchClearance as boolean, BatchDestinationAddress as boolean, BatchDestinationAddressCondition as boolean, BatchOrigDest as boolean, BatchPNR as boolean, BatchResidence as boolean, BatchSubmission as boolean, BatchTriggerHours as short, BatchValidation as boolean, CheckinClearance as boolean, CheckinDOB as boolean, CheckinDestinationAddress as boolean, CheckinDestinationAddressCondition as boolean, CheckinGender as boolean, CheckinNationality as boolean, CheckinOrigDest as boolean, CheckinPNR as boolean, CheckinResidence as boolean, CheckinTravelDoc as boolean, CommonAccessReference as string, CountryEntity as string, FlightAdd as boolean, FlightCancel as boolean, FlightChange as boolean, FlightPostDepartureCloseout as boolean, FlightPostDepartureCloseoutOnBoard as boolean, FlightPreDepartureCloseout as boolean, FlightRouting as short, FlightType as short, GatePass as boolean, HasFlightCloseoutRequirement as boolean, InteractiveComms as boolean, InterchangeRecipientID as string, OutageVettingStatus as boolean, PaxAdd as boolean, PaxCancel as boolean, PaxChange as boolean, PaxTransfer as boolean, PaxVerifiedID as boolean, RequireSecurityClearance as boolean, WatchlistVet as short)[], Passengers as string[], PaxBatchPreVetStatus as string, PaxFlightPostDepartureCloseOutStatus as string, PaxFlightPreDepartureCloseOutStatus as string, PnlImported as boolean, PostDepartureCloseOutCrewMemberMask as string, PostDepartureCloseOutPassengerMask as string, PreDepartureCloseOutCrewMemberMask as string, PreDepartureCloseOutPassengerMask as string, RemainingFuelLoad as boolean, ScheduledArrivalTime as string, ScheduledDepartureTime as string, ScheduledDepartureTimeUTC as timestamp, SegmentNo as boolean, Status as string, TailNo as string, TakeOffTime as string, TotalCargoLoad as boolean, TotalFuelLoad as boolean, TouchDownTime as string, Type as string, UpliftFuelLoad as boolean, UseAverageBagWeight as boolean, UseAveragePaxWeight as boolean, WeightUnitsKgs as boolean)[],\n\t\tSuccess as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> ActiveFlights\nSelectFlightsJson foldDown(unroll(Flights),\n\tmapColumn(\n\t\tAIR_CRAFT_CPTY = Flights.AircraftCapacity,\n\t\tANCLRY_TMPLT_ID = Flights.AncillaryTemplateID,\n\t\tARRVL_GT = Flights.ArrivalGate,\n\t\tARRVL_TRMNL = Flights.ArrivalTerminal,\n\t\tBTCH_CREW_MBR_MASK = Flights.BatchCrewMemberMask,\n\t\tBTCH_PSNGR_MASK = Flights.BatchPassengerMask,\n\t\tBRDNG_TIME = Flights.BoardingTime,\n\t\tBKD_PSNGR_CNT = Flights.BookedPassengersCount,\n\t\tCNCLD_BY = Flights.CancelledBy,\n\t\tCNCLD_RSN = Flights.CancelledReason,\n\t\tCARR_CD = Flights.CarrierCode,\n\t\tCREW_FLT_POST_DPTR_CLS_OUT_STS = Flights.CrewFlightPostDepartureCloseOutStatus,\n\t\tCREW_FLT_PRE_DPTR_CLS_OUT_STS = Flights.CrewFlightPreDepartureCloseOutStatus,\n\t\tCUST_ID = Flights.CustomerID,\n\t\tDPTR_GT = Flights.DepartureGate,\n\t\tDPTR_TRMNL = Flights.DepartureTerminal,\n\t\tDEST_AIRPORT_CITY = Flights.DestinationAirportCity,\n\t\tDEST_AIRPORT_CNTRY_CD = Flights.DestinationAirportCountryCode,\n\t\tDEST_AIRPORT_NAME = Flights.DestinationAirportName,\n\t\tDEST_IATA = Flights.DestinationIATA,\n\t\tDEST_ICAO = Flights.DestinationICAO,\n\t\tENABL_BRDNG = Flights.EnableBoarding,\n\t\tENABL_CREW_APIS = Flights.EnableCrewAPIS,\n\t\tENABL_DCS = Flights.EnableDCS,\n\t\tENABL_PSNGR_APIS = Flights.EnablePassengerAPIS,\n\t\tENABL_THRU_CHK_IN = Flights.EnableThroughCheckIn,\n\t\tESTD_ARRVL_TIME = Flights.EstimatedArrivalTime,\n\t\tESTD_DPTR_TIME = Flights.EstimatedDepartureTime,\n\t\tEXTRNL_ID = Flights.ExternalID,\n\t\tFLT_DLAY = Flights.FlightDelays,\n\t\tFLT_NO = Flights.FlightNo,\n\t\tHAS_PSNGR_SCRTY_TRNS = Flights.HasPassengerSecurityTransactions,\n\t\tHLTH_CHK_RULES_ID = Flights.HealthCheckRule.ID,\n\t\tPSNGRS = Flights.Passengers,\n\t\tPAX_BTCH_PRE_VET_STS = Flights.PaxBatchPreVetStatus,\n\t\tFLT_ID = Flights.ID,\n\t\tIS_CNCLD = Flights.IsCancelled,\n\t\tIS_OPEN_STNG = Flights.IsOpenSeating,\n\t\tIS_PRGRSV_FLT = Flights.IsProgressiveFlight,\n\t\tMKTG_CARR_CD = Flights.MarketingCarrierCode,\n\t\tMSG = Flights.Message,\n\t\tORIG_AIRPORT_CITY = Flights.OriginAirportCity,\n\t\tORIG_AIRPORT_CNTRY_CD = Flights.OriginAirportCountryCode,\n\t\tORIG_AIRPORT_NAME = Flights.OriginAirportName,\n\t\tORIG_IATA = Flights.OriginIATA,\n\t\tORIG_ICAO = Flights.OriginICAO,\n\t\tPSNGR_APP_RCPNT_ID = Flights.PassengerSecurityRules.ApplicationRecipientID,\n\t\tPAX_FLT_POST_DPTR_CLS_OUT_STS = Flights.PaxFlightPostDepartureCloseOutStatus,\n\t\tPAX_FLT_PRE_DPTR_CLS_OUT_STS = Flights.PaxFlightPreDepartureCloseOutStatus,\n\t\tPNL_IMPRTD = Flights.PnlImported,\n\t\tPOST_DPTR_CLS_OUT_CREW_MBR_MASK = Flights.PostDepartureCloseOutCrewMemberMask,\n\t\tPOST_DPTR_CLS_OUT_PSNGR_MASK = Flights.PostDepartureCloseOutPassengerMask,\n\t\tPRE_DPTR_CLS_OUT_CREW_MBR_MASK = Flights.PreDepartureCloseOutCrewMemberMask,\n\t\tPRE_DPTR_CLS_OUT_PSNGR_MASK = Flights.PreDepartureCloseOutPassengerMask,\n\t\tREMNG_FUEL_LOAD = Flights.RemainingFuelLoad,\n\t\tSCHDD_ARRVL_TIME = Flights.ScheduledArrivalTime,\n\t\tSCHDD_DPTR_TIME = Flights.ScheduledDepartureTime,\n\t\tSCHDD_DPTR_TIME_UTC = Flights.ScheduledDepartureTimeUTC,\n\t\tSEG_NO = Flights.SegmentNo,\n\t\tSTS = Flights.Status,\n\t\tTAIL_NO = Flights.TailNo,\n\t\tTOT_CRGO_LOAD = Flights.TotalCargoLoad,\n\t\tTOT_FUEL_LOAD = Flights.TotalFuelLoad,\n\t\tTYPE = Flights.Type,\n\t\tUPLIFT_FUEL_LOAD = Flights.UpliftFuelLoad,\n\t\tUSE_AVG_BAG_WGT = Flights.UseAverageBagWeight,\n\t\tUSE_AVG_PAX_WGT = Flights.UseAveragePaxWeight,\n\t\tWGT_UNITS_KG = Flights.WeightUnitsKgs,\n\t\tCREW_APP_RCPNT_ID = Flights.CrewMemberSecurityRules.ApplicationRecipientID\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ExtractFlightColumns\nActiveFlights select(mapColumn(\n\t\tFlights\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectFlightsJson\nSelectFlight foldDown(unroll(Flights),\n\tmapColumn(\n\t\tAPIS_CARR_CD = Flights.Carrier.ApisCarrierCode,\n\t\tAPIS_CNTCT_NAME = Flights.Carrier.ApisContactName,\n\t\tAPIS_FAX = Flights.Carrier.ApisFax,\n\t\tAPIS_SENDR_ID = Flights.Carrier.ApisSenderID,\n\t\tAPIS_TEL = Flights.Carrier.ApisTelephone,\n\t\tCARR_NAME = Flights.Carrier.CarrierName,\n\t\tCD = Flights.Carrier.Code,\n\t\tDFLT_ADLT_AGE = Flights.Carrier.DefaultAdultAge,\n\t\tDFLT_CHILD_AGE = Flights.Carrier.DefaultChildAge,\n\t\tEMAIL = Flights.Carrier.Email,\n\t\tEMAIL_SENDR_ADDR = Flights.Carrier.EmailSenderAddress,\n\t\tEMGCY_ST_GT_STOP_INSTRN = Flights.Carrier.EmergencySeatGateStopInstructions,\n\t\tIATA = Flights.Carrier.IATA,\n\t\tICAO = Flights.Carrier.ICAO,\n\t\tIS_PRT_BAG_TAG_WOUT_CHK_IN_ALWD = Flights.Carrier.IsPrintingBagTagWithoutCheckInAllowed,\n\t\tMAX_PSNGR_BAGS = Flights.Carrier.MaximumPassengerBags,\n\t\tPNL_IMPRT_CLS_TIME = Flights.Carrier.PnlImportCloseTime,\n\t\tPRFX = Flights.Carrier.Prefix,\n\t\tSELTE_DT_STOP_INSTRN = Flights.Carrier.SelecteeGateStopInstructions,\n\t\tTSA_PRE_CHK = Flights.Carrier.TsaPreCheck,\n\t\tUNVERFD_DOCS_GT_STOP_INSTRN = Flights.Carrier.UnverifiedDocumentsGateStopInstructions,\n\t\tWTCH_LST_NO_FLY_MTCH_INSTRN = Flights.Carrier.WatchlistNoFlyMatchInstructions,\n\t\tWTCH_LST_PRVNT_MTCH_INSTRN = Flights.Carrier.WatchlistPreventMatchInstructions,\n\t\tWTCH_LST_SELTE_MTCH_INSTRN = Flights.Carrier.WatchlistSelecteeMatchInstructions,\n\t\tWEB_SITE = Flights.Carrier.Website\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ExtractCarrierColumns\nActiveFlights select(mapColumn(\n\t\tFlights\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectFlight\nSelectFlight foldDown(unroll(Flights),\n\tmapColumn(\n\t\tCITY = Flights.Carrier.Address.City,\n\t\tCNTRY_CD = Flights.Carrier.Address.CountryCode,\n\t\tID = Flights.Carrier.Address.ID,\n\t\tLCTN = Flights.Carrier.Address.Location,\n\t\tPOSTL_CD = Flights.Carrier.Address.PostalCode,\n\t\tSTAT_CD = Flights.Carrier.Address.StateCode,\n\t\tST1 = Flights.Carrier.Address.Street1,\n\t\tST2 = Flights.Carrier.Address.Street2\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ExtractCarrierAddress\nSelectFlight foldDown(unroll(Flights.CrewMemberSecurityRules),\n\tmapColumn(\n\t\tAPP_RCPNT_ID = Flights.CrewMemberSecurityRules.ApplicationRecipientID,\n\t\tBTCH_CNTCT_DTL = Flights.CrewMemberSecurityRules.BatchContactDetails,\n\t\tBTCH_DEST_ADDR_COND = Flights.CrewMemberSecurityRules.BatchDestinationAddressCondition,\n\t\tBTCH_SUBMSN = Flights.CrewMemberSecurityRules.BatchSubmission,\n\t\tBTCH_TRIG_HR = Flights.CrewMemberSecurityRules.BatchTriggerHours,\n\t\tBTCH_VLDN = Flights.CrewMemberSecurityRules.BatchValidation,\n\t\tBLD_FCM_FROM_MCL_ONLY = Flights.CrewMemberSecurityRules.BuildFcmFromMclOnly,\n\t\tCHK_IN_BRTH_PLACE = Flights.CrewMemberSecurityRules.CheckinBirthPlace,\n\t\tCHK_IN_CLRNC = Flights.CrewMemberSecurityRules.CheckinClearance,\n\t\tCHK_IN_CNTCT_DTL = Flights.CrewMemberSecurityRules.CheckinContactDetails,\n\t\tCHK_IN_DOB = Flights.CrewMemberSecurityRules.CheckinDOB,\n\t\tCHK_IN_DEST_ADDR = Flights.CrewMemberSecurityRules.CheckinDestinationAddress,\n\t\tCHK_IN_DEST_ADDR_COND = Flights.CrewMemberSecurityRules.CheckinDestinationAddressCondition,\n\t\tCHK_IN_GNDR = Flights.CrewMemberSecurityRules.CheckinGender,\n\t\tCHK_IN_HOME_ADDR = Flights.CrewMemberSecurityRules.CheckinHomeAddress,\n\t\tNTNALTY = Flights.CrewMemberSecurityRules.CheckinNationality,\n\t\tCHK_IN_ORIG_DEST = Flights.CrewMemberSecurityRules.CheckinOrigDest,\n\t\tRSDNC = Flights.CrewMemberSecurityRules.CheckinResidence,\n\t\tCHK_IN_STS_ON_BRD = Flights.CrewMemberSecurityRules.CheckinStatusOnBoard,\n\t\tCHK_IN_TRVL_DOC = Flights.CrewMemberSecurityRules.CheckinTravelDoc,\n\t\tCMN_ACCS_REF = Flights.CrewMemberSecurityRules.CommonAccessReference,\n\t\tCNTRY_ENTY = Flights.CrewMemberSecurityRules.CountryEntity,\n\t\tCREW_ADD = Flights.CrewMemberSecurityRules.CrewAdd,\n\t\tCREW_CNCL = Flights.CrewMemberSecurityRules.CrewCancel,\n\t\tCREW_CHG = Flights.CrewMemberSecurityRules.CrewChange,\n\t\tFLT_ADD = Flights.CrewMemberSecurityRules.FlightAdd,\n\t\tFLT_CNCL = Flights.CrewMemberSecurityRules.FlightCancel,\n\t\tFLT_CHG = Flights.CrewMemberSecurityRules.FlightChange,\n\t\tFLT_POST_DPTR_CLS_OUT = Flights.CrewMemberSecurityRules.FlightPostDepartureCloseout,\n\t\tFLT_POST_DPTR_CLS_OUT_ON_BRD = Flights.CrewMemberSecurityRules.FlightPostDepartureCloseoutOnBoard,\n\t\tFLT_PRE_DPTR_CLS_OUT = Flights.CrewMemberSecurityRules.FlightPreDepartureCloseout,\n\t\tFLT_ROUTG = Flights.CrewMemberSecurityRules.FlightRouting,\n\t\tFLT_TYP = Flights.CrewMemberSecurityRules.FlightType,\n\t\tHAS_FLT_CLS_OUT_REQT = Flights.CrewMemberSecurityRules.HasFlightCloseoutRequirement,\n\t\tINTACTV_COMM = Flights.CrewMemberSecurityRules.InteractiveComms,\n\t\tINTCHG_RCPNT_ID = Flights.CrewMemberSecurityRules.InterchangeRecipientID,\n\t\tOUTAGE_VTNG_STS = Flights.CrewMemberSecurityRules.OutageVettingStatus,\n\t\tREQ_SCRTY_CLRNC = Flights.CrewMemberSecurityRules.RequireSecurityClearance,\n\t\tWTCH_LST_VET = Flights.CrewMemberSecurityRules.WatchlistVet\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ExtractCrewMemberSecurityRules\nSelectFlight foldDown(unroll(Flights),\n\tmapColumn(\n\t\tCARR_CD = Flights.HealthCheckRule.CarrierCode,\n\t\tCRTD_BY = Flights.HealthCheckRule.CreatedBy,\n\t\tCRTD_TIME_STMP_UTC = Flights.HealthCheckRule.CreatedTimestampUTC,\n\t\tDEST_AIRPORT = Flights.HealthCheckRule.DestinationAirport,\n\t\tDEST_CNTRY_ENTY = Flights.HealthCheckRule.DestinationCountryEntity,\n\t\tID = Flights.HealthCheckRule.ID,\n\t\tINSTRN = Flights.HealthCheckRule.Instructions,\n\t\tIS_ACTV = Flights.HealthCheckRule.IsActive,\n\t\tIS_CLR_TO_BRD = Flights.HealthCheckRule.IsClearToBoard,\n\t\tIS_REQ_PRF_FOR_RMOTE_CHK_IN = Flights.HealthCheckRule.IsRequireProofForRemoteCheckIn,\n\t\tIS_REQ_RMRK_FOR_FAIL_STS = Flights.HealthCheckRule.IsRequireRemarksForFailStatus,\n\t\tORIG_AIRPORT = Flights.HealthCheckRule.OriginAirport,\n\t\tORIG_CNTRY_ENTY = Flights.HealthCheckRule.OriginCountryEntity,\n\t\tUPDTD_BY = Flights.HealthCheckRule.UpdatedBy\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ExtractHealthCheckRuleColumns\nSelectFlight foldDown(unroll(Flights.PassengerSecurityRules),\n\tmapColumn(\n\t\tAPP_RCPNT_ID = Flights.PassengerSecurityRules.ApplicationRecipientID,\n\t\tBTCH_CLRNCE = Flights.PassengerSecurityRules.BatchClearance,\n\t\tBTCH_DEST_ADDR = Flights.PassengerSecurityRules.BatchDestinationAddress,\n\t\tBTCH_DEST_ADDR_COND = Flights.PassengerSecurityRules.BatchDestinationAddressCondition,\n\t\tBTCH_ORIG_DEST = Flights.PassengerSecurityRules.BatchOrigDest,\n\t\tBTCH_PNR = Flights.PassengerSecurityRules.BatchPNR,\n\t\tBTCH_RSDNC = Flights.PassengerSecurityRules.BatchResidence,\n\t\tBTCH_SUBMSN = Flights.PassengerSecurityRules.BatchSubmission,\n\t\tBTCH_TRIG_HR = Flights.PassengerSecurityRules.BatchTriggerHours,\n\t\tBTCH_VLDN = Flights.PassengerSecurityRules.BatchValidation,\n\t\tCHK_IN_CLRNC = Flights.PassengerSecurityRules.CheckinClearance,\n\t\tCHK_IN_DOB = Flights.PassengerSecurityRules.CheckinDOB,\n\t\tCHK_IN_DEST_ADDR = Flights.PassengerSecurityRules.CheckinDestinationAddress,\n\t\tCHK_IN_DEST_ADDR_COND = Flights.PassengerSecurityRules.CheckinDestinationAddressCondition,\n\t\tCHK_IN_GNDR = Flights.PassengerSecurityRules.CheckinGender,\n\t\tCHK_IN_NTNALTY = Flights.PassengerSecurityRules.CheckinNationality,\n\t\tCHK_IN_ORIG_DEST = Flights.PassengerSecurityRules.CheckinOrigDest,\n\t\tCHK_IN_PNR = Flights.PassengerSecurityRules.CheckinPNR,\n\t\tCHK_IN_RSDNC = Flights.PassengerSecurityRules.CheckinResidence,\n\t\tCHK_IN_TRVL_DOC = Flights.PassengerSecurityRules.CheckinTravelDoc,\n\t\tCMN_ACCS_REF = Flights.PassengerSecurityRules.CommonAccessReference,\n\t\tCNTRY_ENTY = Flights.PassengerSecurityRules.CountryEntity,\n\t\tFLT_ADD = Flights.PassengerSecurityRules.FlightAdd,\n\t\tFLT_CNCL = Flights.PassengerSecurityRules.FlightCancel,\n\t\tFLT_CHG = Flights.PassengerSecurityRules.FlightChange,\n\t\tFLT_POST_DPTR_CLS_OUT = Flights.PassengerSecurityRules.FlightPostDepartureCloseout,\n\t\tFLT_POST_DPTR_CLS_OUT_ON_BRD = Flights.PassengerSecurityRules.FlightPostDepartureCloseoutOnBoard,\n\t\tFLT_PRE_DPTR_CLS_OUT = Flights.PassengerSecurityRules.FlightPreDepartureCloseout,\n\t\tFLT_ROUTG = Flights.PassengerSecurityRules.FlightRouting,\n\t\tFLT_TYP = Flights.PassengerSecurityRules.FlightType,\n\t\tGATE_PASS = Flights.PassengerSecurityRules.GatePass,\n\t\tHAS_FLT_CLS_OUT_REQT = Flights.PassengerSecurityRules.HasFlightCloseoutRequirement,\n\t\tINTACTV_COMM = Flights.PassengerSecurityRules.InteractiveComms,\n\t\tINTCHG_RCPNT_ID = Flights.PassengerSecurityRules.InterchangeRecipientID,\n\t\tOUTAGE_VTNG_STS = Flights.PassengerSecurityRules.OutageVettingStatus,\n\t\tPAX_ADD = Flights.PassengerSecurityRules.PaxAdd,\n\t\tPAX_CNCL = Flights.PassengerSecurityRules.PaxCancel,\n\t\tPAX_CHG = Flights.PassengerSecurityRules.PaxChange,\n\t\tPAX_XFER = Flights.PassengerSecurityRules.PaxTransfer,\n\t\tPAX_VERFD_ID = Flights.PassengerSecurityRules.PaxVerifiedID,\n\t\tREQ_SCRTY_CLRNC = Flights.PassengerSecurityRules.RequireSecurityClearance,\n\t\tWTCH_LST_VET = Flights.PassengerSecurityRules.WatchlistVet\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ExtractPassengerSecurityRulesColumns\nExtractPassengerSecurityRulesColumns derive(ETL_CAPT_DT = currentDate('UTC'),\n\t\tADF_RUN_ID = $run_id) ~> AddAdditionalColumns\nExtractHealthCheckRuleColumns derive(ETL_CAPT_DT = currentDate('UTC'),\n\t\tADF_RUN_ID = $run_id) ~> AddAdditionalColumns2\nExtractCrewMemberSecurityRules derive(ETL_CAPT_DT = currentDate('UTC'),\n\t\tADF_RUN_ID = $run_id) ~> AddAdditionalColumns3\nExtractCarrierAddress derive(ETL_CAPT_DT = currentDate('UTC'),\n\t\tADF_RUN_ID = $run_id) ~> AddAdditionalColumns4\nExtractCarrierColumns derive(ETL_CAPT_DT = currentDate('UTC'),\n\t\tADF_RUN_ID = $run_id) ~> AddAdditionalColumns5\nConvertSegmentNoToInt derive(ETL_CAPT_DT = currentDate('UTC'),\n\t\tADF_RUN_ID = $run_id) ~> AddAdditionalColumns6\nExtractFlightColumns derive(SEG_NO = iif(SEG_NO==true(),1 ,0 )) ~> ConvertSegmentNoToInt\nAddAdditionalColumns6 sink(input(\n\t\tAIR_CRAFT_CPTY as integer,\n\t\tANCLRY_TMPLT_ID as string,\n\t\tARRVL_GT as string,\n\t\tARRVL_TRMNL as string,\n\t\tBTCH_CREW_MBR_MASK as string,\n\t\tBTCH_PSNGR_MASK as string,\n\t\tBRDNG_TIME as string,\n\t\tBKD_PSNGR_CNT as integer,\n\t\tCNCLD_BY as string,\n\t\tCNCLD_RSN as string,\n\t\tCARR_CD as double,\n\t\tCREW_FLT_POST_DPTR_CLS_OUT_STS as string,\n\t\tCREW_FLT_PRE_DPTR_CLS_OUT_STS as string,\n\t\tCUST_ID as string,\n\t\tDPTR_GT as string,\n\t\tDPTR_TRMNL as string,\n\t\tDEST_AIRPORT_CITY as string,\n\t\tDEST_AIRPORT_CNTRY_CD as string,\n\t\tDEST_AIRPORT_NAME as string,\n\t\tDEST_IATA as string,\n\t\tDEST_ICAO as string,\n\t\tENABL_BRDNG as boolean,\n\t\tENABL_CREW_APIS as boolean,\n\t\tENABL_DCS as boolean,\n\t\tENABL_PSNGR_APIS as boolean,\n\t\tENABL_THRU_CHK_IN as boolean,\n\t\tESTD_ARRVL_TIME as string,\n\t\tESTD_DPTR_TIME as string,\n\t\tEXTRNL_ID as integer,\n\t\tFLT_DLAY as string,\n\t\tFLT_NO as integer,\n\t\tHAS_PSNGR_SCRTY_TRNS as boolean,\n\t\tHLTH_CHK_RULES_ID as string,\n\t\tPSNGRS as string,\n\t\tPAX_BTCH_PRE_VET_STS as string,\n\t\tFLT_ID as string,\n\t\tIS_CNCLD as boolean,\n\t\tIS_OPEN_STNG as boolean,\n\t\tIS_PRGRSV_FLT as boolean,\n\t\tMKTG_CARR_CD as string,\n\t\tMSG as string,\n\t\tORIG_AIRPORT_CITY as string,\n\t\tORIG_AIRPORT_CNTRY_CD as string,\n\t\tORIG_AIRPORT_NAME as string,\n\t\tORIG_IATA as string,\n\t\tORIG_ICAO as string,\n\t\tPSNGR_APP_RCPNT_ID as string,\n\t\tPAX_FLT_POST_DPTR_CLS_OUT_STS as string,\n\t\tPAX_FLT_PRE_DPTR_CLS_OUT_STS as string,\n\t\tPNL_IMPRTD as boolean,\n\t\tPOST_DPTR_CLS_OUT_CREW_MBR_MASK as string,\n\t\tPOST_DPTR_CLS_OUT_PSNGR_MASK as string,\n\t\tPRE_DPTR_CLS_OUT_CREW_MBR_MASK as string,\n\t\tPRE_DPTR_CLS_OUT_PSNGR_MASK as string,\n\t\tREMNG_FUEL_LOAD as boolean,\n\t\tSCHDD_ARRVL_TIME as string,\n\t\tSCHDD_DPTR_TIME as string,\n\t\tSCHDD_DPTR_TIME_UTC as timestamp,\n\t\tSEG_NO as integer,\n\t\tSTS as string,\n\t\tTAIL_NO as string,\n\t\tTOT_CRGO_LOAD as boolean,\n\t\tTOT_FUEL_LOAD as boolean,\n\t\tTYPE as string,\n\t\tUPLIFT_FUEL_LOAD as boolean,\n\t\tUSE_AVG_BAG_WGT as boolean,\n\t\tUSE_AVG_PAX_WGT as boolean,\n\t\tWGT_UNITS_KG as boolean,\n\t\tCREW_APP_RCPNT_ID as string,\n\t\tETL_CAPT_DT as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\teach(match(true()))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> WriteFlightToSQL\nAddAdditionalColumns5 sink(input(\n\t\tApisCarrierCode as double,\n\t\tApisContactName as string,\n\t\tApisFax as string,\n\t\tApisSenderID as string,\n\t\tApisTelephone as string,\n\t\tCarrierName as string,\n\t\tCode as double,\n\t\tDefaultAdultAge as integer,\n\t\tDefaultChildAge as integer,\n\t\tEmail as string,\n\t\tEmailSenderAddress as string,\n\t\tEmergencySeatGateStopInstructions as string,\n\t\tIATA as double,\n\t\tICAO as string,\n\t\tIcon as string,\n\t\tIsPrintingBagTagWithoutCheckInAllowed as boolean,\n\t\tLogo as string,\n\t\tMaximumPassengerBags as integer,\n\t\tPnlImportCloseTime as integer,\n\t\tPrefix as integer,\n\t\tSelecteeGateStopInstructions as string,\n\t\tTsaPreCheck as boolean,\n\t\tUnverifiedDocumentsGateStopInstructions as string,\n\t\tWatchlistNoFlyMatchInstructions as string,\n\t\tWatchlistPreventMatchInstructions as string,\n\t\tWatchlistSelecteeMatchInstructions as string,\n\t\tWebsite as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> WriteCarrierToSQL\nAddAdditionalColumns4 sink(input(\n\t\tID as integer,\n\t\tCountryCode as string,\n\t\tCity as string,\n\t\tLocation as string,\n\t\tPostalCode as string,\n\t\tStateCode as string,\n\t\tStreet1 as string,\n\t\tStreet2 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> WriteCarrierAddressToSQL\nAddAdditionalColumns3 sink(input(\n\t\tApplicationRecipientID as string,\n\t\tBatchContactDetails as boolean,\n\t\tBatchDestinationAddressCondition as boolean,\n\t\tBatchSubmission as boolean,\n\t\tBatchTriggerHours as boolean,\n\t\tBatchValidation as boolean,\n\t\tBuildFcmFromMclOnly as boolean,\n\t\tCheckinBirthPlace as boolean,\n\t\tCheckinClearance as boolean,\n\t\tCheckinContactDetails as boolean,\n\t\tCheckinDOB as boolean,\n\t\tCheckinDestinationAddress as boolean,\n\t\tCheckinDestinationAddressCondition as boolean,\n\t\tCheckinGender as boolean,\n\t\tCheckinHomeAddress as boolean,\n\t\tNationality as boolean,\n\t\tCheckinOrigDest as boolean,\n\t\tResidence as boolean,\n\t\tCheckinStatusOnBoard as boolean,\n\t\tCheckinTravelDoc as boolean,\n\t\tCommonAccessReference as string,\n\t\tCountryEntity as string,\n\t\tCrewAdd as boolean,\n\t\tCrewCancel as boolean,\n\t\tCrewChange as boolean,\n\t\tFlightAdd as boolean,\n\t\tFlightCancel as boolean,\n\t\tFlightChange as boolean,\n\t\tFlightPostDepartureCloseout as boolean,\n\t\tFlightPostDepartureCloseoutOnBoard as boolean,\n\t\tFlightPreDepartureCloseout as boolean,\n\t\tFlightRouting as integer,\n\t\tFlightType as integer,\n\t\tHasFlightCloseoutRequirement as boolean,\n\t\tInteractiveComms as boolean,\n\t\tInterchangeRecipientID as string,\n\t\tOutageVettingStatus as boolean,\n\t\tRequireSecurityClearance as boolean,\n\t\tWatchlistVet as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> WriteCrewMemberSecurityRulesToSQL\nAddAdditionalColumns2 sink(input(\n\t\tCarrierCode as double,\n\t\tCreatedBy as string,\n\t\tCreatedTimestampUTC as string,\n\t\tDestinationAirport as string,\n\t\tDestinationCountryEntity as string,\n\t\tID as string,\n\t\tInstructions as string,\n\t\tIsActive as boolean,\n\t\tIsClearToBoard as boolean,\n\t\tIsRequireProofForRemoteCheckIn as boolean,\n\t\tIsRequireRemarksForFailStatus as boolean,\n\t\tOriginAirport as string,\n\t\tOriginCountryEntity as string,\n\t\tUpdatedBy as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> WriteHealthCheckRulesToSQL\nAddAdditionalColumns sink(input(\n\t\tApplicationRecipientID as string,\n\t\tBatchClearance as boolean,\n\t\tBatchDestinationAddress as boolean,\n\t\tBatchDestinationAddressCondition as boolean,\n\t\tBatchOrigDest as boolean,\n\t\tBatchPNR as boolean,\n\t\tBatchResidence as boolean,\n\t\tBatchSubmission as boolean,\n\t\tBatchTriggerHours as integer,\n\t\tBatchValidation as boolean,\n\t\tCheckinClearance as boolean,\n\t\tCheckinDOB as boolean,\n\t\tCheckinDestinationAddress as boolean,\n\t\tCheckinDestinationAddressCondition as boolean,\n\t\tCheckinGender as boolean,\n\t\tCheckinNationality as boolean,\n\t\tCheckinOrigDest as boolean,\n\t\tCheckinPNR as boolean,\n\t\tCheckinResidence as boolean,\n\t\tCheckinTravelDoc as boolean,\n\t\tCommonAccessReference as string,\n\t\tCountryEntity as string,\n\t\tFlightAdd as boolean,\n\t\tFlightCancel as boolean,\n\t\tFlightChange as boolean,\n\t\tFlightPostDepartureCloseout as boolean,\n\t\tFlightPostDepartureCloseoutOnBoard as boolean,\n\t\tFlightPreDepartureCloseout as boolean,\n\t\tFlightRouting as integer,\n\t\tFlightType as integer,\n\t\tGatePass as boolean,\n\t\tHasFlightCloseoutRequirement as boolean,\n\t\tInteractiveComms as boolean,\n\t\tInterchangeRecipientID as string,\n\t\tOutageVettingStatus as boolean,\n\t\tPaxAdd as boolean,\n\t\tPaxCancel as boolean,\n\t\tPaxChange as boolean,\n\t\tPaxTransfer as boolean,\n\t\tPaxVerifiedID as boolean,\n\t\tRequireSecurityClearance as boolean,\n\t\tWatchlistVet as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> WritePassengerSecurityRules"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/eal_ac_active_flights')]",
				"[concat(variables('factoryId'), '/datasets/sql_active_flights')]",
				"[concat(variables('factoryId'), '/datasets/sql_carrier')]",
				"[concat(variables('factoryId'), '/datasets/sql_carrier_address')]",
				"[concat(variables('factoryId'), '/datasets/sql_crew_security_rules')]",
				"[concat(variables('factoryId'), '/datasets/sql_health_check_rules')]",
				"[concat(variables('factoryId'), '/datasets/sql_passenger_security_rules')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adf_control')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ADF Control Table"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADF_Control",
								"type": "DatasetReference"
							},
							"name": "ADFCONTROL"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "eal_adf_cntrl",
								"type": "DatasetReference"
							},
							"name": "Write"
						}
					],
					"transformations": [
						{
							"name": "AddADFDetails"
						},
						{
							"name": "AlterRow"
						}
					],
					"script": "parameters{\n\trun_id as string (''),\n\tadf_name as string ('')\n}\nsource(output(\n\t\trow as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> ADFCONTROL\nADFCONTROL derive(ADF_RUN_ID = $run_id,\n\t\tADF_TIME_STMP = currentDate()-1,\n\t\tADF_JOB_NAME = $adf_name) ~> AddADFDetails\nAddADFDetails alterRow(updateIf(ADF_JOB_NAME==$adf_name)) ~> AlterRow\nAlterRow sink(input(\n\t\tADF_RUN_ID as string,\n\t\tADF_JOB_NAME as string,\n\t\tADF_SUC_TS as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['ADF_JOB_NAME'],\n\tformat: 'table',\n\tmapColumn(\n\t\tADF_RUN_ID,\n\t\tADF_JOB_NAME,\n\t\tADF_SUC_TS = ADF_TIME_STMP\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Write"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ADF_Control')]",
				"[concat(variables('factoryId'), '/datasets/eal_adf_cntrl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adf_reset_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ADF Control Table"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "eal_adf_cntrl",
								"type": "DatasetReference"
							},
							"name": "GetControls"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "eal_adf_cntrl",
								"type": "DatasetReference"
							},
							"name": "WriteResetDate"
						}
					],
					"transformations": [
						{
							"name": "AlterRow"
						},
						{
							"name": "FilterJob"
						},
						{
							"name": "ResetDate"
						}
					],
					"script": "parameters{\n\tjob_name as string ('')\n}\nsource(output(\n\t\tADF_RUN_ID as string,\n\t\tADF_JOB_NAME as string,\n\t\tADF_SUC_TS as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> GetControls\nResetDate alterRow(updateIf(ADF_JOB_NAME==$job_name)) ~> AlterRow\nGetControls filter(ADF_JOB_NAME == $job_name) ~> FilterJob\nFilterJob derive(Date = '1899-01-01 00:00:00.000',\n\t\tid = '') ~> ResetDate\nAlterRow sink(input(\n\t\tADF_RUN_ID as string,\n\t\tADF_JOB_NAME as string,\n\t\tADF_SUC_TS as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['ADF_JOB_NAME'],\n\tformat: 'table',\n\tmapColumn(\n\t\tADF_RUN_ID = id,\n\t\tADF_JOB_NAME,\n\t\tADF_SUC_TS = Date\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> WriteResetDate"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/eal_adf_cntrl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/d_arpt_daily_load_insert')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Airport"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_s_airports",
								"type": "DatasetReference"
							},
							"name": "StgArpt"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_d_aprt",
								"type": "DatasetReference"
							},
							"name": "WriteNewRows"
						}
					],
					"transformations": [
						{
							"name": "MapDrifted1",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "AddADFColumns1"
						},
						{
							"name": "DropColumns1"
						},
						{
							"name": "SetRowNumber"
						}
					],
					"script": "parameters{\n\tdt as string ('2021-01-27'),\n\trow_num as integer (990000)\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT [ARPT_NAME],[ARPT_CITY],[ARPT_CNTRY],[ARPT_IATA_CD],[ARPT_ICAO_CD],[ARPT_LAT],[ARPT_LONG],[ARPT_ALTD],[ARPT_UTC_OFSET],[ARPT_DST],[ARPT_TZONE],[LAST_UPDT_DT],[ADF_RUN_ID],[ADF_TIME_STMP] FROM [S_AIRPORTS] WHERE [LAST_UPDT_DT] > '\"+$dt+\"'\"),\n\tformat: 'query') ~> StgArpt\nStgArpt derive(ARPT_NAME = toString(byName('ARPT_NAME')),\n\t\tARPT_CITY = toString(byName('ARPT_CITY')),\n\t\tARPT_CNTRY = toString(byName('ARPT_CNTRY')),\n\t\tARPT_IATA_CD = toString(byName('ARPT_IATA_CD')),\n\t\tARPT_ICAO_CD = toString(byName('ARPT_ICAO_CD')),\n\t\tARPT_LAT = toDouble(byName('ARPT_LAT')),\n\t\tARPT_LONG = toDouble(byName('ARPT_LONG')),\n\t\tARPT_ALTD = toShort(byName('ARPT_ALTD')),\n\t\tARPT_UTC_OFSET = toDouble(byName('ARPT_UTC_OFSET')),\n\t\tARPT_DST = toString(byName('ARPT_DST')),\n\t\tARPT_TZONE = toString(byName('ARPT_TZONE')),\n\t\tLAST_UPDT_DT = toDate(byName('LAST_UPDT_DT')),\n\t\tADF_RUN_ID = toString(byName('ADF_RUN_ID')),\n\t\tADF_TIME_STMP = toTimestamp(byName('ADF_TIME_STMP'))) ~> MapDrifted1\nDropColumns1 derive(EFF_STRT_DT = LAST_UPDT_DT,\n\t\tEFF_END_DT = toDate('2500-01-01'),\n\t\tACTV_IND = 'Y',\n\t\tID = $row_num+1) ~> AddADFColumns1\nMapDrifted1 select(mapColumn(\n\t\tARPT_NAME,\n\t\tARPT_CITY,\n\t\tARPT_CNTRY,\n\t\tARPT_IATA_CD,\n\t\tARPT_ICAO_CD,\n\t\tARPT_LAT,\n\t\tARPT_LONG,\n\t\tARPT_ALTD,\n\t\tARPT_UTC_OFSET,\n\t\tARPT_DST,\n\t\tARPT_TZONE,\n\t\tLAST_UPDT_DT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DropColumns1\nAddADFColumns1 window(over(ID),\n\tasc(ID, true),\n\tAPRT_ID = $row_num + rowNumber()) ~> SetRowNumber\nSetRowNumber sink(input(\n\t\tARPT_ID as integer,\n\t\tARPT_IATA_CD as string,\n\t\tARPT_ICAO_CD as string,\n\t\tARPT_NAME as string,\n\t\tARPT_CNTRY as string,\n\t\tARPT_CITY as string,\n\t\tARPT_LAT as decimal(8,6),\n\t\tARPT_LONG as decimal(9,6),\n\t\tARPT_ALTD as decimal(6,2),\n\t\tARPT_UTC_OFSET as decimal(2,2),\n\t\tARPT_DST_CD as string,\n\t\tARPT_TZONE as string,\n\t\tEFF_STRT_DT as timestamp,\n\t\tEFF_END_DT as timestamp,\n\t\tACTV_IND as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tARPT_ID = APRT_ID,\n\t\tARPT_IATA_CD,\n\t\tARPT_ICAO_CD,\n\t\tARPT_NAME,\n\t\tARPT_CNTRY,\n\t\tARPT_CITY,\n\t\tARPT_LAT,\n\t\tARPT_LONG,\n\t\tARPT_ALTD,\n\t\tARPT_UTC_OFSET,\n\t\tARPT_DST_CD = ARPT_DST,\n\t\tARPT_TZONE,\n\t\tEFF_STRT_DT,\n\t\tEFF_END_DT,\n\t\tACTV_IND\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> WriteNewRows"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_s_airports')]",
				"[concat(variables('factoryId'), '/datasets/sql_d_aprt')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/d_arpt_daily_load_update')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Airport"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_s_airports",
								"type": "DatasetReference"
							},
							"name": "StgArpt"
						},
						{
							"dataset": {
								"referenceName": "sql_d_aprt",
								"type": "DatasetReference"
							},
							"name": "DARPT"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_d_aprt",
								"type": "DatasetReference"
							},
							"name": "WriteUpdates"
						}
					],
					"transformations": [
						{
							"name": "GetUpdatedRows"
						},
						{
							"name": "MapDrifted1",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "AddADFColumns2"
						},
						{
							"name": "DropColumns2"
						},
						{
							"name": "FilterTable"
						},
						{
							"name": "Join"
						},
						{
							"name": "AlterRow"
						}
					],
					"script": "parameters{\n\tdt as string ('2021-01-27')\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT [ARPT_NAME],[ARPT_CITY],[ARPT_CNTRY],[ARPT_IATA_CD],[ARPT_ICAO_CD],[ARPT_LAT],[ARPT_LONG],[ARPT_ALTD],[ARPT_UTC_OFSET],[ARPT_DST],[ARPT_TZONE],[LAST_UPDT_DT],[ADF_RUN_ID],[ADF_TIME_STMP] FROM [S_AIRPORTS] WHERE [LAST_UPDT_DT] > '\"+$dt+\"'\"),\n\tformat: 'query') ~> StgArpt\nsource(output(\n\t\tARPT_ID as integer,\n\t\tARPT_IATA_CD as string,\n\t\tARPT_ICAO_CD as string,\n\t\tARPT_NAME as string,\n\t\tARPT_CNTRY as string,\n\t\tARPT_CITY as string,\n\t\tARPT_LAT as decimal(8,6),\n\t\tARPT_LONG as decimal(9,6),\n\t\tARPT_ALTD as decimal(6,2),\n\t\tARPT_UTC_OFSET as decimal(2,2),\n\t\tARPT_DST_CD as string,\n\t\tARPT_TZONE as string,\n\t\tEFF_STRT_DT as timestamp,\n\t\tEFF_END_DT as timestamp,\n\t\tACTV_IND as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DARPT\nMapDrifted1, FilterTable exists(DARPT@ARPT_IATA_CD ==MapDrifted1@ARPT_IATA_CD || DARPT@ARPT_ICAO_CD ==MapDrifted1@ARPT_ICAO_CD,\n\tnegate:false,\n\tbroadcast: 'auto')~> GetUpdatedRows\nStgArpt derive(ARPT_NAME = toString(byName('ARPT_NAME')),\n\t\tARPT_CITY = toString(byName('ARPT_CITY')),\n\t\tARPT_CNTRY = toString(byName('ARPT_CNTRY')),\n\t\tARPT_IATA_CD = toString(byName('ARPT_IATA_CD')),\n\t\tARPT_ICAO_CD = toString(byName('ARPT_ICAO_CD')),\n\t\tARPT_LAT = toDouble(byName('ARPT_LAT')),\n\t\tARPT_LONG = toDouble(byName('ARPT_LONG')),\n\t\tARPT_ALTD = toShort(byName('ARPT_ALTD')),\n\t\tARPT_UTC_OFSET = toDouble(byName('ARPT_UTC_OFSET')),\n\t\tARPT_DST = toString(byName('ARPT_DST')),\n\t\tARPT_TZONE = toString(byName('ARPT_TZONE')),\n\t\tLAST_UPDT_DT = toDate(byName('LAST_UPDT_DT')),\n\t\tADF_RUN_ID = toString(byName('ADF_RUN_ID')),\n\t\tADF_TIME_STMP = toTimestamp(byName('ADF_TIME_STMP'))) ~> MapDrifted1\nDropColumns2 derive(EFF_END_DT = LAST_UPDT_DT -1,\n\t\tACTV_IND = 'N') ~> AddADFColumns2\nJoin select(mapColumn(\n\t\tARPT_NAME = MapDrifted1@ARPT_NAME,\n\t\tARPT_CITY = MapDrifted1@ARPT_CITY,\n\t\tARPT_CNTRY = MapDrifted1@ARPT_CNTRY,\n\t\tARPT_IATA_CD = MapDrifted1@ARPT_IATA_CD,\n\t\tARPT_ICAO_CD = MapDrifted1@ARPT_ICAO_CD,\n\t\tARPT_LAT = MapDrifted1@ARPT_LAT,\n\t\tARPT_LONG = MapDrifted1@ARPT_LONG,\n\t\tARPT_ALTD = MapDrifted1@ARPT_ALTD,\n\t\tARPT_UTC_OFSET = MapDrifted1@ARPT_UTC_OFSET,\n\t\tARPT_DST,\n\t\tARPT_TZONE = MapDrifted1@ARPT_TZONE,\n\t\tLAST_UPDT_DT,\n\t\tARPT_ID,\n\t\tEFF_STRT_DT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DropColumns2\nDARPT filter(ACTV_IND == 'Y') ~> FilterTable\nGetUpdatedRows, FilterTable join(MapDrifted1@ARPT_IATA_CD == DARPT@ARPT_IATA_CD\n\t&& MapDrifted1@ARPT_ICAO_CD == DARPT@ARPT_ICAO_CD,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join\nAddADFColumns2 alterRow(updateIf(true())) ~> AlterRow\nAlterRow sink(input(\n\t\tARPT_ID as integer,\n\t\tARPT_IATA_CD as string,\n\t\tARPT_ICAO_CD as string,\n\t\tARPT_NAME as string,\n\t\tARPT_CNTRY as string,\n\t\tARPT_CITY as string,\n\t\tARPT_LAT as decimal(8,6),\n\t\tARPT_LONG as decimal(9,6),\n\t\tARPT_ALTD as decimal(6,2),\n\t\tARPT_UTC_OFSET as decimal(2,2),\n\t\tARPT_DST_CD as string,\n\t\tARPT_TZONE as string,\n\t\tEFF_STRT_DT as timestamp,\n\t\tEFF_END_DT as timestamp,\n\t\tACTV_IND as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['ARPT_ID'],\n\tformat: 'table',\n\tmapColumn(\n\t\tARPT_ID,\n\t\tARPT_IATA_CD,\n\t\tARPT_ICAO_CD,\n\t\tARPT_NAME,\n\t\tARPT_CNTRY,\n\t\tARPT_CITY,\n\t\tARPT_LAT,\n\t\tARPT_LONG,\n\t\tARPT_ALTD,\n\t\tARPT_UTC_OFSET,\n\t\tARPT_DST_CD = ARPT_DST,\n\t\tARPT_TZONE,\n\t\tEFF_STRT_DT,\n\t\tEFF_END_DT,\n\t\tACTV_IND\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> WriteUpdates"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_s_airports')]",
				"[concat(variables('factoryId'), '/datasets/sql_d_aprt')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/f_equip_schd_load_insert')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Equip Schd"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_s_eqip_schd",
								"type": "DatasetReference"
							},
							"name": "StgEquipSchd"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_f_equip_schd",
								"type": "DatasetReference"
							},
							"name": "InsertRows"
						}
					],
					"transformations": [
						{
							"name": "DistinctRows"
						},
						{
							"name": "AddRowCount"
						},
						{
							"name": "SetEquipID"
						}
					],
					"script": "parameters{\n\tdate as string ('1899-01-01'),\n\trow_num as integer (0)\n}\nsource(output(\n\t\tEQP_SCHED_ID as integer,\n\t\tAC_RGSTRN as string,\n\t\tSTS_CD as string,\n\t\tSTS_NAME as string,\n\t\tSTS_DESC as string,\n\t\tSTRT_TIME as timestamp,\n\t\tEND_TIME as timestamp,\n\t\tNOTE as string,\n\t\tIS_DELD as boolean,\n\t\tUPDTD_AT as timestamp,\n\t\tADF_TIME_STMP as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT * FROM [dbo].[S_EQUIP_SCHD] where  UPDTD_AT > '\"+$date+\"'\"),\n\tformat: 'query') ~> StgEquipSchd\nStgEquipSchd aggregate(groupBy(AC_RGSTRN,\n\t\tSTS_CD,\n\t\tSTRT_TIME),\n\teach(match(name!='AC_RGSTRN'&&name!='STS_CD'&&name!='STRT_TIME'), $$ = iif(first(UPDTD_AT)>last(UPDTD_AT),first($$),last($$)))) ~> DistinctRows\nDistinctRows derive(RNO_Constant = $row_num) ~> AddRowCount\nAddRowCount window(over(row_num = RNO_Constant),\n\tasc(RNO_Constant, true),\n\tEQUIP_ID = $row_num + rowNumber()) ~> SetEquipID\nSetEquipID sink(input(\n\t\tARPT_ID as integer,\n\t\tARPT_IATA_CD as string,\n\t\tARPT_ICAO_CD as string,\n\t\tARPT_NAME as string,\n\t\tARPT_CNTRY as string,\n\t\tARPT_CITY as string,\n\t\tARPT_LAT as decimal(8,6),\n\t\tARPT_LONG as decimal(9,6),\n\t\tARPT_ALTD as decimal(6,2),\n\t\tARPT_UTC_OFSET as decimal(2,2),\n\t\tARPT_DST_CD as string,\n\t\tARPT_TZONE as string,\n\t\tEFF_STRT_DT as timestamp,\n\t\tEFF_END_DT as timestamp,\n\t\tACTV_IND as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tEQP_SCHED_ID = EQUIP_ID,\n\t\tAC_RGSTRN,\n\t\tSTS_CD,\n\t\tSTS_NAME,\n\t\tSTS_DESC,\n\t\tSTRT_TIME,\n\t\tEND_TIME,\n\t\tNOTE,\n\t\tIS_DELD\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> InsertRows"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_s_eqip_schd')]",
				"[concat(variables('factoryId'), '/datasets/sql_f_equip_schd')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/f_equip_schd_load_update')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Equip Schd"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_s_eqip_schd",
								"type": "DatasetReference"
							},
							"name": "StgEquipSchd"
						},
						{
							"dataset": {
								"referenceName": "sql_f_equip_schd",
								"type": "DatasetReference"
							},
							"name": "EquipSchd"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_f_equip_schd",
								"type": "DatasetReference"
							},
							"name": "UpdateRows"
						}
					],
					"transformations": [
						{
							"name": "DistinctRows"
						},
						{
							"name": "CheckRowExistsInProd"
						},
						{
							"name": "AlterRow"
						}
					],
					"script": "parameters{\n\tdate as string ('1899-01-01')\n}\nsource(output(\n\t\tEQP_SCHED_ID as integer,\n\t\tAC_RGSTRN as string,\n\t\tSTS_CD as string,\n\t\tSTS_NAME as string,\n\t\tSTS_DESC as string,\n\t\tSTRT_TIME as timestamp,\n\t\tEND_TIME as timestamp,\n\t\tNOTE as string,\n\t\tIS_DELD as boolean,\n\t\tUPDTD_AT as timestamp,\n\t\tADF_TIME_STMP as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT * FROM [dbo].[S_EQUIP_SCHD] where  UPDTD_AT > '\"+$date+\"'\"),\n\tformat: 'query') ~> StgEquipSchd\nsource(output(\n\t\tEQP_SCHED_ID as integer,\n\t\tAC_RGSTRN as string,\n\t\tSTS_CD as string,\n\t\tSTS_NAME as string,\n\t\tSTS_DESC as string,\n\t\tSTRT_TIME as timestamp,\n\t\tEND_TIME as timestamp,\n\t\tNOTE as string,\n\t\tIS_DELD as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> EquipSchd\nCheckRowExistsInProd aggregate(groupBy(AC_RGSTRN,\n\t\tSTS_CD,\n\t\tSTRT_TIME),\n\teach(match(name!='AC_RGSTRN'&&name!='STS_CD'&&name!='STRT_TIME'), $$ = iif(first(UPDTD_AT)>last(UPDTD_AT),first($$),last($$)))) ~> DistinctRows\nStgEquipSchd, EquipSchd exists(iif(StgEquipSchd@AC_RGSTRN == EquipSchd@AC_RGSTRN\r\n\t&& StgEquipSchd@STS_CD ==EquipSchd@STS_CD\r\n\t&& StgEquipSchd@STRT_TIME == EquipSchd@STRT_TIME,true(),false()),\n\tnegate:false,\n\tbroadcast: 'auto')~> CheckRowExistsInProd\nDistinctRows alterRow(updateIf(true())) ~> AlterRow\nAlterRow sink(input(\n\t\tARPT_ID as integer,\n\t\tARPT_IATA_CD as string,\n\t\tARPT_ICAO_CD as string,\n\t\tARPT_NAME as string,\n\t\tARPT_CNTRY as string,\n\t\tARPT_CITY as string,\n\t\tARPT_LAT as decimal(8,6),\n\t\tARPT_LONG as decimal(9,6),\n\t\tARPT_ALTD as decimal(6,2),\n\t\tARPT_UTC_OFSET as decimal(2,2),\n\t\tARPT_DST_CD as string,\n\t\tARPT_TZONE as string,\n\t\tEFF_STRT_DT as timestamp,\n\t\tEFF_END_DT as timestamp,\n\t\tACTV_IND as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['AC_RGSTRN','STS_CD','STRT_TIME'],\n\tformat: 'table',\n\tmapColumn(\n\t\tAC_RGSTRN,\n\t\tSTS_CD,\n\t\tSTS_NAME,\n\t\tSTS_DESC,\n\t\tSTRT_TIME,\n\t\tEND_TIME,\n\t\tNOTE,\n\t\tIS_DELD\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> UpdateRows"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_s_eqip_schd')]",
				"[concat(variables('factoryId'), '/datasets/sql_f_equip_schd')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/f_flights_load_insert')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Flights"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_s_flights",
								"type": "DatasetReference"
							},
							"name": "StagingFlights"
						},
						{
							"dataset": {
								"referenceName": "sql_d_aprt",
								"type": "DatasetReference"
							},
							"name": "ARPT"
						},
						{
							"dataset": {
								"referenceName": "sql_d_clndr",
								"type": "DatasetReference"
							},
							"name": "CLNDR"
						},
						{
							"dataset": {
								"referenceName": "sql_f_flights_ops",
								"type": "DatasetReference"
							},
							"name": "Flights"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_f_flights_ops",
								"type": "DatasetReference"
							},
							"name": "Write"
						}
					],
					"transformations": [
						{
							"name": "FilterFlightType"
						},
						{
							"name": "LookupIATA"
						},
						{
							"name": "FilterActvInd"
						},
						{
							"name": "RemoveColumns1"
						},
						{
							"name": "LookupICAO"
						},
						{
							"name": "AddBaseAirportID"
						},
						{
							"name": "RemoveIATAICAO"
						},
						{
							"name": "LookupIATA2"
						},
						{
							"name": "RemoveColumns2"
						},
						{
							"name": "LookupICAO2"
						},
						{
							"name": "AddSchdDptrID"
						},
						{
							"name": "RemoveIATAICAO2"
						},
						{
							"name": "LookupIATA3"
						},
						{
							"name": "RemoveColumns3"
						},
						{
							"name": "LookupICAO3"
						},
						{
							"name": "AddSchdArrID"
						},
						{
							"name": "RemoveIATAICAO3"
						},
						{
							"name": "LookupIATA4"
						},
						{
							"name": "RemoveColumns4"
						},
						{
							"name": "LookupICAO4"
						},
						{
							"name": "AddActArrID"
						},
						{
							"name": "RemoveIATAICAO4"
						},
						{
							"name": "AddNewColumns"
						},
						{
							"name": "AddNewColumns2"
						},
						{
							"name": "LookupIATA5"
						},
						{
							"name": "RemoveColumns5"
						},
						{
							"name": "LookupICAO5"
						},
						{
							"name": "AddActlDptrID"
						},
						{
							"name": "RemoveIATAICAO5"
						},
						{
							"name": "SetRowNumber"
						},
						{
							"name": "LookupCLNDR"
						},
						{
							"name": "RemoveCLNDRColumns"
						},
						{
							"name": "DoesntExists"
						}
					],
					"script": "parameters{\n\trow_num as integer (0),\n\tdate as string ('1899-01-01')\n}\nsource(output(\n\t\tACTL_ARRVL_AIR_PORT as string,\n\t\tACTL_DPTR_AIR_PORT as string,\n\t\tACTL_OOOI_IN as timestamp,\n\t\tACTL_OOOI_OFF as timestamp,\n\t\tACTL_OOOI_ON as timestamp,\n\t\tACTL_OOOI_OUT as timestamp,\n\t\tAIR_CRAFT_RGSTRN_NUM as string,\n\t\tAIR_CRAFT_TYPE as string,\n\t\tBASE_AIR_PORT as string,\n\t\tCRGO_WGT as integer,\n\t\tESTD_ARRVL as timestamp,\n\t\tESTD_DPTR as timestamp,\n\t\tFLT_DT as date,\n\t\tFLT_ID as long,\n\t\tFLT_NUM as string,\n\t\tFLT_TYPE as string,\n\t\tFUEL_IN as double,\n\t\tFUEL_OUT as double,\n\t\tFUEL_UPLIFT as integer,\n\t\tIS_CNCLD as boolean,\n\t\tIS_VERFD as boolean,\n\t\tMAINT_LOG_PG as string,\n\t\tNOTES as string,\n\t\tSCHDD_ARRVL as timestamp,\n\t\tSCHDD_ARRVL_AIR_PORT as string,\n\t\tSCHDD_DPTR as timestamp,\n\t\tSCHDD_DPTR_AIR_PORT as string,\n\t\tUPDTD_AT as timestamp,\n\t\tDLAY_TYP as string,\n\t\tDURTN_MNT as integer,\n\t\tDLAY_CD as string,\n\t\tDLAY_CD_NAME as string,\n\t\tADF_TIME_STMP as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT * FROM [dbo].[S_FLIGHTS] where  UPDTD_AT > '\"+$date+\"'\"),\n\tformat: 'query') ~> StagingFlights\nsource(output(\n\t\tARPT_ID as integer,\n\t\tARPT_IATA_CD as string,\n\t\tARPT_ICAO_CD as string,\n\t\tARPT_NAME as string,\n\t\tARPT_CNTRY as string,\n\t\tARPT_CITY as string,\n\t\tARPT_LAT as decimal(8,6),\n\t\tARPT_LONG as decimal(9,6),\n\t\tARPT_ALTD as decimal(6,2),\n\t\tARPT_UTC_OFSET as decimal(2,2),\n\t\tARPT_DST_CD as string,\n\t\tARPT_TZONE as string,\n\t\tEFF_STRT_DT as timestamp,\n\t\tEFF_END_DT as timestamp,\n\t\tACTV_IND as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ARPT\nsource(output(\n\t\tCLNDR_ID as string,\n\t\tTheDate as date,\n\t\tTheDay as integer,\n\t\tTheDaySuffix as string,\n\t\tTheDayName as string,\n\t\tTheDayOfWeek as integer,\n\t\tTheDayOfWeekInMonth as integer,\n\t\tTheDayOfYear as integer,\n\t\tIsWeekend as integer,\n\t\tTheWeek as integer,\n\t\tTheISOweek as integer,\n\t\tTheFirstOfWeek as date,\n\t\tTheLastOfWeek as date,\n\t\tTheWeekOfMonth as integer,\n\t\tTheMonth as integer,\n\t\tTheMonthName as string,\n\t\tTheFirstOfMonth as date,\n\t\tTheLastOfMonth as date,\n\t\tTheFirstOfNextMonth as date,\n\t\tTheLastOfNextMonth as date,\n\t\tTheQuarter as integer,\n\t\tTheFirstOfQuarter as date,\n\t\tTheLastOfQuarter as date,\n\t\tTheYear as integer,\n\t\tTheISOYear as integer,\n\t\tTheFirstOfYear as date,\n\t\tTheLastOfYear as date,\n\t\tIsLeapYear as boolean,\n\t\tHas53Weeks as integer,\n\t\tHas53ISOWeeks as integer,\n\t\tMMYYYY as string,\n\t\tStyle101 as string,\n\t\tStyle103 as string,\n\t\tStyle112 as string,\n\t\tStyle120 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CLNDR\nsource(output(\n\t\tFLGHT_ID as integer,\n\t\tFLGHT_DT_ID as integer,\n\t\tFLGHT_NUM as string,\n\t\tFLGHT_TYP as string,\n\t\tAIR_CRAFT_RGSTRN_NUM as string,\n\t\tAIR_CRAFT_TYP as string,\n\t\tSCHDD_DPRT_TS_UTC as timestamp,\n\t\tSCHDD_ARRVL_TS_UTC as timestamp,\n\t\tESTD_DPRT_TS_UTC as timestamp,\n\t\tESTD_ARRVL_TS_UTC as timestamp,\n\t\tACTL_OOOI_OUT_TS_UTC as timestamp,\n\t\tACTL_OOOI_OFF_TS_UTC as timestamp,\n\t\tACTL_OOOI_ON_TS_UTC as timestamp,\n\t\tACTL_OOOI_IN_TS_UTC as timestamp,\n\t\tBASE_ARPT_CD as string,\n\t\tBASE_ARPT_ID as integer,\n\t\tSCHDD_DRPT_ARPT_CD as string,\n\t\tSCHDD_DRPT_ARPT_ID as integer,\n\t\tSCHDD_ARRVL_ARPT_CD as string,\n\t\tSCHDD_ARRVL_ARPT_ID as integer,\n\t\tACTL_ARRVL_ARPT_CD as string,\n\t\tACTL_ARRVL_ARPT_ID as integer,\n\t\tACTL_DPTR_ARPT_CD as string,\n\t\tACTL_DPTR_ARPT_ID as integer,\n\t\tFUEL_IN as string,\n\t\tFUEL_OUT as integer,\n\t\tFUEL_UPLIFT as integer,\n\t\tCRGO_WT as integer,\n\t\tMAINT_LOG as integer,\n\t\tNOTES as string,\n\t\tIS_CNCLD as boolean,\n\t\tIS_VERFD as boolean,\n\t\tDEP_VAR as integer,\n\t\tARRVL_VAR as integer,\n\t\tSCHDD_BLK_DUR as integer,\n\t\tACTL_BLK_DUR as integer,\n\t\tACTL_FLGHT_DUR as integer,\n\t\tDPRT_DELAY_DUR_D0_IND as integer,\n\t\tDPRT_DELAY_DUR_D15_IND as integer,\n\t\tARRVL_DELAY_DUR_A0_IND as integer,\n\t\tARRVL_DELAY_DUR_A14_IND as integer,\n\t\tBLK_DUR_B0_IND as integer,\n\t\tSCHDD_FLT_DUR as string,\n\t\tDELAY_TYP as string,\n\t\tDELAY_DUR as integer,\n\t\tDELAY_CD as string,\n\t\tDELAY_DESC as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Flights\nStagingFlights filter(FLT_TYPE <=>'flight') ~> FilterFlightType\nFilterFlightType, FilterActvInd lookup(BASE_AIR_PORT == ARPT_IATA_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIATA\nARPT filter(ACTV_IND == 'Y') ~> FilterActvInd\nLookupIATA select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tUPDTD_AT,\n\t\tDLAY_TYP,\n\t\tDURTN_MNT,\n\t\tDLAY_CD,\n\t\tDLAY_CD_NAME,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tIATA_ARPT_ID = ARPT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns1\nRemoveColumns1, FilterActvInd lookup(BASE_AIR_PORT == ARPT_ICAO_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupICAO\nLookupICAO derive(BASE_ARPT_ID = iif(isNull(IATA_ARPT_ID), ARPT_ID, IATA_ARPT_ID)) ~> AddBaseAirportID\nAddBaseAirportID select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tUPDTD_AT,\n\t\tDLAY_TYP,\n\t\tDURTN_MNT,\n\t\tDLAY_CD,\n\t\tDLAY_CD_NAME,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveIATAICAO\nRemoveIATAICAO, FilterActvInd lookup(SCHDD_DPTR_AIR_PORT == ARPT_IATA_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIATA2\nLookupIATA2 select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tUPDTD_AT,\n\t\tDLAY_TYP,\n\t\tDURTN_MNT,\n\t\tDLAY_CD,\n\t\tDLAY_CD_NAME,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tIATA_ARPT_ID = ARPT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns2\nRemoveColumns2, FilterActvInd lookup(ACTL_DPTR_AIR_PORT == ARPT_ICAO_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupICAO2\nLookupICAO2 derive(SCHDD_DRPT_ARPT_ID = iif(isNull(IATA_ARPT_ID), ARPT_ID, IATA_ARPT_ID)) ~> AddSchdDptrID\nAddSchdDptrID select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tDLAY_TYP,\n\t\tDURTN_MNT,\n\t\tDLAY_CD,\n\t\tDLAY_CD_NAME,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveIATAICAO2\nRemoveIATAICAO2, FilterActvInd lookup(ACTL_ARRVL_AIR_PORT == ARPT_IATA_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIATA3\nLookupIATA3 select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tDLAY_TYP,\n\t\tDURTN_MNT,\n\t\tDLAY_CD,\n\t\tDLAY_CD_NAME,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tIATA_ARPT_ID = ARPT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns3\nRemoveColumns3, FilterActvInd lookup(ACTL_ARRVL_AIR_PORT == ARPT_ICAO_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupICAO3\nLookupICAO3 derive(SCHDD_ARRVL_ARPT_ID = iif(isNull(IATA_ARPT_ID), ARPT_ID, IATA_ARPT_ID)) ~> AddSchdArrID\nAddSchdArrID select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tDLAY_TYP,\n\t\tDURTN_MNT,\n\t\tDLAY_CD,\n\t\tDLAY_CD_NAME,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveIATAICAO3\nRemoveIATAICAO3, FilterActvInd lookup(ACTL_ARRVL_AIR_PORT == ARPT_IATA_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIATA4\nLookupIATA4 select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tDLAY_TYP,\n\t\tDURTN_MNT,\n\t\tDLAY_CD,\n\t\tDLAY_CD_NAME,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tIATA_ARPT_ID = ARPT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns4\nRemoveColumns4, FilterActvInd lookup(ACTL_ARRVL_AIR_PORT == ARPT_ICAO_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupICAO4\nLookupICAO4 derive(ACTL_ARRVL_ARPT_ID = iif(isNull(IATA_ARPT_ID), ARPT_ID, IATA_ARPT_ID)) ~> AddActArrID\nAddActArrID select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_ARRVL_ARPT_ID,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tDLAY_TYP,\n\t\tDURTN_MNT,\n\t\tDLAY_CD,\n\t\tDLAY_CD_NAME,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveIATAICAO4\nRemoveIATAICAO5 derive(DEP_VAR = ACTL_OOOI_OUT - SCHDD_DPTR,\n\t\tARRVL_VAR = ACTL_OOOI_IN - SCHDD_ARRVL,\n\t\tSCHDD_BLK_DUR = SCHDD_DPTR - SCHDD_ARRVL,\n\t\tACTL_BLK_DUR = ACTL_OOOI_OUT - ACTL_OOOI_IN,\n\t\tACTL_FLGHT_DUR = ACTL_OOOI_OUT - ACTL_OOOI_IN) ~> AddNewColumns\nAddNewColumns derive(DPRT_DELAY_DUR_D0_IND = iif(DEP_VAR>0||isNull(ACTL_OOOI_OUT), 0, 1),\n\t\tDPRT_DELAY_DUR_D15_IND = iif(DEP_VAR>15||isNull(ACTL_OOOI_OUT), 0, 1),\n\t\tARRVL_DELAY_DUR_A0_IND = iif(ARRVL_VAR>0||isNull(ACTL_OOOI_IN), 0, 1),\n\t\tARRVL_DELAY_DUR_A14_IND = iif(ARRVL_VAR>14||isNull(ACTL_OOOI_IN), 0, 1),\n\t\tBLK_DUR_B0_IND = iif(ACTL_BLK_DUR>0||isNull(ACTL_OOOI_IN), 0, 1),\n\t\tSCHDD_FLT_DUR = '',\n\t\trow_num = $row_num+1) ~> AddNewColumns2\nRemoveIATAICAO4, FilterActvInd lookup(ACTL_DPTR_AIR_PORT == ARPT_IATA_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIATA5\nLookupIATA5 select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_ARRVL_ARPT_ID,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tDLAY_TYP,\n\t\tDURTN_MNT,\n\t\tDLAY_CD,\n\t\tDLAY_CD_NAME,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tIATA_ARPT_ID = ARPT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns5\nRemoveColumns5, FilterActvInd lookup(ACTL_DPTR_AIR_PORT == ARPT_ICAO_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupICAO5\nLookupICAO5 derive(ACTL_DPTR_ARPT_ID = iif(isNull(IATA_ARPT_ID), ARPT_ID, IATA_ARPT_ID)) ~> AddActlDptrID\nAddActlDptrID select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_ARRVL_ARPT_ID,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tDLAY_TYP,\n\t\tDURTN_MNT,\n\t\tDLAY_CD,\n\t\tDLAY_CD_NAME,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tACTL_DPTR_ARPT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveIATAICAO5\nDoesntExists window(over(row_num),\n\tasc(row_num, true),\n\tFLGHT_ID = $row_num + rowNumber()) ~> SetRowNumber\nAddNewColumns2, CLNDR lookup(FLT_DT == TheDate,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCLNDR\nLookupCLNDR select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_ARRVL_ARPT_ID,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tDLAY_TYP,\n\t\tDURTN_MNT,\n\t\tDLAY_CD,\n\t\tDLAY_CD_NAME,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tACTL_DPTR_ARPT_ID,\n\t\tDEP_VAR,\n\t\tARRVL_VAR,\n\t\tSCHDD_BLK_DUR,\n\t\tACTL_BLK_DUR,\n\t\tACTL_FLGHT_DUR,\n\t\tDPRT_DELAY_DUR_D0_IND,\n\t\tDPRT_DELAY_DUR_D15_IND,\n\t\tARRVL_DELAY_DUR_A0_IND,\n\t\tARRVL_DELAY_DUR_A14_IND,\n\t\tBLK_DUR_B0_IND,\n\t\tSCHDD_FLT_DUR,\n\t\trow_num,\n\t\tCLNDR_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveCLNDRColumns\nRemoveCLNDRColumns, Flights exists(iif(FLT_NUM == FLGHT_NUM\n\t&& CLNDR_ID == toString(FLGHT_DT_ID)\n\t&& (SCHDD_ARRVL_AIR_PORT == SCHDD_ARRVL_ARPT_CD\n\t|| SCHDD_DPTR_AIR_PORT == SCHDD_DRPT_ARPT_CD),true(),false()),\n\tnegate:true,\n\tbroadcast: 'auto')~> DoesntExists\nSetRowNumber sink(input(\n\t\tFLGHT_ID as integer,\n\t\tFLGHT_DT_ID as integer,\n\t\tFLGHT_NUM as string,\n\t\tFLGHT_TYP as string,\n\t\tAIR_CRAFT_RGSTRN_NUM as string,\n\t\tAIR_CRAFT_TYP as string,\n\t\tSCHDD_DPRT_TS_UTC as timestamp,\n\t\tSCHDD_ARRVL_TS_UTC as timestamp,\n\t\tESTD_DPRT_TS_UTC as timestamp,\n\t\tESTD_ARRVL_TS_UTC as timestamp,\n\t\tACTL_OOOI_OUT_TS_UTC as timestamp,\n\t\tACTL_OOOI_OFF_TS_UTC as timestamp,\n\t\tACTL_OOOI_ON_TS_UTC as timestamp,\n\t\tACTL_OOOI_IN_TS_UTC as timestamp,\n\t\tBASE_ARPT_CD as string,\n\t\tBASE_ARPT_ID as integer,\n\t\tSCHDD_DRPT_ARPT_CD as string,\n\t\tSCHDD_DRPT_ARPT_ID as integer,\n\t\tSCHDD_ARRVL_ARPT_CD as string,\n\t\tSCHDD_ARRVL_ARPT_ID as integer,\n\t\tACTL_ARRVL_ARPT_CD as string,\n\t\tACTL_ARRVL_ARPT_ID as integer,\n\t\tACTL_DPTR_ARPT_CD as string,\n\t\tACTL_DPTR_ARPT_ID as integer,\n\t\tFUEL_IN as string,\n\t\tFUEL_OUT as integer,\n\t\tFUEL_UPLIFT as integer,\n\t\tCRGO_WT as integer,\n\t\tMAINT_LOG as integer,\n\t\tNOTES as string,\n\t\tIS_CNCLD as boolean,\n\t\tIS_VERFD as boolean,\n\t\tDEP_VAR as integer,\n\t\tARRVL_VAR as integer,\n\t\tSCHDD_BLK_DUR as integer,\n\t\tACTL_BLK_DUR as integer,\n\t\tACTL_FLGHT_DUR as integer,\n\t\tDPRT_DELAY_DUR_D0_IND as integer,\n\t\tDPRT_DELAY_DUR_D15_IND as integer,\n\t\tARRVL_DELAY_DUR_A0_IND as integer,\n\t\tARRVL_DELAY_DUR_A14_IND as integer,\n\t\tBLK_DUR_B0_IND as integer,\n\t\tSCHDD_FLT_DUR as string,\n\t\tDELAY_TYP as string,\n\t\tDELAY_DUR as integer,\n\t\tDELAY_CD as string,\n\t\tDELAY_DESC as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tFLGHT_ID,\n\t\tFLGHT_DT_ID = CLNDR_ID,\n\t\tFLGHT_NUM = FLT_NUM,\n\t\tFLGHT_TYP = FLT_TYPE,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYP = AIR_CRAFT_TYPE,\n\t\tSCHDD_DPRT_TS_UTC = SCHDD_DPTR,\n\t\tSCHDD_ARRVL_TS_UTC = SCHDD_ARRVL,\n\t\tESTD_DPRT_TS_UTC = ESTD_DPTR,\n\t\tESTD_ARRVL_TS_UTC = ESTD_ARRVL,\n\t\tACTL_OOOI_OUT_TS_UTC = ACTL_OOOI_OUT,\n\t\tACTL_OOOI_OFF_TS_UTC = ACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON_TS_UTC = ACTL_OOOI_ON,\n\t\tACTL_OOOI_IN_TS_UTC = ACTL_OOOI_IN,\n\t\tBASE_ARPT_CD = BASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tSCHDD_DRPT_ARPT_CD = SCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tSCHDD_ARRVL_ARPT_CD = SCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tACTL_ARRVL_ARPT_CD = ACTL_ARRVL_AIR_PORT,\n\t\tACTL_ARRVL_ARPT_ID,\n\t\tACTL_DPTR_ARPT_CD = ACTL_DPTR_AIR_PORT,\n\t\tACTL_DPTR_ARPT_ID,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tCRGO_WT = CRGO_WGT,\n\t\tMAINT_LOG = MAINT_LOG_PG,\n\t\tNOTES,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tDEP_VAR,\n\t\tARRVL_VAR,\n\t\tSCHDD_BLK_DUR,\n\t\tACTL_BLK_DUR,\n\t\tACTL_FLGHT_DUR,\n\t\tDPRT_DELAY_DUR_D0_IND,\n\t\tDPRT_DELAY_DUR_D15_IND,\n\t\tARRVL_DELAY_DUR_A0_IND,\n\t\tARRVL_DELAY_DUR_A14_IND,\n\t\tBLK_DUR_B0_IND,\n\t\tSCHDD_FLT_DUR,\n\t\tDELAY_TYP = DLAY_TYP,\n\t\tDELAY_DUR = DURTN_MNT,\n\t\tDELAY_CD = DLAY_CD,\n\t\tDELAY_DESC = DLAY_CD_NAME\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Write"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_s_flights')]",
				"[concat(variables('factoryId'), '/datasets/sql_d_aprt')]",
				"[concat(variables('factoryId'), '/datasets/sql_d_clndr')]",
				"[concat(variables('factoryId'), '/datasets/sql_f_flights_ops')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/f_flights_load_update')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Flights"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_s_flights",
								"type": "DatasetReference"
							},
							"name": "StagingFlights"
						},
						{
							"dataset": {
								"referenceName": "sql_d_aprt",
								"type": "DatasetReference"
							},
							"name": "ARPT"
						},
						{
							"dataset": {
								"referenceName": "sql_d_clndr",
								"type": "DatasetReference"
							},
							"name": "CLNDR"
						},
						{
							"dataset": {
								"referenceName": "sql_f_flights_ops",
								"type": "DatasetReference"
							},
							"name": "Flights"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_f_flights_ops",
								"type": "DatasetReference"
							},
							"name": "Update"
						}
					],
					"transformations": [
						{
							"name": "FilterFlightType"
						},
						{
							"name": "LookupIATA"
						},
						{
							"name": "FilterActvInd"
						},
						{
							"name": "RemoveColumns1"
						},
						{
							"name": "LookupICAO"
						},
						{
							"name": "AddBaseAirportID"
						},
						{
							"name": "RemoveIATAICAO"
						},
						{
							"name": "LookupIATA2"
						},
						{
							"name": "RemoveColumns2"
						},
						{
							"name": "LookupICAO2"
						},
						{
							"name": "AddSchdDptrID"
						},
						{
							"name": "RemoveIATAICAO2"
						},
						{
							"name": "LookupIATA3"
						},
						{
							"name": "RemoveColumns3"
						},
						{
							"name": "LookupICAO3"
						},
						{
							"name": "AddSchdArrID"
						},
						{
							"name": "RemoveIATAICAO3"
						},
						{
							"name": "LookupIATA4"
						},
						{
							"name": "RemoveColumns4"
						},
						{
							"name": "LookupICAO4"
						},
						{
							"name": "AddActArrID"
						},
						{
							"name": "RemoveIATAICAO4"
						},
						{
							"name": "AddNewColumns"
						},
						{
							"name": "AddNewColumns2"
						},
						{
							"name": "LookupIATA5"
						},
						{
							"name": "RemoveColumns5"
						},
						{
							"name": "LookupICAO5"
						},
						{
							"name": "AddActlDptrID"
						},
						{
							"name": "RemoveIATAICAO5"
						},
						{
							"name": "LookupCLNDR"
						},
						{
							"name": "RemoveCLNDRColumns"
						},
						{
							"name": "Exists"
						},
						{
							"name": "AlterRowUpdate"
						}
					],
					"script": "parameters{\n\tdate as string ('1899-01-01')\n}\nsource(output(\n\t\tACTL_ARRVL_AIR_PORT as string,\n\t\tACTL_DPTR_AIR_PORT as string,\n\t\tACTL_OOOI_IN as timestamp,\n\t\tACTL_OOOI_OFF as timestamp,\n\t\tACTL_OOOI_ON as timestamp,\n\t\tACTL_OOOI_OUT as timestamp,\n\t\tAIR_CRAFT_RGSTRN_NUM as string,\n\t\tAIR_CRAFT_TYPE as string,\n\t\tBASE_AIR_PORT as string,\n\t\tCRGO_WGT as integer,\n\t\tESTD_ARRVL as timestamp,\n\t\tESTD_DPTR as timestamp,\n\t\tFLT_DT as date,\n\t\tFLT_ID as long,\n\t\tFLT_NUM as string,\n\t\tFLT_TYPE as string,\n\t\tFUEL_IN as double,\n\t\tFUEL_OUT as double,\n\t\tFUEL_UPLIFT as integer,\n\t\tIS_CNCLD as boolean,\n\t\tIS_VERFD as boolean,\n\t\tMAINT_LOG_PG as string,\n\t\tNOTES as string,\n\t\tSCHDD_ARRVL as timestamp,\n\t\tSCHDD_ARRVL_AIR_PORT as string,\n\t\tSCHDD_DPTR as timestamp,\n\t\tSCHDD_DPTR_AIR_PORT as string,\n\t\tUPDTD_AT as timestamp,\n\t\tDLAY_TYP as string,\n\t\tDURTN_MNT as integer,\n\t\tDLAY_CD as string,\n\t\tDLAY_CD_NAME as string,\n\t\tADF_TIME_STMP as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT * FROM [dbo].[S_FLIGHTS] where  UPDTD_AT > '\"+$date+\"'\"),\n\tformat: 'query') ~> StagingFlights\nsource(output(\n\t\tARPT_ID as integer,\n\t\tARPT_IATA_CD as string,\n\t\tARPT_ICAO_CD as string,\n\t\tARPT_NAME as string,\n\t\tARPT_CNTRY as string,\n\t\tARPT_CITY as string,\n\t\tARPT_LAT as decimal(8,6),\n\t\tARPT_LONG as decimal(9,6),\n\t\tARPT_ALTD as decimal(6,2),\n\t\tARPT_UTC_OFSET as decimal(2,2),\n\t\tARPT_DST_CD as string,\n\t\tARPT_TZONE as string,\n\t\tEFF_STRT_DT as timestamp,\n\t\tEFF_END_DT as timestamp,\n\t\tACTV_IND as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ARPT\nsource(output(\n\t\tCLNDR_ID as string,\n\t\tTheDate as date,\n\t\tTheDay as integer,\n\t\tTheDaySuffix as string,\n\t\tTheDayName as string,\n\t\tTheDayOfWeek as integer,\n\t\tTheDayOfWeekInMonth as integer,\n\t\tTheDayOfYear as integer,\n\t\tIsWeekend as integer,\n\t\tTheWeek as integer,\n\t\tTheISOweek as integer,\n\t\tTheFirstOfWeek as date,\n\t\tTheLastOfWeek as date,\n\t\tTheWeekOfMonth as integer,\n\t\tTheMonth as integer,\n\t\tTheMonthName as string,\n\t\tTheFirstOfMonth as date,\n\t\tTheLastOfMonth as date,\n\t\tTheFirstOfNextMonth as date,\n\t\tTheLastOfNextMonth as date,\n\t\tTheQuarter as integer,\n\t\tTheFirstOfQuarter as date,\n\t\tTheLastOfQuarter as date,\n\t\tTheYear as integer,\n\t\tTheISOYear as integer,\n\t\tTheFirstOfYear as date,\n\t\tTheLastOfYear as date,\n\t\tIsLeapYear as boolean,\n\t\tHas53Weeks as integer,\n\t\tHas53ISOWeeks as integer,\n\t\tMMYYYY as string,\n\t\tStyle101 as string,\n\t\tStyle103 as string,\n\t\tStyle112 as string,\n\t\tStyle120 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CLNDR\nsource(output(\n\t\tFLGHT_ID as integer,\n\t\tFLGHT_DT_ID as integer,\n\t\tFLGHT_NUM as string,\n\t\tFLGHT_TYP as string,\n\t\tAIR_CRAFT_RGSTRN_NUM as string,\n\t\tAIR_CRAFT_TYP as string,\n\t\tSCHDD_DPRT_TS_UTC as timestamp,\n\t\tSCHDD_ARRVL_TS_UTC as timestamp,\n\t\tESTD_DPRT_TS_UTC as timestamp,\n\t\tESTD_ARRVL_TS_UTC as timestamp,\n\t\tACTL_OOOI_OUT_TS_UTC as timestamp,\n\t\tACTL_OOOI_OFF_TS_UTC as timestamp,\n\t\tACTL_OOOI_ON_TS_UTC as timestamp,\n\t\tACTL_OOOI_IN_TS_UTC as timestamp,\n\t\tBASE_ARPT_CD as string,\n\t\tBASE_ARPT_ID as integer,\n\t\tSCHDD_DRPT_ARPT_CD as string,\n\t\tSCHDD_DRPT_ARPT_ID as integer,\n\t\tSCHDD_ARRVL_ARPT_CD as string,\n\t\tSCHDD_ARRVL_ARPT_ID as integer,\n\t\tACTL_ARRVL_ARPT_CD as string,\n\t\tACTL_ARRVL_ARPT_ID as integer,\n\t\tACTL_DPTR_ARPT_CD as string,\n\t\tACTL_DPTR_ARPT_ID as integer,\n\t\tFUEL_IN as string,\n\t\tFUEL_OUT as integer,\n\t\tFUEL_UPLIFT as integer,\n\t\tCRGO_WT as integer,\n\t\tMAINT_LOG as integer,\n\t\tNOTES as string,\n\t\tIS_CNCLD as boolean,\n\t\tIS_VERFD as boolean,\n\t\tDEP_VAR as integer,\n\t\tARRVL_VAR as integer,\n\t\tSCHDD_BLK_DUR as integer,\n\t\tACTL_BLK_DUR as integer,\n\t\tACTL_FLGHT_DUR as integer,\n\t\tDPRT_DELAY_DUR_D0_IND as integer,\n\t\tDPRT_DELAY_DUR_D15_IND as integer,\n\t\tARRVL_DELAY_DUR_A0_IND as integer,\n\t\tARRVL_DELAY_DUR_A14_IND as integer,\n\t\tBLK_DUR_B0_IND as integer,\n\t\tSCHDD_FLT_DUR as string,\n\t\tDELAY_TYP as string,\n\t\tDELAY_DUR as integer,\n\t\tDELAY_CD as string,\n\t\tDELAY_DESC as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Flights\nStagingFlights filter(FLT_TYPE <=>'flight') ~> FilterFlightType\nFilterFlightType, FilterActvInd lookup(BASE_AIR_PORT == ARPT_IATA_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIATA\nARPT filter(ACTV_IND == 'Y') ~> FilterActvInd\nLookupIATA select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tUPDTD_AT,\n\t\tDLAY_TYP,\n\t\tDURTN_MNT,\n\t\tDLAY_CD,\n\t\tDLAY_CD_NAME,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tIATA_ARPT_ID = ARPT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns1\nRemoveColumns1, FilterActvInd lookup(BASE_AIR_PORT == ARPT_ICAO_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupICAO\nLookupICAO derive(BASE_ARPT_ID = iif(isNull(IATA_ARPT_ID), ARPT_ID, IATA_ARPT_ID)) ~> AddBaseAirportID\nAddBaseAirportID select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tUPDTD_AT,\n\t\tDLAY_TYP,\n\t\tDURTN_MNT,\n\t\tDLAY_CD,\n\t\tDLAY_CD_NAME,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveIATAICAO\nRemoveIATAICAO, FilterActvInd lookup(SCHDD_DPTR_AIR_PORT == ARPT_IATA_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIATA2\nLookupIATA2 select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tUPDTD_AT,\n\t\tDLAY_TYP,\n\t\tDURTN_MNT,\n\t\tDLAY_CD,\n\t\tDLAY_CD_NAME,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tIATA_ARPT_ID = ARPT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns2\nRemoveColumns2, FilterActvInd lookup(ACTL_DPTR_AIR_PORT == ARPT_ICAO_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupICAO2\nLookupICAO2 derive(SCHDD_DRPT_ARPT_ID = iif(isNull(IATA_ARPT_ID), ARPT_ID, IATA_ARPT_ID)) ~> AddSchdDptrID\nAddSchdDptrID select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tDLAY_TYP,\n\t\tDURTN_MNT,\n\t\tDLAY_CD,\n\t\tDLAY_CD_NAME,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveIATAICAO2\nRemoveIATAICAO2, FilterActvInd lookup(ACTL_ARRVL_AIR_PORT == ARPT_IATA_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIATA3\nLookupIATA3 select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tDLAY_TYP,\n\t\tDURTN_MNT,\n\t\tDLAY_CD,\n\t\tDLAY_CD_NAME,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tIATA_ARPT_ID = ARPT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns3\nRemoveColumns3, FilterActvInd lookup(ACTL_ARRVL_AIR_PORT == ARPT_ICAO_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupICAO3\nLookupICAO3 derive(SCHDD_ARRVL_ARPT_ID = iif(isNull(IATA_ARPT_ID), ARPT_ID, IATA_ARPT_ID)) ~> AddSchdArrID\nAddSchdArrID select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tDLAY_TYP,\n\t\tDURTN_MNT,\n\t\tDLAY_CD,\n\t\tDLAY_CD_NAME,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveIATAICAO3\nRemoveIATAICAO3, FilterActvInd lookup(ACTL_ARRVL_AIR_PORT == ARPT_IATA_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIATA4\nLookupIATA4 select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tDLAY_TYP,\n\t\tDURTN_MNT,\n\t\tDLAY_CD,\n\t\tDLAY_CD_NAME,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tIATA_ARPT_ID = ARPT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns4\nRemoveColumns4, FilterActvInd lookup(ACTL_ARRVL_AIR_PORT == ARPT_ICAO_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupICAO4\nLookupICAO4 derive(ACTL_ARRVL_ARPT_ID = iif(isNull(IATA_ARPT_ID), ARPT_ID, IATA_ARPT_ID)) ~> AddActArrID\nAddActArrID select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_ARRVL_ARPT_ID,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tDLAY_TYP,\n\t\tDURTN_MNT,\n\t\tDLAY_CD,\n\t\tDLAY_CD_NAME,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveIATAICAO4\nRemoveIATAICAO5 derive(DEP_VAR = ACTL_OOOI_OUT - SCHDD_DPTR,\n\t\tARRVL_VAR = ACTL_OOOI_IN - SCHDD_ARRVL,\n\t\tSCHDD_BLK_DUR = SCHDD_DPTR - SCHDD_ARRVL,\n\t\tACTL_BLK_DUR = ACTL_OOOI_OUT - ACTL_OOOI_IN,\n\t\tACTL_FLGHT_DUR = ACTL_OOOI_OUT - ACTL_OOOI_IN) ~> AddNewColumns\nAddNewColumns derive(DPRT_DELAY_DUR_D0_IND = iif(DEP_VAR>0||isNull(ACTL_OOOI_OUT), 0, 1),\n\t\tDPRT_DELAY_DUR_D15_IND = iif(DEP_VAR>15||isNull(ACTL_OOOI_OUT), 0, 1),\n\t\tARRVL_DELAY_DUR_A0_IND = iif(ARRVL_VAR>0||isNull(ACTL_OOOI_IN), 0, 1),\n\t\tARRVL_DELAY_DUR_A14_IND = iif(ARRVL_VAR>14||isNull(ACTL_OOOI_IN), 0, 1),\n\t\tBLK_DUR_B0_IND = iif(ACTL_BLK_DUR>0||isNull(ACTL_OOOI_IN), 0, 1),\n\t\tSCHDD_FLT_DUR = '') ~> AddNewColumns2\nRemoveIATAICAO4, FilterActvInd lookup(ACTL_DPTR_AIR_PORT == ARPT_IATA_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIATA5\nLookupIATA5 select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_ARRVL_ARPT_ID,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tDLAY_TYP,\n\t\tDURTN_MNT,\n\t\tDLAY_CD,\n\t\tDLAY_CD_NAME,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tIATA_ARPT_ID = ARPT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns5\nRemoveColumns5, FilterActvInd lookup(ACTL_DPTR_AIR_PORT == ARPT_ICAO_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupICAO5\nLookupICAO5 derive(ACTL_DPTR_ARPT_ID = iif(isNull(IATA_ARPT_ID), ARPT_ID, IATA_ARPT_ID)) ~> AddActlDptrID\nAddActlDptrID select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_ARRVL_ARPT_ID,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tDLAY_TYP,\n\t\tDURTN_MNT,\n\t\tDLAY_CD,\n\t\tDLAY_CD_NAME,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tACTL_DPTR_ARPT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveIATAICAO5\nAddNewColumns2, CLNDR lookup(FLT_DT == TheDate,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCLNDR\nLookupCLNDR select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_ARRVL_ARPT_ID,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tDLAY_TYP,\n\t\tDURTN_MNT,\n\t\tDLAY_CD,\n\t\tDLAY_CD_NAME,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tACTL_DPTR_ARPT_ID,\n\t\tDEP_VAR,\n\t\tARRVL_VAR,\n\t\tSCHDD_BLK_DUR,\n\t\tACTL_BLK_DUR,\n\t\tACTL_FLGHT_DUR,\n\t\tDPRT_DELAY_DUR_D0_IND,\n\t\tDPRT_DELAY_DUR_D15_IND,\n\t\tARRVL_DELAY_DUR_A0_IND,\n\t\tARRVL_DELAY_DUR_A14_IND,\n\t\tBLK_DUR_B0_IND,\n\t\tSCHDD_FLT_DUR,\n\t\tCLNDR_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveCLNDRColumns\nRemoveCLNDRColumns, Flights exists(iif(FLT_NUM == FLGHT_NUM\n\t&& CLNDR_ID == toString(FLGHT_DT_ID)\n\t&& (SCHDD_ARRVL_AIR_PORT == SCHDD_ARRVL_ARPT_CD\n\t|| SCHDD_DPTR_AIR_PORT == SCHDD_DRPT_ARPT_CD),true(),false()),\n\tnegate:false,\n\tbroadcast: 'auto')~> Exists\nExists alterRow(updateIf(true())) ~> AlterRowUpdate\nAlterRowUpdate sink(input(\n\t\tFLGHT_ID as integer,\n\t\tFLGHT_DT_ID as integer,\n\t\tFLGHT_NUM as string,\n\t\tFLGHT_TYP as string,\n\t\tAIR_CRAFT_RGSTRN_NUM as string,\n\t\tAIR_CRAFT_TYP as string,\n\t\tSCHDD_DPRT_TS_UTC as timestamp,\n\t\tSCHDD_ARRVL_TS_UTC as timestamp,\n\t\tESTD_DPRT_TS_UTC as timestamp,\n\t\tESTD_ARRVL_TS_UTC as timestamp,\n\t\tACTL_OOOI_OUT_TS_UTC as timestamp,\n\t\tACTL_OOOI_OFF_TS_UTC as timestamp,\n\t\tACTL_OOOI_ON_TS_UTC as timestamp,\n\t\tACTL_OOOI_IN_TS_UTC as timestamp,\n\t\tBASE_ARPT_CD as string,\n\t\tBASE_ARPT_ID as integer,\n\t\tSCHDD_DRPT_ARPT_CD as string,\n\t\tSCHDD_DRPT_ARPT_ID as integer,\n\t\tSCHDD_ARRVL_ARPT_CD as string,\n\t\tSCHDD_ARRVL_ARPT_ID as integer,\n\t\tACTL_ARRVL_ARPT_CD as string,\n\t\tACTL_ARRVL_ARPT_ID as integer,\n\t\tACTL_DPTR_ARPT_CD as string,\n\t\tACTL_DPTR_ARPT_ID as integer,\n\t\tFUEL_IN as string,\n\t\tFUEL_OUT as integer,\n\t\tFUEL_UPLIFT as integer,\n\t\tCRGO_WT as integer,\n\t\tMAINT_LOG as integer,\n\t\tNOTES as string,\n\t\tIS_CNCLD as boolean,\n\t\tIS_VERFD as boolean,\n\t\tDEP_VAR as integer,\n\t\tARRVL_VAR as integer,\n\t\tSCHDD_BLK_DUR as integer,\n\t\tACTL_BLK_DUR as integer,\n\t\tACTL_FLGHT_DUR as integer,\n\t\tDPRT_DELAY_DUR_D0_IND as integer,\n\t\tDPRT_DELAY_DUR_D15_IND as integer,\n\t\tARRVL_DELAY_DUR_A0_IND as integer,\n\t\tARRVL_DELAY_DUR_A14_IND as integer,\n\t\tBLK_DUR_B0_IND as integer,\n\t\tSCHDD_FLT_DUR as string,\n\t\tDELAY_TYP as string,\n\t\tDELAY_DUR as integer,\n\t\tDELAY_CD as string,\n\t\tDELAY_DESC as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['FLGHT_NUM','FLGHT_DT_ID'],\n\tformat: 'table',\n\tmapColumn(\n\t\tFLGHT_DT_ID = CLNDR_ID,\n\t\tFLGHT_NUM = FLT_NUM,\n\t\tFLGHT_TYP = FLT_TYPE,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYP = AIR_CRAFT_TYPE,\n\t\tSCHDD_DPRT_TS_UTC = SCHDD_DPTR,\n\t\tSCHDD_ARRVL_TS_UTC = SCHDD_ARRVL,\n\t\tESTD_DPRT_TS_UTC = ESTD_DPTR,\n\t\tESTD_ARRVL_TS_UTC = ESTD_ARRVL,\n\t\tACTL_OOOI_OUT_TS_UTC = ACTL_OOOI_OUT,\n\t\tACTL_OOOI_OFF_TS_UTC = ACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON_TS_UTC = ACTL_OOOI_ON,\n\t\tACTL_OOOI_IN_TS_UTC = ACTL_OOOI_IN,\n\t\tBASE_ARPT_CD = BASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tSCHDD_DRPT_ARPT_CD = SCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tSCHDD_ARRVL_ARPT_CD = SCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tACTL_ARRVL_ARPT_CD = ACTL_ARRVL_AIR_PORT,\n\t\tACTL_ARRVL_ARPT_ID,\n\t\tACTL_DPTR_ARPT_CD = ACTL_DPTR_AIR_PORT,\n\t\tACTL_DPTR_ARPT_ID,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tCRGO_WT = CRGO_WGT,\n\t\tMAINT_LOG = MAINT_LOG_PG,\n\t\tNOTES,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tDEP_VAR,\n\t\tARRVL_VAR,\n\t\tSCHDD_BLK_DUR,\n\t\tACTL_BLK_DUR,\n\t\tACTL_FLGHT_DUR,\n\t\tDPRT_DELAY_DUR_D0_IND,\n\t\tDPRT_DELAY_DUR_D15_IND,\n\t\tARRVL_DELAY_DUR_A0_IND,\n\t\tARRVL_DELAY_DUR_A14_IND,\n\t\tBLK_DUR_B0_IND,\n\t\tSCHDD_FLT_DUR,\n\t\tDELAY_TYP = DLAY_TYP,\n\t\tDELAY_DUR = DURTN_MNT,\n\t\tDELAY_CD = DLAY_CD,\n\t\tDELAY_DESC = DLAY_CD_NAME\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Update"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_s_flights')]",
				"[concat(variables('factoryId'), '/datasets/sql_d_aprt')]",
				"[concat(variables('factoryId'), '/datasets/sql_d_clndr')]",
				"[concat(variables('factoryId'), '/datasets/sql_f_flights_ops')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/s_arpt_load')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Airport"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "eal_arpt_az_blob",
								"type": "DatasetReference"
							},
							"name": "ArptBlob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_s_airports",
								"type": "DatasetReference"
							},
							"name": "StgAirports"
						}
					],
					"transformations": [
						{
							"name": "AddADFColumns"
						},
						{
							"name": "FilterByDate"
						}
					],
					"script": "parameters{\n\trun_id as string (''),\n\tdate as string ('1899-01-01 00:00:00.000')\n}\nsource(output(\n\t\tARPT_NAME as string,\n\t\tARPT_CITY as string,\n\t\tARPT_CNTRY as string,\n\t\tARPT_IATA_CD as string,\n\t\tARPT_ICAO_CD as string,\n\t\tARPT_LAT as double,\n\t\tARPT_LONG as double,\n\t\tARPT_ALTD as string,\n\t\tARPT_UTC_OFSET as double,\n\t\tARPT_DST as string,\n\t\tARPT_TZONE as string,\n\t\tLAST_UPDT_DT as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> ArptBlob\nFilterByDate derive(ADF_RUN_ID = $run_id,\n\t\tADF_TIME_STMP = currentTimestamp()) ~> AddADFColumns\nArptBlob filter(toDate(LAST_UPDT_DT)  > toDate($date) && toDate(LAST_UPDT_DT) < currentDate()) ~> FilterByDate\nAddADFColumns sink(input(\n\t\tARPT_NAME as string,\n\t\tARPT_CITY as string,\n\t\tARPT_CNTRY as string,\n\t\tARPT_IATA_CD as string,\n\t\tARPT_ICAO_CD as string,\n\t\tARPT_LAT as double,\n\t\tARPT_LONG as double,\n\t\tARPT_ALTD as integer,\n\t\tARPT_UTC_OFSET as double,\n\t\tARPT_DST as string,\n\t\tARPT_TZONE as string,\n\t\tLAST_UPDT_DT as date,\n\t\tADF_RUN_ID as string,\n\t\tADF_TIME_STMP as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tARPT_NAME,\n\t\tARPT_CITY,\n\t\tARPT_CNTRY,\n\t\tARPT_IATA_CD,\n\t\tARPT_ICAO_CD,\n\t\tARPT_LAT,\n\t\tARPT_LONG,\n\t\tARPT_ALTD,\n\t\tARPT_UTC_OFSET,\n\t\tARPT_DST,\n\t\tARPT_TZONE,\n\t\tLAST_UPDT_DT,\n\t\tADF_RUN_ID,\n\t\tADF_TIME_STMP\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> StgAirports"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/eal_arpt_az_blob')]",
				"[concat(variables('factoryId'), '/datasets/sql_s_airports')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/s_equip_schd_load')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Equip Schd"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "eal_az_equipment_schd",
								"type": "DatasetReference"
							},
							"name": "StgEquipSchd"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_eqip_schd_rej",
								"type": "DatasetReference"
							},
							"name": "EquipReject"
						},
						{
							"dataset": {
								"referenceName": "sql_s_eqip_schd",
								"type": "DatasetReference"
							},
							"name": "EquipStg"
						}
					],
					"transformations": [
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "AddADFColumns"
						},
						{
							"name": "AddADFColumns2"
						},
						{
							"name": "FilterByDate"
						}
					],
					"script": "parameters{\n\trun_id as string (''),\n\tdate as string ('1899-01-01')\n}\nsource(output(\n\t\teqp_sched_id as string,\n\t\tac_registration as string,\n\t\tstatus_code as string,\n\t\tstatus_name as string,\n\t\tstatus_description as string,\n\t\tstart_time as string,\n\t\tend_time as string,\n\t\tnotes as string,\n\t\tis_deleted as boolean,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> StgEquipSchd\nFilterByDate split(isNull(ac_registration) || iif(isNull(end_time), false(), iif(isNull(start_time), false(), start_time>end_time)),\n\tdisjoint: false) ~> ConditionalSplit1@(Reject, FilteredData)\nConditionalSplit1@Reject derive(REJECT_REASON = \"Data Validation Error\",\n\t\tADF_TIME_STMP = currentTimestamp(),\n\t\tADF_RUN_ID = $run_id) ~> AddADFColumns\nConditionalSplit1@FilteredData derive(ADF_TIME_STMP = currentTimestamp(),\n\t\tADF_RUN_ID = $run_id) ~> AddADFColumns2\nStgEquipSchd filter(toDate(updated_at)  > toDate($date) && toDate(updated_at) < currentDate()) ~> FilterByDate\nAddADFColumns sink(input(\n\t\tEQP_SCHED_ID as integer,\n\t\tAC_RGSTRN as string,\n\t\tSTS_CD as string,\n\t\tSTS_NAME as string,\n\t\tSTS_DESC as string,\n\t\tSTRT_TIME as timestamp,\n\t\tEND_TIME as timestamp,\n\t\tNOTE as string,\n\t\tIS_DELD as boolean,\n\t\tUPDTD_AT as timestamp,\n\t\tREJECT_REASON as string,\n\t\tADF_TIME_STMP as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tEQP_SCHED_ID = eqp_sched_id,\n\t\tAC_RGSTRN = ac_registration,\n\t\tSTS_CD = status_code,\n\t\tSTS_NAME = status_name,\n\t\tSTS_DESC = status_description,\n\t\tSTRT_TIME = start_time,\n\t\tEND_TIME = end_time,\n\t\tNOTE = notes,\n\t\tIS_DELD = is_deleted,\n\t\tUPDTD_AT = updated_at,\n\t\tREJECT_REASON,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> EquipReject\nAddADFColumns2 sink(input(\n\t\tEQP_SCHED_ID as integer,\n\t\tAC_RGSTRN as string,\n\t\tSTS_CD as string,\n\t\tSTS_NAME as string,\n\t\tSTS_DESC as string,\n\t\tSTRT_TIME as string,\n\t\tEND_TIME as string,\n\t\tNOTE as string,\n\t\tIS_DELD as boolean,\n\t\tUPDTD_AT as string,\n\t\tADF_TIME_STMP as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tEQP_SCHED_ID = eqp_sched_id,\n\t\tAC_RGSTRN = ac_registration,\n\t\tSTS_CD = status_code,\n\t\tSTS_NAME = status_name,\n\t\tSTS_DESC = status_description,\n\t\tSTRT_TIME = start_time,\n\t\tEND_TIME = end_time,\n\t\tNOTE = notes,\n\t\tIS_DELD = is_deleted,\n\t\tUPDTD_AT = updated_at,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> EquipStg"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/eal_az_equipment_schd')]",
				"[concat(variables('factoryId'), '/datasets/sql_eqip_schd_rej')]",
				"[concat(variables('factoryId'), '/datasets/sql_s_eqip_schd')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/s_flights_load')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Flights"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "eal_az_flights",
								"type": "DatasetReference"
							},
							"name": "StgFlights"
						},
						{
							"dataset": {
								"referenceName": "eal_ac_bdavis_Airports",
								"type": "DatasetReference"
							},
							"name": "BdavisAirport"
						},
						{
							"dataset": {
								"referenceName": "eal_az_flights_delay",
								"type": "DatasetReference"
							},
							"name": "FlightsDelay"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_flights_rej",
								"type": "DatasetReference"
							},
							"name": "Reject"
						},
						{
							"dataset": {
								"referenceName": "sql_s_flights",
								"type": "DatasetReference"
							},
							"name": "StagingFlights"
						}
					],
					"transformations": [
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "IATAAirportExists"
						},
						{
							"name": "IATAAirportDoesntExists1"
						},
						{
							"name": "ICAOAirportExists"
						},
						{
							"name": "ExsistUnion"
						},
						{
							"name": "ICAOAirportdoesntExists"
						},
						{
							"name": "RejectUnion1"
						},
						{
							"name": "NullRejectReason"
						},
						{
							"name": "AddRejectReason2"
						},
						{
							"name": "ConditionalSplit2"
						},
						{
							"name": "FilterUnion1"
						},
						{
							"name": "ConditionalSplit3"
						},
						{
							"name": "IATAAirportDoesntExists2"
						},
						{
							"name": "ICAOAirportExists2"
						},
						{
							"name": "ICAOAirportdoesntExists2"
						},
						{
							"name": "AddRejectReason3"
						},
						{
							"name": "RejectUnion2"
						},
						{
							"name": "FilterUnion2"
						},
						{
							"name": "ConditionalSplit4"
						},
						{
							"name": "IATAAirportExists3"
						},
						{
							"name": "IATAAirportDoesntExists3"
						},
						{
							"name": "IATAAirportExists2"
						},
						{
							"name": "ICAOAirportExists3"
						},
						{
							"name": "ICAOAirportdoesntExists3"
						},
						{
							"name": "FilterUnion3"
						},
						{
							"name": "AddRejectReason4"
						},
						{
							"name": "ExistUnion2"
						},
						{
							"name": "ExistUnion3"
						},
						{
							"name": "RejectUnion3"
						},
						{
							"name": "SchdArrvlAirportNull"
						},
						{
							"name": "IATAAirportDoesntExists4"
						},
						{
							"name": "ICAOAirportExists4"
						},
						{
							"name": "ICAOAirportDoesntExists4"
						},
						{
							"name": "IATAAirportExists4"
						},
						{
							"name": "ExistUnion4"
						},
						{
							"name": "FilterUnion4"
						},
						{
							"name": "AddRejectReason5"
						},
						{
							"name": "SchdDptrAirportNull"
						},
						{
							"name": "IATAAirportDoesntExists5"
						},
						{
							"name": "ICAOAirportExists5"
						},
						{
							"name": "ICAOAirportDoesntExists5"
						},
						{
							"name": "IATAAirportExists5"
						},
						{
							"name": "ExistUnion5"
						},
						{
							"name": "FilterUnion5"
						},
						{
							"name": "AddRejectReason6"
						},
						{
							"name": "RejectUnion4"
						},
						{
							"name": "RejectUnion5"
						},
						{
							"name": "AddADFColumns"
						},
						{
							"name": "AddADFColumns2"
						},
						{
							"name": "FlightsJoinFlightsDelay"
						},
						{
							"name": "TypeConvertion"
						},
						{
							"name": "RemoveDuplicates"
						},
						{
							"name": "FilterRows"
						},
						{
							"name": "ConditionalSplit5"
						},
						{
							"name": "OOOIRejectReason"
						},
						{
							"name": "ConditionalSplit6"
						},
						{
							"name": "EstSchdRejectReason"
						},
						{
							"name": "UnionNullRejection"
						},
						{
							"name": "UnionOOOIRejection"
						}
					],
					"script": "parameters{\n\trun_id as string (''),\n\tdate as string ('')\n}\nsource(output(\n\t\tflight_id as string,\n\t\tflight_number as string,\n\t\tflight_date as string,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tscheduled_departure as string,\n\t\tscheduled_arrival as string,\n\t\testimated_departure as string,\n\t\testimated_arrival as string,\n\t\tactual_oooi_out as string,\n\t\tactual_oooi_off as string,\n\t\tactual_oooi_on as string,\n\t\tactual_oooi_in as string,\n\t\tbase_airport as string,\n\t\tscheduled_departure_airport as string,\n\t\tscheduled_arrival_airport as string,\n\t\tactual_departure_airport as string,\n\t\tactual_arrival_airport as string,\n\t\tis_verified as boolean,\n\t\tnotes as string,\n\t\tis_canceled as boolean,\n\t\tflight_type as string,\n\t\tcargo_weight as string,\n\t\tfuel_out as string,\n\t\tfuel_in as string,\n\t\tfuel_uplift as string,\n\t\tmaint_log_page as string,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> StgFlights\nsource(output(\n\t\tAirport_Name as string,\n\t\tCity as string,\n\t\tCountry as string,\n\t\tIATA as string,\n\t\tICAO as string,\n\t\tLatitude as double,\n\t\tLongitude as double,\n\t\tAltitude as integer,\n\t\tUTC_offset as double,\n\t\tDST as string,\n\t\tTime_Zone as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> BdavisAirport\nsource(output(\n\t\tflight_id as string,\n\t\tdelay_type as string,\n\t\tduration_mins as string,\n\t\tdelay_code as string,\n\t\tdelay_code_name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> FlightsDelay\nFilterRows split(isNull(flight_date) || isNull(flight_id) || isNull(flight_number) || isNull(flight_type) || isNull(SCHDD_DPTR) || isNull(UPDTD_AT),\n\tdisjoint: false) ~> ConditionalSplit1@(NullReject, NullAcpt)\nConditionalSplit2@ActlArrvlAirportNotNull, BdavisAirport exists(actual_arrival_airport == IATA,\n\tnegate:false,\n\tbroadcast: 'auto')~> IATAAirportExists\nConditionalSplit2@ActlArrvlAirportNotNull, BdavisAirport exists(actual_arrival_airport == IATA,\n\tnegate:true,\n\tbroadcast: 'auto')~> IATAAirportDoesntExists1\nIATAAirportDoesntExists1, BdavisAirport exists(toString(actual_arrival_airport)  == ICAO,\n\tnegate:false,\n\tbroadcast: 'auto')~> ICAOAirportExists\nIATAAirportExists, ICAOAirportExists union(byName: true)~> ExsistUnion\nIATAAirportDoesntExists1, BdavisAirport exists(actual_arrival_airport == ICAO,\n\tnegate:true,\n\tbroadcast: 'auto')~> ICAOAirportdoesntExists\nAddRejectReason2, UnionOOOIRejection union(byName: true)~> RejectUnion1\nConditionalSplit1@NullReject derive(Reject_Reason = \"Null Error\") ~> NullRejectReason\nICAOAirportdoesntExists derive(Reject_Reason = \"Invalid ACTL_ARRVL Airport Name\") ~> AddRejectReason2\nConditionalSplit6@EstSchdAcpt split(isNull(actual_arrival_airport),\n\tdisjoint: false) ~> ConditionalSplit2@(ActlArrvlAirportNull, ActlArrvlAirportNotNull)\nExsistUnion, ConditionalSplit2@ActlArrvlAirportNull union(byName: true)~> FilterUnion1\nFilterUnion1 split(isNull(actual_departure_airport),\n\tdisjoint: false) ~> ConditionalSplit3@(ActlDptrAirportNull, ActlDptrAirportNotNull)\nConditionalSplit3@ActlDptrAirportNotNull, BdavisAirport exists(actual_departure_airport == IATA,\n\tnegate:true,\n\tbroadcast: 'auto')~> IATAAirportDoesntExists2\nIATAAirportDoesntExists2, BdavisAirport exists(actual_departure_airport == ICAO,\n\tnegate:false,\n\tbroadcast: 'auto')~> ICAOAirportExists2\nIATAAirportDoesntExists2, BdavisAirport exists(actual_departure_airport == ICAO,\n\tnegate:true,\n\tbroadcast: 'auto')~> ICAOAirportdoesntExists2\nICAOAirportdoesntExists2 derive(Reject_Reason = \"Actl Dptr Airport Name not found\") ~> AddRejectReason3\nRejectUnion1, AddRejectReason3 union(byName: true)~> RejectUnion2\nExistUnion2, ConditionalSplit3@ActlDptrAirportNull union(byName: true)~> FilterUnion2\nFilterUnion2 split(isNull(base_airport),\n\tdisjoint: false) ~> ConditionalSplit4@(BaseAirportNull, BaseAirportNotNull)\nConditionalSplit4@BaseAirportNotNull, BdavisAirport exists(base_airport == IATA,\n\tnegate:false,\n\tbroadcast: 'auto')~> IATAAirportExists3\nConditionalSplit4@BaseAirportNotNull, BdavisAirport exists(base_airport == IATA,\n\tnegate:true,\n\tbroadcast: 'auto')~> IATAAirportDoesntExists3\nConditionalSplit3@ActlDptrAirportNotNull, BdavisAirport exists(actual_departure_airport == IATA,\n\tnegate:false,\n\tbroadcast: 'auto')~> IATAAirportExists2\nIATAAirportDoesntExists3, BdavisAirport exists(base_airport == ICAO,\n\tnegate:false,\n\tbroadcast: 'auto')~> ICAOAirportExists3\nIATAAirportDoesntExists3, BdavisAirport exists(base_airport == ICAO,\n\tnegate:true,\n\tbroadcast: 'auto')~> ICAOAirportdoesntExists3\nExistUnion3, ConditionalSplit4@BaseAirportNull union(byName: true)~> FilterUnion3\nICAOAirportdoesntExists3 derive(Reject_Reason = \"Base Airport Name not found\") ~> AddRejectReason4\nICAOAirportExists2, IATAAirportExists2 union(byName: true)~> ExistUnion2\nIATAAirportExists3, ICAOAirportExists3 union(byName: true)~> ExistUnion3\nRejectUnion2, AddRejectReason4 union(byName: true)~> RejectUnion3\nFilterUnion3 split(isNull(scheduled_arrival_airport),\n\tdisjoint: false) ~> SchdArrvlAirportNull@(SchdArrvlAirportNull, SchdArrvlAirportNotNull)\nSchdArrvlAirportNull@SchdArrvlAirportNotNull, BdavisAirport exists(scheduled_arrival_airport == IATA,\n\tnegate:true,\n\tbroadcast: 'auto')~> IATAAirportDoesntExists4\nIATAAirportDoesntExists4, BdavisAirport exists(scheduled_arrival_airport == ICAO,\n\tnegate:false,\n\tbroadcast: 'auto')~> ICAOAirportExists4\nIATAAirportDoesntExists4, BdavisAirport exists(scheduled_arrival_airport == ICAO,\n\tnegate:true,\n\tbroadcast: 'auto')~> ICAOAirportDoesntExists4\nSchdArrvlAirportNull@SchdArrvlAirportNotNull, BdavisAirport exists(scheduled_arrival_airport == IATA,\n\tnegate:false,\n\tbroadcast: 'auto')~> IATAAirportExists4\nICAOAirportExists4, IATAAirportExists4 union(byName: true)~> ExistUnion4\nExistUnion4, SchdArrvlAirportNull@SchdArrvlAirportNull union(byName: true)~> FilterUnion4\nICAOAirportDoesntExists4 derive(Reject_Reason = \"Schd Arrvl Airport Name not found\") ~> AddRejectReason5\nFilterUnion4 split(isNull(scheduled_departure_airport),\n\tdisjoint: false) ~> SchdDptrAirportNull@(SchdDptrAirportNull, SchdDptrAirportNotNull)\nSchdDptrAirportNull@SchdDptrAirportNotNull, BdavisAirport exists(scheduled_departure_airport == IATA,\n\tnegate:true,\n\tbroadcast: 'auto')~> IATAAirportDoesntExists5\nIATAAirportDoesntExists5, BdavisAirport exists(scheduled_departure_airport == ICAO,\n\tnegate:false,\n\tbroadcast: 'auto')~> ICAOAirportExists5\nIATAAirportDoesntExists5, BdavisAirport exists(scheduled_departure_airport == ICAO,\n\tnegate:true,\n\tbroadcast: 'auto')~> ICAOAirportDoesntExists5\nSchdDptrAirportNull@SchdDptrAirportNotNull, BdavisAirport exists(scheduled_departure_airport == IATA,\n\tnegate:false,\n\tbroadcast: 'auto')~> IATAAirportExists5\nICAOAirportExists5, IATAAirportExists5 union(byName: true)~> ExistUnion5\nExistUnion5, SchdDptrAirportNull@SchdDptrAirportNull union(byName: true)~> FilterUnion5\nICAOAirportDoesntExists5 derive(Reject_Reason = \"Schd Dptr Airport Name not found\") ~> AddRejectReason6\nRejectUnion3, AddRejectReason5 union(byName: true)~> RejectUnion4\nRejectUnion4, AddRejectReason6 union(byName: true)~> RejectUnion5\nRejectUnion5 derive(ADF_TIME_STMP = currentTimestamp(),\n\t\tADF_RUN_ID = $run_id) ~> AddADFColumns\nFlightsJoinFlightsDelay derive(ADF_TIME_STMP = currentTimestamp(),\n\t\tADF_RUN_ID = $run_id) ~> AddADFColumns2\nFilterUnion5, FlightsDelay join(FilterUnion5@flight_id == FlightsDelay@flight_id,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> FlightsJoinFlightsDelay\nStgFlights derive(ACTL_OOOI_IN = toTimestamp(actual_oooi_in),\n\t\tACTL_OOOI_OFF = toTimestamp(actual_oooi_off),\n\t\tACTL_OOOI_ON = toTimestamp(actual_oooi_on),\n\t\tACTL_OOOI_OUT = toTimestamp(actual_oooi_out),\n\t\tESTD_ARRVL = toTimestamp(estimated_arrival),\n\t\tESTD_DPTR = toTimestamp(estimated_departure),\n\t\tSCHDD_ARRVL = toTimestamp(scheduled_arrival),\n\t\tSCHDD_DPTR = toTimestamp(scheduled_departure),\n\t\tUPDTD_AT = toTimestamp(updated_at)) ~> TypeConvertion\nTypeConvertion select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tmaint_log_page,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_DPTR,\n\t\tUPDTD_AT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveDuplicates\nRemoveDuplicates filter(toDate(UPDTD_AT)  > toDate($date) && toDate(UPDTD_AT) < currentDate()) ~> FilterRows\nConditionalSplit1@NullAcpt split(iif(isNull(ACTL_OOOI_IN), false(), iif(isNull(ACTL_OOOI_ON), iif(isNull(ACTL_OOOI_OUT), false(), ACTL_OOOI_IN>ACTL_OOOI_OUT), ACTL_OOOI_IN<ACTL_OOOI_ON)) || \r\niif(isNull(ACTL_OOOI_OFF), iif(isNull(ACTL_OOOI_ON), false(),true()), iif(isNull(ACTL_OOOI_OUT), false(), ACTL_OOOI_OFF<ACTL_OOOI_OUT)) ||\r\niif(isNull(ACTL_OOOI_ON), iif(isNull(ACTL_OOOI_IN), iif(isNull(ACTL_OOOI_OFF), false(),true()),true()),iif(isNull(ACTL_OOOI_OFF), false(), ACTL_OOOI_ON<=ACTL_OOOI_OFF)) ||\r\niif(isNull(ACTL_OOOI_OUT), iif(isNull(ACTL_OOOI_OFF), false(), true()), false()),\n\tdisjoint: false) ~> ConditionalSplit5@(OOOIReject, OOOIAcpt)\nConditionalSplit5@OOOIReject derive(Reject_Reason = \"OOOI Validation Error\") ~> OOOIRejectReason\nConditionalSplit5@OOOIAcpt split(iif(isNull(ESTD_ARRVL), iif(isNull(ESTD_DPTR), false(), true()), ESTD_ARRVL<ESTD_DPTR) ||\r\niif(isNull(SCHDD_ARRVL), true(), SCHDD_ARRVL<SCHDD_DPTR),\n\tdisjoint: false) ~> ConditionalSplit6@(EstSchdReject, EstSchdAcpt)\nConditionalSplit6@EstSchdReject derive(Reject_Reason = \"Estimated or Scheduled Arrival Validation Error\") ~> EstSchdRejectReason\nEstSchdRejectReason, NullRejectReason union(byName: true)~> UnionNullRejection\nUnionNullRejection, OOOIRejectReason union(byName: true)~> UnionOOOIRejection\nAddADFColumns sink(input(\n\t\tACTL_ARRVL_AIR_PORT as string,\n\t\tACTL_DPTR_AIR_PORT as string,\n\t\tACTL_OOOI_IN as timestamp,\n\t\tACTL_OOOI_OFF as timestamp,\n\t\tACTL_OOOI_ON as timestamp,\n\t\tACTL_OOOI_OUT as timestamp,\n\t\tAIR_CRAFT_RGSTRN_NUM as string,\n\t\tAIR_CRAFT_TYPE as string,\n\t\tBASE_AIR_PORT as string,\n\t\tCRGO_WGT as integer,\n\t\tESTD_ARRVL as timestamp,\n\t\tESTD_DPTR as timestamp,\n\t\tFLT_DT as date,\n\t\tFLT_ID as long,\n\t\tFLT_NUM as string,\n\t\tFLT_TYPE as string,\n\t\tFUEL_IN as double,\n\t\tFUEL_OUT as double,\n\t\tFUEL_UPLIFT as integer,\n\t\tIS_CNCLD as boolean,\n\t\tIS_VERFD as boolean,\n\t\tMAINT_LOG_PG as string,\n\t\tNOTES as string,\n\t\tSCHDD_ARRVL as timestamp,\n\t\tSCHDD_ARRVL_AIR_PORT as string,\n\t\tSCHDD_DPTR as timestamp,\n\t\tSCHDD_DPTR_AIR_PORT as string,\n\t\tUPDTD_AT as timestamp,\n\t\tREJECT_REASON as string,\n\t\tADF_TIME_STMP as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tACTL_ARRVL_AIR_PORT = actual_arrival_airport,\n\t\tACTL_DPTR_AIR_PORT = actual_departure_airport,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM = aircraft_registration_number,\n\t\tAIR_CRAFT_TYPE = aircraft_type,\n\t\tBASE_AIR_PORT = base_airport,\n\t\tCRGO_WGT = cargo_weight,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT = flight_date,\n\t\tFLT_ID = flight_id,\n\t\tFLT_NUM = flight_number,\n\t\tFLT_TYPE = flight_type,\n\t\tFUEL_IN = fuel_in,\n\t\tFUEL_OUT = fuel_out,\n\t\tFUEL_UPLIFT = fuel_uplift,\n\t\tIS_CNCLD = is_canceled,\n\t\tIS_VERFD = is_verified,\n\t\tMAINT_LOG_PG = maint_log_page,\n\t\tNOTES = notes,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT = scheduled_arrival_airport,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT = scheduled_departure_airport,\n\t\tUPDTD_AT,\n\t\tREJECT_REASON = Reject_Reason,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Reject\nAddADFColumns2 sink(input(\n\t\tACTL_ARRVL_AIR_PORT as string,\n\t\tACTL_DPTR_AIR_PORT as string,\n\t\tACTL_OOOI_IN as timestamp,\n\t\tACTL_OOOI_OFF as timestamp,\n\t\tACTL_OOOI_ON as timestamp,\n\t\tACTL_OOOI_OUT as timestamp,\n\t\tAIR_CRAFT_RGSTRN_NUM as string,\n\t\tAIR_CRAFT_TYPE as string,\n\t\tBASE_AIR_PORT as string,\n\t\tCRGO_WGT as integer,\n\t\tESTD_ARRVL as timestamp,\n\t\tESTD_DPTR as timestamp,\n\t\tFLT_DT as date,\n\t\tFLT_ID as long,\n\t\tFLT_NUM as string,\n\t\tFLT_TYPE as string,\n\t\tFUEL_IN as double,\n\t\tFUEL_OUT as double,\n\t\tFUEL_UPLIFT as integer,\n\t\tIS_CNCLD as boolean,\n\t\tIS_VERFD as boolean,\n\t\tMAINT_LOG_PG as string,\n\t\tNOTES as string,\n\t\tSCHDD_ARRVL as timestamp,\n\t\tSCHDD_ARRVL_AIR_PORT as string,\n\t\tSCHDD_DPTR as timestamp,\n\t\tSCHDD_DPTR_AIR_PORT as string,\n\t\tUPDTD_AT as timestamp,\n\t\tDLAY_TYP as string,\n\t\tDURTN_MNT as integer,\n\t\tDLAY_CD as string,\n\t\tDLAY_CD_NAME as string,\n\t\tADF_TIME_STMP as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tACTL_ARRVL_AIR_PORT = actual_arrival_airport,\n\t\tACTL_DPTR_AIR_PORT = actual_departure_airport,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM = aircraft_registration_number,\n\t\tAIR_CRAFT_TYPE = aircraft_type,\n\t\tBASE_AIR_PORT = base_airport,\n\t\tCRGO_WGT = cargo_weight,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT = flight_date,\n\t\tFLT_ID = FilterUnion5@flight_id,\n\t\tFLT_NUM = flight_number,\n\t\tFLT_TYPE = flight_type,\n\t\tFUEL_IN = fuel_in,\n\t\tFUEL_OUT = fuel_out,\n\t\tFUEL_UPLIFT = fuel_uplift,\n\t\tIS_CNCLD = is_canceled,\n\t\tIS_VERFD = is_verified,\n\t\tMAINT_LOG_PG = maint_log_page,\n\t\tNOTES = notes,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT = scheduled_arrival_airport,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT = scheduled_departure_airport,\n\t\tUPDTD_AT,\n\t\tDLAY_TYP = delay_type,\n\t\tDURTN_MNT = duration_mins,\n\t\tDLAY_CD = delay_code,\n\t\tDLAY_CD_NAME = delay_code_name,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> StagingFlights"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/eal_az_flights')]",
				"[concat(variables('factoryId'), '/datasets/eal_ac_bdavis_Airports')]",
				"[concat(variables('factoryId'), '/datasets/eal_az_flights_delay')]",
				"[concat(variables('factoryId'), '/datasets/sql_flights_rej')]",
				"[concat(variables('factoryId'), '/datasets/sql_s_flights')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
			"apiVersion": "2018-06-01",
			"properties": {
				"preventDataExfiltration": false
			},
			"dependsOn": []
		}
	]
}