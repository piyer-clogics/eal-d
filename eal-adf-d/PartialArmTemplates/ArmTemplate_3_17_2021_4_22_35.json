{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "eal-adf-d"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/eal_f_equip_schd_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Call d_daily_load_Update",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set variable Last Updated Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "f_equip_schd_load_update",
								"type": "DataFlowReference",
								"parameters": {
									"date": {
										"value": "'@{variables('dt')}'",
										"type": "Expression"
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Call d_daily_load_Insert",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Call d_daily_load_Update",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "f_equip_schd_load_insert",
								"type": "DataFlowReference",
								"parameters": {
									"date": {
										"value": "'@{variables('dt')}'",
										"type": "Expression"
									},
									"row_num": {
										"value": "@variables('row_num')",
										"type": "Expression"
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Get Last Row Number",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select max([EQP_SCHED_ID]) as row FROM [dbo].[F_EQUIP_SCHD]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sql_d_aprt",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get Last Updated Date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [ADF_SUC_TS]\n  FROM [dbo].[S_ADF_CNTRL] where ADF_JOB_NAME = 'eal_f_equip_schd_load'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "eal_adf_cntrl",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Update Control Table",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Call d_daily_load_Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "adf_control",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"adf_name": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set variable Last Updated Date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Last Updated Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "dt",
							"value": {
								"value": "@string(activity('Get Last Updated Date').output['value'][0]['ADF_SUC_TS'])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Last Row Number",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Get Last Row Number').output['value'][0]['row'],NULL)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set Row Count",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "row_num",
										"value": {
											"value": "@string(activity('Get Last Row Number').output['value'][0]['row'])",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set Row Count as 0",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "row_num",
										"value": {
											"value": "@string('0')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Copy stg data to blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable Last Updated Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "sql_s_eqip_schd",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "eal_stg_equipment_schd",
								"type": "DatasetReference"
							}
						]
					}
				],
				"variables": {
					"dt": {
						"type": "String"
					},
					"row_num": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Equip Schedule"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/eal_stg_equipment_schd')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_f_flights_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Call f_flights_update",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set variable Last Updated Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "f_flights_load_update",
								"type": "DataFlowReference",
								"parameters": {
									"date": {
										"value": "'@{variables('dt')}'",
										"type": "Expression"
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Get Last Row Number",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select max(FLGHT_ID) as row FROM [dbo].[F_FLGHT_OPS]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sql_d_aprt",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get Last Updated Date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT \n [ADF_SUC_TS]\n  FROM [dbo].[S_ADF_CNTRL] where ADF_JOB_NAME = 'eal_f_flights_load'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "eal_adf_cntrl",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Update Control Table",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Call f_flights_insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "adf_control",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"adf_name": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set variable Last Updated Date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Last Updated Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "dt",
							"value": {
								"value": "@string(activity('Get Last Updated Date').output['value'][0]['ADF_SUC_TS'])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Last Row Number",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Get Last Row Number').output['value'][0]['row'],NULL)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set Row Count",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "row_num",
										"value": {
											"value": "@string(activity('Get Last Row Number').output['value'][0]['row'])",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set Row Count as 0",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "row_num",
										"value": {
											"value": "@string('0')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Call f_flights_insert",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Call f_flights_update",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "f_flights_load_insert",
								"type": "DataFlowReference",
								"parameters": {
									"row_num": {
										"value": "@variables('row_num')",
										"type": "Expression"
									},
									"date": {
										"value": "'@{variables('dt')}'",
										"type": "Expression"
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy stg to blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable Last Updated Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "sql_s_flights",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "eal_stg_flights",
								"type": "DatasetReference"
							}
						]
					}
				],
				"variables": {
					"dt": {
						"type": "String"
					},
					"row_num": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Flights"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/f_flights_load_update')]",
				"[concat(variables('factoryId'), '/dataflows/f_flights_load_insert')]",
				"[concat(variables('factoryId'), '/datasets/eal_stg_flights')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_stg_arpt_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data from BDAVIS to blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "sql_bdavis_test_arpt",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "eal_src_arpt",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "Write Data to Staging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set variable date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "s_arpt_load",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"date": {
										"value": "'@{variables('date')}'",
										"type": "Expression"
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Update Control Table",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Write Data to Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "adf_control",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"adf_name": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Get Last Updated Date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data from BDAVIS to blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [ADF_SUC_TS]\n  FROM [dbo].[S_ADF_CNTRL] where ADF_JOB_NAME = 'eal_stg_arpt_load'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "eal_adf_cntrl",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set variable date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Last Updated Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "date",
							"value": {
								"value": "@string(activity('Get Last Updated Date').output['value'][0]['ADF_SUC_TS'])",
								"type": "Expression"
							}
						}
					}
				],
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Airport"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/eal_src_arpt')]",
				"[concat(variables('factoryId'), '/dataflows/s_arpt_load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_stg_equip_schd_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data from Postgres to Azure Blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "eal_postgresql_equip_schd",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "eal_src_equipment_schd",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "Call s_equip_schd_load",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set variable date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "s_equip_schd_load",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"date": {
										"value": "'@{variables('date')}'",
										"type": "Expression"
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Get Last Updated Date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data from Postgres to Azure Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [ADF_SUC_TS]\n  FROM [dbo].[S_ADF_CNTRL] where ADF_JOB_NAME = 'eal_stg_equip_schd_load'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "eal_adf_cntrl",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set variable date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Last Updated Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "date",
							"value": {
								"value": "@string(activity('Get Last Updated Date').output['value'][0]['ADF_SUC_TS'])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Update Control Table",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Call s_equip_schd_load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "adf_control",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"adf_name": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Equip Schedule"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/eal_src_equipment_schd')]",
				"[concat(variables('factoryId'), '/dataflows/s_equip_schd_load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_stg_flights_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy flights table from postgresql to blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "eal_postgresql_flights_db",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "eal_src_flights",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "Write Data to Staging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set variable date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "s_flights_load",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"date": {
										"value": "'@{variables('date')}'",
										"type": "Expression"
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Update Control Table",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Write Data to Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "adf_control",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"adf_name": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Get Last Updated Date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy flights delay table from postgresql to blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [ADF_SUC_TS]\n  FROM [dbo].[S_ADF_CNTRL] where ADF_JOB_NAME = 'eal_stg_flights_load'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "eal_adf_cntrl",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set variable date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Last Updated Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "date",
							"value": {
								"value": "@string(activity('Get Last Updated Date').output['value'][0]['ADF_SUC_TS'])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy flights delay table from postgresql to blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy flights table from postgresql to blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "eal_postgresql_delay_db",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "eal_src_flights_delay",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "Move FlightsDelay to Staging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy flights delay table from postgresql to blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "s_flights_delay_load",
								"type": "DataFlowReference",
								"parameters": {
									"run_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Flights"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/eal_src_flights')]",
				"[concat(variables('factoryId'), '/dataflows/s_flights_load')]",
				"[concat(variables('factoryId'), '/datasets/eal_src_flights_delay')]",
				"[concat(variables('factoryId'), '/dataflows/s_flights_delay_load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_src_arpt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ealblobdconnection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Azure blobs"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "eal_aprt.json",
						"container": "eal-src-stg"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"ARPT_NAME": {
							"type": "string"
						},
						"ARPT_CITY": {
							"type": "string"
						},
						"ARPT_CNTRY": {
							"type": "string"
						},
						"ARPT_IATA_CD": {
							"type": "string"
						},
						"ARPT_ICAO_CD": {
							"type": "string"
						},
						"ARPT_LAT": {
							"type": "number"
						},
						"ARPT_LONG": {
							"type": "number"
						},
						"ARPT_ALTD": {
							"type": "integer"
						},
						"ARPT_UTC_OFSET": {
							"type": "number"
						},
						"ARPT_DST": {
							"type": "string"
						},
						"ARPT_TZONE": {
							"type": "string"
						},
						"LAST_UPDT_DT": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_src_equipment_schd')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ealblobdconnection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Azure blobs"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('bi-flights-equip-schd-',split(utcnow(),'T')[0])",
							"type": "Expression"
						},
						"container": "eal-src-equip-schd"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"eqp_sched_id": {
							"type": "integer"
						},
						"ac_registration": {
							"type": "string"
						},
						"status_code": {
							"type": "string"
						},
						"status_name": {
							"type": "string"
						},
						"status_description": {
							"type": "string"
						},
						"start_time": {
							"type": "string"
						},
						"end_time": {
							"type": "string"
						},
						"notes": {
							"type": "string"
						},
						"is_deleted": {
							"type": "boolean"
						},
						"updated_at": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_src_flights')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ealblobdconnection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Azure blobs"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('bi-flights-',split(utcnow(),'T')[0])",
							"type": "Expression"
						},
						"container": "eal-src-flights"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"flight_id": {
							"type": "integer"
						},
						"flight_number": {
							"type": "string"
						},
						"flight_date": {
							"type": "string"
						},
						"aircraft_registration_number": {
							"type": "string"
						},
						"aircraft_type": {
							"type": "string"
						},
						"scheduled_departure": {
							"type": "string"
						},
						"scheduled_arrival": {
							"type": "string"
						},
						"estimated_departure": {
							"type": "null"
						},
						"estimated_arrival": {
							"type": "null"
						},
						"actual_oooi_out": {
							"type": "null"
						},
						"actual_oooi_off": {
							"type": "null"
						},
						"actual_oooi_on": {
							"type": "null"
						},
						"actual_oooi_in": {
							"type": "null"
						},
						"base_airport": {
							"type": "string"
						},
						"scheduled_departure_airport": {
							"type": "string"
						},
						"scheduled_arrival_airport": {
							"type": "string"
						},
						"actual_departure_airport": {
							"type": "string"
						},
						"actual_arrival_airport": {
							"type": "string"
						},
						"is_verified": {
							"type": "boolean"
						},
						"notes": {
							"type": "null"
						},
						"is_canceled": {
							"type": "boolean"
						},
						"flight_type": {
							"type": "string"
						},
						"cargo_weight": {
							"type": "null"
						},
						"fuel_out": {
							"type": "null"
						},
						"fuel_in": {
							"type": "null"
						},
						"fuel_uplift": {
							"type": "null"
						},
						"maint_log_page": {
							"type": "null"
						},
						"updated_at": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_src_flights_delay')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ealblobdconnection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Azure blobs"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('bi-flights-delay-',split(utcnow(),'T')[0])",
							"type": "Expression"
						},
						"container": "eal-src-flight-delay"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"flight_id": {
							"type": "integer"
						},
						"delay_type": {
							"type": "string"
						},
						"duration_mins": {
							"type": "integer"
						},
						"delay_code": {
							"type": "string"
						},
						"delay_code_name": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_stg_equipment_schd')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ealblobdconnection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Azure blobs"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('stg-flights-equip-schd-',split(utcnow(),'T')[0])",
							"type": "Expression"
						},
						"container": "eal-stg-equip-schd"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"eqp_sched_id": {
							"type": "integer"
						},
						"ac_registration": {
							"type": "string"
						},
						"status_code": {
							"type": "string"
						},
						"status_name": {
							"type": "string"
						},
						"status_description": {
							"type": "string"
						},
						"start_time": {
							"type": "string"
						},
						"end_time": {
							"type": "string"
						},
						"notes": {
							"type": "string"
						},
						"is_deleted": {
							"type": "boolean"
						},
						"updated_at": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_stg_flights')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ealblobdconnection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Azure blobs"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('stg-flights-',split(utcnow(),'T')[0])",
							"type": "Expression"
						},
						"container": "eal-stg-flights"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"flight_id": {
							"type": "integer"
						},
						"flight_number": {
							"type": "string"
						},
						"flight_date": {
							"type": "string"
						},
						"aircraft_registration_number": {
							"type": "string"
						},
						"aircraft_type": {
							"type": "string"
						},
						"scheduled_departure": {
							"type": "string"
						},
						"scheduled_arrival": {
							"type": "string"
						},
						"estimated_departure": {
							"type": "null"
						},
						"estimated_arrival": {
							"type": "null"
						},
						"actual_oooi_out": {
							"type": "null"
						},
						"actual_oooi_off": {
							"type": "null"
						},
						"actual_oooi_on": {
							"type": "null"
						},
						"actual_oooi_in": {
							"type": "null"
						},
						"base_airport": {
							"type": "string"
						},
						"scheduled_departure_airport": {
							"type": "string"
						},
						"scheduled_arrival_airport": {
							"type": "string"
						},
						"actual_departure_airport": {
							"type": "string"
						},
						"actual_arrival_airport": {
							"type": "string"
						},
						"is_verified": {
							"type": "boolean"
						},
						"notes": {
							"type": "null"
						},
						"is_canceled": {
							"type": "boolean"
						},
						"flight_type": {
							"type": "string"
						},
						"cargo_weight": {
							"type": "null"
						},
						"fuel_out": {
							"type": "null"
						},
						"fuel_in": {
							"type": "null"
						},
						"fuel_uplift": {
							"type": "null"
						},
						"maint_log_page": {
							"type": "null"
						},
						"updated_at": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/eal_stg_flights_delay')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ealblobdconnection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Azure blobs"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('stg-flights-delay-',split(utcnow(),'T')[0])",
							"type": "Expression"
						},
						"container": "eal-stg-flight-delay"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"flight_id": {
							"type": "integer"
						},
						"delay_type": {
							"type": "string"
						},
						"duration_mins": {
							"type": "integer"
						},
						"delay_code": {
							"type": "string"
						},
						"delay_code_name": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_f_flights_ops')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eal_sqldb_EDW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Destination Table/Prod"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "FLGHT_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FLGHT_DT_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "FLGHT_NUM",
						"type": "varchar"
					},
					{
						"name": "FLGHT_TYP",
						"type": "varchar"
					},
					{
						"name": "AIR_CRAFT_RGSTRN_NUM",
						"type": "varchar"
					},
					{
						"name": "AIR_CRAFT_TYP",
						"type": "varchar"
					},
					{
						"name": "SCHDD_DPRT_TS_UTC",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SCHDD_ARRVL_TS_UTC",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ESTD_DPRT_TS_UTC",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ESTD_ARRVL_TS_UTC",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTL_OOOI_OUT_TS_UTC",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTL_OOOI_OFF_TS_UTC",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTL_OOOI_ON_TS_UTC",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTL_OOOI_IN_TS_UTC",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "BASE_ARPT_CD",
						"type": "varchar"
					},
					{
						"name": "BASE_ARPT_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SCHDD_DRPT_ARPT_CD",
						"type": "varchar"
					},
					{
						"name": "SCHDD_DRPT_ARPT_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SCHDD_ARRVL_ARPT_CD",
						"type": "varchar"
					},
					{
						"name": "SCHDD_ARRVL_ARPT_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ACTL_ARRVL_ARPT_CD",
						"type": "varchar"
					},
					{
						"name": "ACTL_ARRVL_ARPT_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ACTL_DPTR_ARPT_CD",
						"type": "varchar"
					},
					{
						"name": "ACTL_DPTR_ARPT_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FUEL_IN",
						"type": "float",
						"precision": 15
					},
					{
						"name": "FUEL_OUT",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FUEL_UPLIFT",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CRGO_WT",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MAINT_LOG",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NOTES",
						"type": "varchar"
					},
					{
						"name": "IS_CNCLD",
						"type": "bit"
					},
					{
						"name": "IS_VERFD",
						"type": "bit"
					},
					{
						"name": "DEP_VAR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ARRVL_VAR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SCHDD_BLK_DUR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ACTL_BLK_DUR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ACTL_FLGHT_DUR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DPRT_DELAY_DUR_D0_IND",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "DPRT_DELAY_DUR_D15_IND",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ARRVL_DELAY_DUR_A0_IND",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ARRVL_DELAY_DUR_A14_IND",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "BLK_DUR_B0_IND",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "SCHDD_FLT_DUR",
						"type": "varchar"
					},
					{
						"name": "DELAY_TYP",
						"type": "varchar"
					},
					{
						"name": "DELAY_DUR",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "DELAY_CD",
						"type": "varchar"
					},
					{
						"name": "DELAY_DESC",
						"type": "varchar"
					},
					{
						"name": "UPDT_TIME_STMP",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "F_FLGHT_OPS"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/d_arpt_daily_load_insert')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Airport"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_s_airports",
								"type": "DatasetReference"
							},
							"name": "StgArpt"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_d_aprt",
								"type": "DatasetReference"
							},
							"name": "WriteNewRows"
						}
					],
					"transformations": [
						{
							"name": "MapDrifted",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "AddADFColumns"
						},
						{
							"name": "DropColumns"
						},
						{
							"name": "SetRowNumber"
						}
					],
					"script": "parameters{\n\tdt as string ('2021-03-10'),\n\trow_num as integer (990000)\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT * FROM [S_AIRPORTS] WHERE [LAST_UPDT_DT] >= '\"+$dt+\"' and LAST_UPDT_DT <  CAST(GETDATE() AS DATE)\"),\n\tformat: 'query') ~> StgArpt\nStgArpt derive(ARPT_NAME = toString(byName('ARPT_NAME')),\n\t\tARPT_CITY = toString(byName('ARPT_CITY')),\n\t\tARPT_CNTRY = toString(byName('ARPT_CNTRY')),\n\t\tARPT_IATA_CD = toString(byName('ARPT_IATA_CD')),\n\t\tARPT_ICAO_CD = toString(byName('ARPT_ICAO_CD')),\n\t\tARPT_LAT = toDouble(byName('ARPT_LAT')),\n\t\tARPT_LONG = toDouble(byName('ARPT_LONG')),\n\t\tARPT_ALTD = toShort(byName('ARPT_ALTD')),\n\t\tARPT_UTC_OFSET = toDouble(byName('ARPT_UTC_OFSET')),\n\t\tARPT_DST = toString(byName('ARPT_DST')),\n\t\tARPT_TZONE = toString(byName('ARPT_TZONE')),\n\t\tLAST_UPDT_DT = toDate(byName('LAST_UPDT_DT')),\n\t\tADF_RUN_ID = toString(byName('ADF_RUN_ID')),\n\t\tADF_TIME_STMP = toTimestamp(byName('ADF_TIME_STMP'))) ~> MapDrifted\nDropColumns derive(EFF_STRT_DT = LAST_UPDT_DT,\n\t\tEFF_END_DT = toDate('2500-01-01'),\n\t\tACTV_IND = 'Y',\n\t\tID = $row_num+1) ~> AddADFColumns\nMapDrifted select(mapColumn(\n\t\tARPT_NAME,\n\t\tARPT_CITY,\n\t\tARPT_CNTRY,\n\t\tARPT_IATA_CD,\n\t\tARPT_ICAO_CD,\n\t\tARPT_LAT,\n\t\tARPT_LONG,\n\t\tARPT_ALTD,\n\t\tARPT_UTC_OFSET,\n\t\tARPT_DST,\n\t\tARPT_TZONE,\n\t\tLAST_UPDT_DT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DropColumns\nAddADFColumns window(over(ID),\n\tasc(ID, true),\n\tAPRT_ID = $row_num + rowNumber()) ~> SetRowNumber\nSetRowNumber sink(input(\n\t\tARPT_ID as integer,\n\t\tARPT_IATA_CD as string,\n\t\tARPT_ICAO_CD as string,\n\t\tARPT_NAME as string,\n\t\tARPT_CNTRY as string,\n\t\tARPT_CITY as string,\n\t\tARPT_LAT as decimal(8,6),\n\t\tARPT_LONG as decimal(9,6),\n\t\tARPT_ALTD as decimal(6,2),\n\t\tARPT_UTC_OFSET as decimal(2,2),\n\t\tARPT_DST_CD as string,\n\t\tARPT_TZONE as string,\n\t\tEFF_STRT_DT as timestamp,\n\t\tEFF_END_DT as timestamp,\n\t\tACTV_IND as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tARPT_ID = APRT_ID,\n\t\tARPT_IATA_CD,\n\t\tARPT_ICAO_CD,\n\t\tARPT_NAME,\n\t\tARPT_CNTRY,\n\t\tARPT_CITY,\n\t\tARPT_LAT,\n\t\tARPT_LONG,\n\t\tARPT_ALTD,\n\t\tARPT_UTC_OFSET,\n\t\tARPT_DST_CD = ARPT_DST,\n\t\tARPT_TZONE,\n\t\tEFF_STRT_DT,\n\t\tEFF_END_DT,\n\t\tACTV_IND\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> WriteNewRows"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/f_flights_load_insert')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Flights"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_s_flights",
								"type": "DatasetReference"
							},
							"name": "StagingFlights"
						},
						{
							"dataset": {
								"referenceName": "sql_d_aprt",
								"type": "DatasetReference"
							},
							"name": "ARPT"
						},
						{
							"dataset": {
								"referenceName": "sql_d_clndr",
								"type": "DatasetReference"
							},
							"name": "CLNDR"
						},
						{
							"dataset": {
								"referenceName": "sql_f_flights_ops",
								"type": "DatasetReference"
							},
							"name": "Flights"
						},
						{
							"dataset": {
								"referenceName": "sql_s_flights_delay",
								"type": "DatasetReference"
							},
							"name": "FlightDelay"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_f_flights_ops",
								"type": "DatasetReference"
							},
							"name": "Write"
						}
					],
					"transformations": [
						{
							"name": "FilterFlightType"
						},
						{
							"name": "LookupIATA"
						},
						{
							"name": "FilterActvInd"
						},
						{
							"name": "RemoveColumns1"
						},
						{
							"name": "LookupICAO"
						},
						{
							"name": "AddBaseAirportID"
						},
						{
							"name": "RemoveIATAICAO"
						},
						{
							"name": "LookupIATA2"
						},
						{
							"name": "RemoveColumns2"
						},
						{
							"name": "LookupICAO2"
						},
						{
							"name": "AddSchdDptrID"
						},
						{
							"name": "RemoveIATAICAO2"
						},
						{
							"name": "LookupIATA3"
						},
						{
							"name": "RemoveColumns3"
						},
						{
							"name": "LookupICAO3"
						},
						{
							"name": "AddSchdArrID"
						},
						{
							"name": "RemoveIATAICAO3"
						},
						{
							"name": "LookupIATA4"
						},
						{
							"name": "RemoveColumns4"
						},
						{
							"name": "LookupICAO4"
						},
						{
							"name": "AddActArrID"
						},
						{
							"name": "RemoveIATAICAO4"
						},
						{
							"name": "AddNewColumns"
						},
						{
							"name": "AddNewColumns2"
						},
						{
							"name": "LookupIATA5"
						},
						{
							"name": "RemoveColumns5"
						},
						{
							"name": "LookupICAO5"
						},
						{
							"name": "AddActlDptrID"
						},
						{
							"name": "RemoveIATAICAO5"
						},
						{
							"name": "SetRowNumber"
						},
						{
							"name": "LookupCLNDR"
						},
						{
							"name": "RemoveCLNDRColumns"
						},
						{
							"name": "DoesntExists"
						},
						{
							"name": "LeftJoinWithDelay"
						},
						{
							"name": "AddTimeStamp"
						}
					],
					"script": "parameters{\n\trow_num as integer (0),\n\tdate as string ('2021-03-10')\n}\nsource(output(\n\t\tACTL_ARRVL_AIR_PORT as string,\n\t\tACTL_DPTR_AIR_PORT as string,\n\t\tACTL_OOOI_IN as timestamp,\n\t\tACTL_OOOI_OFF as timestamp,\n\t\tACTL_OOOI_ON as timestamp,\n\t\tACTL_OOOI_OUT as timestamp,\n\t\tAIR_CRAFT_RGSTRN_NUM as string,\n\t\tAIR_CRAFT_TYPE as string,\n\t\tBASE_AIR_PORT as string,\n\t\tCRGO_WGT as integer,\n\t\tESTD_ARRVL as timestamp,\n\t\tESTD_DPTR as timestamp,\n\t\tFLT_DT as date,\n\t\tFLT_ID as long,\n\t\tFLT_NUM as string,\n\t\tFLT_TYPE as string,\n\t\tFUEL_IN as double,\n\t\tFUEL_OUT as double,\n\t\tFUEL_UPLIFT as integer,\n\t\tIS_CNCLD as boolean,\n\t\tIS_VERFD as boolean,\n\t\tMAINT_LOG_PG as string,\n\t\tNOTES as string,\n\t\tSCHDD_ARRVL as timestamp,\n\t\tSCHDD_ARRVL_AIR_PORT as string,\n\t\tSCHDD_DPTR as timestamp,\n\t\tSCHDD_DPTR_AIR_PORT as string,\n\t\tUPDTD_AT as timestamp,\n\t\tADF_TIME_STMP as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT * FROM [dbo].[S_FLIGHTS] where  UPDTD_AT >= '\"+$date+\"' and UPDTD_AT <  CAST(GETDATE() AS DATE)\"),\n\tformat: 'query') ~> StagingFlights\nsource(output(\n\t\tARPT_ID as integer,\n\t\tARPT_IATA_CD as string,\n\t\tARPT_ICAO_CD as string,\n\t\tARPT_NAME as string,\n\t\tARPT_CNTRY as string,\n\t\tARPT_CITY as string,\n\t\tARPT_LAT as decimal(8,6),\n\t\tARPT_LONG as decimal(9,6),\n\t\tARPT_ALTD as decimal(6,2),\n\t\tARPT_UTC_OFSET as decimal(2,2),\n\t\tARPT_DST_CD as string,\n\t\tARPT_TZONE as string,\n\t\tEFF_STRT_DT as timestamp,\n\t\tEFF_END_DT as timestamp,\n\t\tACTV_IND as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ARPT\nsource(output(\n\t\tCLNDR_ID as string,\n\t\tTheDate as date,\n\t\tTheDay as integer,\n\t\tTheDaySuffix as string,\n\t\tTheDayName as string,\n\t\tTheDayOfWeek as integer,\n\t\tTheDayOfWeekInMonth as integer,\n\t\tTheDayOfYear as integer,\n\t\tIsWeekend as integer,\n\t\tTheWeek as integer,\n\t\tTheISOweek as integer,\n\t\tTheFirstOfWeek as date,\n\t\tTheLastOfWeek as date,\n\t\tTheWeekOfMonth as integer,\n\t\tTheMonth as integer,\n\t\tTheMonthName as string,\n\t\tTheFirstOfMonth as date,\n\t\tTheLastOfMonth as date,\n\t\tTheFirstOfNextMonth as date,\n\t\tTheLastOfNextMonth as date,\n\t\tTheQuarter as integer,\n\t\tTheFirstOfQuarter as date,\n\t\tTheLastOfQuarter as date,\n\t\tTheYear as integer,\n\t\tTheISOYear as integer,\n\t\tTheFirstOfYear as date,\n\t\tTheLastOfYear as date,\n\t\tIsLeapYear as boolean,\n\t\tHas53Weeks as integer,\n\t\tHas53ISOWeeks as integer,\n\t\tMMYYYY as string,\n\t\tStyle101 as string,\n\t\tStyle103 as string,\n\t\tStyle112 as string,\n\t\tStyle120 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CLNDR\nsource(output(\n\t\tFLGHT_ID as integer,\n\t\tFLGHT_DT_ID as long,\n\t\tFLGHT_NUM as string,\n\t\tFLGHT_TYP as string,\n\t\tAIR_CRAFT_RGSTRN_NUM as string,\n\t\tAIR_CRAFT_TYP as string,\n\t\tSCHDD_DPRT_TS_UTC as timestamp,\n\t\tSCHDD_ARRVL_TS_UTC as timestamp,\n\t\tESTD_DPRT_TS_UTC as timestamp,\n\t\tESTD_ARRVL_TS_UTC as timestamp,\n\t\tACTL_OOOI_OUT_TS_UTC as timestamp,\n\t\tACTL_OOOI_OFF_TS_UTC as timestamp,\n\t\tACTL_OOOI_ON_TS_UTC as timestamp,\n\t\tACTL_OOOI_IN_TS_UTC as timestamp,\n\t\tBASE_ARPT_CD as string,\n\t\tBASE_ARPT_ID as integer,\n\t\tSCHDD_DRPT_ARPT_CD as string,\n\t\tSCHDD_DRPT_ARPT_ID as integer,\n\t\tSCHDD_ARRVL_ARPT_CD as string,\n\t\tSCHDD_ARRVL_ARPT_ID as integer,\n\t\tACTL_ARRVL_ARPT_CD as string,\n\t\tACTL_ARRVL_ARPT_ID as integer,\n\t\tACTL_DPTR_ARPT_CD as string,\n\t\tACTL_DPTR_ARPT_ID as integer,\n\t\tFUEL_IN as double,\n\t\tFUEL_OUT as integer,\n\t\tFUEL_UPLIFT as integer,\n\t\tCRGO_WT as integer,\n\t\tMAINT_LOG as integer,\n\t\tNOTES as string,\n\t\tIS_CNCLD as boolean,\n\t\tIS_VERFD as boolean,\n\t\tDEP_VAR as integer,\n\t\tARRVL_VAR as integer,\n\t\tSCHDD_BLK_DUR as integer,\n\t\tACTL_BLK_DUR as integer,\n\t\tACTL_FLGHT_DUR as integer,\n\t\tDPRT_DELAY_DUR_D0_IND as integer,\n\t\tDPRT_DELAY_DUR_D15_IND as integer,\n\t\tARRVL_DELAY_DUR_A0_IND as integer,\n\t\tARRVL_DELAY_DUR_A14_IND as integer,\n\t\tBLK_DUR_B0_IND as integer,\n\t\tSCHDD_FLT_DUR as string,\n\t\tDELAY_TYP as string,\n\t\tDELAY_DUR as integer,\n\t\tDELAY_CD as string,\n\t\tDELAY_DESC as string,\n\t\tUPDT_TIME_STMP as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Flights\nsource(output(\n\t\tFLT_ID as long,\n\t\tDLAY_TYP as string,\n\t\tDURTN_MNT as integer,\n\t\tDLAY_CD as string,\n\t\tDLAY_CD_NAME as string,\n\t\tADF_TIME_STMP as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> FlightDelay\nStagingFlights filter(FLT_TYPE <=>'flight') ~> FilterFlightType\nFilterFlightType, FilterActvInd lookup(BASE_AIR_PORT == ARPT_IATA_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIATA\nARPT filter(ACTV_IND == 'Y') ~> FilterActvInd\nLookupIATA select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tUPDTD_AT,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tIATA_ARPT_ID = ARPT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns1\nRemoveColumns1, FilterActvInd lookup(BASE_AIR_PORT == ARPT_ICAO_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupICAO\nLookupICAO derive(BASE_ARPT_ID = iif(isNull(IATA_ARPT_ID), ARPT_ID, IATA_ARPT_ID)) ~> AddBaseAirportID\nAddBaseAirportID select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tUPDTD_AT,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveIATAICAO\nRemoveIATAICAO, FilterActvInd lookup(SCHDD_DPTR_AIR_PORT == ARPT_IATA_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIATA2\nLookupIATA2 select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tUPDTD_AT,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tIATA_ARPT_ID = ARPT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns2\nRemoveColumns2, FilterActvInd lookup(ACTL_DPTR_AIR_PORT == ARPT_ICAO_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupICAO2\nLookupICAO2 derive(SCHDD_DRPT_ARPT_ID = iif(isNull(IATA_ARPT_ID), ARPT_ID, IATA_ARPT_ID)) ~> AddSchdDptrID\nAddSchdDptrID select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveIATAICAO2\nRemoveIATAICAO2, FilterActvInd lookup(ACTL_ARRVL_AIR_PORT == ARPT_IATA_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIATA3\nLookupIATA3 select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tIATA_ARPT_ID = ARPT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns3\nRemoveColumns3, FilterActvInd lookup(ACTL_ARRVL_AIR_PORT == ARPT_ICAO_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupICAO3\nLookupICAO3 derive(SCHDD_ARRVL_ARPT_ID = iif(isNull(IATA_ARPT_ID), ARPT_ID, IATA_ARPT_ID)) ~> AddSchdArrID\nAddSchdArrID select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveIATAICAO3\nRemoveIATAICAO3, FilterActvInd lookup(ACTL_ARRVL_AIR_PORT == ARPT_IATA_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIATA4\nLookupIATA4 select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tIATA_ARPT_ID = ARPT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns4\nRemoveColumns4, FilterActvInd lookup(ACTL_ARRVL_AIR_PORT == ARPT_ICAO_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupICAO4\nLookupICAO4 derive(ACTL_ARRVL_ARPT_ID = iif(isNull(IATA_ARPT_ID), ARPT_ID, IATA_ARPT_ID)) ~> AddActArrID\nAddActArrID select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_ARRVL_ARPT_ID,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveIATAICAO4\nRemoveIATAICAO5 derive(DEP_VAR = (ACTL_OOOI_OUT - SCHDD_DPTR)/60000,\n\t\tARRVL_VAR = (ACTL_OOOI_IN - SCHDD_ARRVL)/60000,\n\t\tSCHDD_BLK_DUR = (SCHDD_ARRVL - SCHDD_DPTR)/60000,\n\t\tACTL_BLK_DUR = (ACTL_OOOI_IN - ACTL_OOOI_OUT)/60000,\n\t\tACTL_FLGHT_DUR = (ACTL_OOOI_IN - ACTL_OOOI_OUT)/60000) ~> AddNewColumns\nAddNewColumns derive(DPRT_DELAY_DUR_D0_IND = iif(DEP_VAR>0||isNull(ACTL_OOOI_OUT), 0, 1),\n\t\tDPRT_DELAY_DUR_D15_IND = iif(DEP_VAR>15||isNull(ACTL_OOOI_OUT), 0, 1),\n\t\tARRVL_DELAY_DUR_A0_IND = iif(ARRVL_VAR>0||isNull(ACTL_OOOI_IN), 0, 1),\n\t\tARRVL_DELAY_DUR_A14_IND = iif(ARRVL_VAR>14||isNull(ACTL_OOOI_IN), 0, 1),\n\t\tBLK_DUR_B0_IND = iif(ACTL_BLK_DUR>0||isNull(ACTL_OOOI_IN), 0, 1),\n\t\tSCHDD_FLT_DUR = '',\n\t\trow_num = $row_num+1) ~> AddNewColumns2\nRemoveIATAICAO4, FilterActvInd lookup(ACTL_DPTR_AIR_PORT == ARPT_IATA_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIATA5\nLookupIATA5 select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_ARRVL_ARPT_ID,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tIATA_ARPT_ID = ARPT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns5\nRemoveColumns5, FilterActvInd lookup(ACTL_DPTR_AIR_PORT == ARPT_ICAO_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupICAO5\nLookupICAO5 derive(ACTL_DPTR_ARPT_ID = iif(isNull(IATA_ARPT_ID), ARPT_ID, IATA_ARPT_ID)) ~> AddActlDptrID\nAddActlDptrID select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_ARRVL_ARPT_ID,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tACTL_DPTR_ARPT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveIATAICAO5\nDoesntExists window(over(row_num),\n\tasc(row_num, true),\n\tFLGHT_ID = $row_num + rowNumber()) ~> SetRowNumber\nAddNewColumns2, CLNDR lookup(FLT_DT == TheDate,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCLNDR\nLookupCLNDR select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_ARRVL_ARPT_ID,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tACTL_DPTR_ARPT_ID,\n\t\tDEP_VAR,\n\t\tARRVL_VAR,\n\t\tSCHDD_BLK_DUR,\n\t\tACTL_BLK_DUR,\n\t\tACTL_FLGHT_DUR,\n\t\tDPRT_DELAY_DUR_D0_IND,\n\t\tDPRT_DELAY_DUR_D15_IND,\n\t\tARRVL_DELAY_DUR_A0_IND,\n\t\tARRVL_DELAY_DUR_A14_IND,\n\t\tBLK_DUR_B0_IND,\n\t\tSCHDD_FLT_DUR,\n\t\trow_num,\n\t\tCLNDR_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveCLNDRColumns\nRemoveCLNDRColumns, Flights exists(iif(FLT_NUM == FLGHT_NUM\n\t&& CLNDR_ID == toString(FLGHT_DT_ID) \n\t&& (SCHDD_ARRVL_AIR_PORT == SCHDD_ARRVL_ARPT_CD\n\t|| SCHDD_DPTR_AIR_PORT == SCHDD_DRPT_ARPT_CD),true(),false()),\n\tnegate:true,\n\tbroadcast: 'auto')~> DoesntExists\nSetRowNumber, FlightDelay join(RemoveCLNDRColumns@FLT_ID == FlightDelay@FLT_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LeftJoinWithDelay\nLeftJoinWithDelay derive({UPDTD_TIME-STMP} = currentTimestamp()) ~> AddTimeStamp\nAddTimeStamp sink(input(\n\t\tFLGHT_ID as integer,\n\t\tFLGHT_DT_ID as long,\n\t\tFLGHT_NUM as string,\n\t\tFLGHT_TYP as string,\n\t\tAIR_CRAFT_RGSTRN_NUM as string,\n\t\tAIR_CRAFT_TYP as string,\n\t\tSCHDD_DPRT_TS_UTC as timestamp,\n\t\tSCHDD_ARRVL_TS_UTC as timestamp,\n\t\tESTD_DPRT_TS_UTC as timestamp,\n\t\tESTD_ARRVL_TS_UTC as timestamp,\n\t\tACTL_OOOI_OUT_TS_UTC as timestamp,\n\t\tACTL_OOOI_OFF_TS_UTC as timestamp,\n\t\tACTL_OOOI_ON_TS_UTC as timestamp,\n\t\tACTL_OOOI_IN_TS_UTC as timestamp,\n\t\tBASE_ARPT_CD as string,\n\t\tBASE_ARPT_ID as integer,\n\t\tSCHDD_DRPT_ARPT_CD as string,\n\t\tSCHDD_DRPT_ARPT_ID as integer,\n\t\tSCHDD_ARRVL_ARPT_CD as string,\n\t\tSCHDD_ARRVL_ARPT_ID as integer,\n\t\tACTL_ARRVL_ARPT_CD as string,\n\t\tACTL_ARRVL_ARPT_ID as integer,\n\t\tACTL_DPTR_ARPT_CD as string,\n\t\tACTL_DPTR_ARPT_ID as integer,\n\t\tFUEL_IN as double,\n\t\tFUEL_OUT as integer,\n\t\tFUEL_UPLIFT as integer,\n\t\tCRGO_WT as integer,\n\t\tMAINT_LOG as integer,\n\t\tNOTES as string,\n\t\tIS_CNCLD as boolean,\n\t\tIS_VERFD as boolean,\n\t\tDEP_VAR as integer,\n\t\tARRVL_VAR as integer,\n\t\tSCHDD_BLK_DUR as integer,\n\t\tACTL_BLK_DUR as integer,\n\t\tACTL_FLGHT_DUR as integer,\n\t\tDPRT_DELAY_DUR_D0_IND as integer,\n\t\tDPRT_DELAY_DUR_D15_IND as integer,\n\t\tARRVL_DELAY_DUR_A0_IND as integer,\n\t\tARRVL_DELAY_DUR_A14_IND as integer,\n\t\tBLK_DUR_B0_IND as integer,\n\t\tSCHDD_FLT_DUR as string,\n\t\tDELAY_TYP as string,\n\t\tDELAY_DUR as integer,\n\t\tDELAY_CD as string,\n\t\tDELAY_DESC as string,\n\t\tUPDT_TIME_STMP as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tFLGHT_ID,\n\t\tFLGHT_DT_ID = CLNDR_ID,\n\t\tFLGHT_NUM = FLT_NUM,\n\t\tFLGHT_TYP = FLT_TYPE,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYP = AIR_CRAFT_TYPE,\n\t\tSCHDD_DPRT_TS_UTC = SCHDD_DPTR,\n\t\tSCHDD_ARRVL_TS_UTC = SCHDD_ARRVL,\n\t\tESTD_DPRT_TS_UTC = ESTD_DPTR,\n\t\tESTD_ARRVL_TS_UTC = ESTD_ARRVL,\n\t\tACTL_OOOI_OUT_TS_UTC = ACTL_OOOI_OUT,\n\t\tACTL_OOOI_OFF_TS_UTC = ACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON_TS_UTC = ACTL_OOOI_ON,\n\t\tACTL_OOOI_IN_TS_UTC = ACTL_OOOI_IN,\n\t\tBASE_ARPT_CD = BASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tSCHDD_DRPT_ARPT_CD = SCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tSCHDD_ARRVL_ARPT_CD = SCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tACTL_ARRVL_ARPT_CD = ACTL_ARRVL_AIR_PORT,\n\t\tACTL_ARRVL_ARPT_ID,\n\t\tACTL_DPTR_ARPT_CD = ACTL_DPTR_AIR_PORT,\n\t\tACTL_DPTR_ARPT_ID,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tCRGO_WT = CRGO_WGT,\n\t\tMAINT_LOG = MAINT_LOG_PG,\n\t\tNOTES,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tDEP_VAR,\n\t\tARRVL_VAR,\n\t\tSCHDD_BLK_DUR,\n\t\tACTL_BLK_DUR,\n\t\tACTL_FLGHT_DUR,\n\t\tDPRT_DELAY_DUR_D0_IND,\n\t\tDPRT_DELAY_DUR_D15_IND,\n\t\tARRVL_DELAY_DUR_A0_IND,\n\t\tARRVL_DELAY_DUR_A14_IND,\n\t\tBLK_DUR_B0_IND,\n\t\tSCHDD_FLT_DUR,\n\t\tDELAY_TYP = DLAY_TYP,\n\t\tDELAY_DUR = DURTN_MNT,\n\t\tDELAY_CD = DLAY_CD,\n\t\tDELAY_DESC = DLAY_CD_NAME,\n\t\tUPDT_TIME_STMP = {UPDTD_TIME-STMP}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Write"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_f_flights_ops')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/f_flights_load_update')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Flights"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_s_flights",
								"type": "DatasetReference"
							},
							"name": "StagingFlights"
						},
						{
							"dataset": {
								"referenceName": "sql_d_aprt",
								"type": "DatasetReference"
							},
							"name": "ARPT"
						},
						{
							"dataset": {
								"referenceName": "sql_d_clndr",
								"type": "DatasetReference"
							},
							"name": "CLNDR"
						},
						{
							"dataset": {
								"referenceName": "sql_f_flights_ops",
								"type": "DatasetReference"
							},
							"name": "Flights"
						},
						{
							"dataset": {
								"referenceName": "sql_s_flights_delay",
								"type": "DatasetReference"
							},
							"name": "FlightDelay"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_f_flights_ops",
								"type": "DatasetReference"
							},
							"name": "Update"
						}
					],
					"transformations": [
						{
							"name": "FilterFlightType"
						},
						{
							"name": "LookupIATA"
						},
						{
							"name": "FilterActvInd"
						},
						{
							"name": "RemoveColumns1"
						},
						{
							"name": "LookupICAO"
						},
						{
							"name": "AddBaseAirportID"
						},
						{
							"name": "RemoveIATAICAO"
						},
						{
							"name": "LookupIATA2"
						},
						{
							"name": "RemoveColumns2"
						},
						{
							"name": "LookupICAO2"
						},
						{
							"name": "AddSchdDptrID"
						},
						{
							"name": "RemoveIATAICAO2"
						},
						{
							"name": "LookupIATA3"
						},
						{
							"name": "RemoveColumns3"
						},
						{
							"name": "LookupICAO3"
						},
						{
							"name": "AddSchdArrID"
						},
						{
							"name": "RemoveIATAICAO3"
						},
						{
							"name": "LookupIATA4"
						},
						{
							"name": "RemoveColumns4"
						},
						{
							"name": "LookupICAO4"
						},
						{
							"name": "AddActArrID"
						},
						{
							"name": "RemoveIATAICAO4"
						},
						{
							"name": "AddNewColumns"
						},
						{
							"name": "AddNewColumns2"
						},
						{
							"name": "LookupIATA5"
						},
						{
							"name": "RemoveColumns5"
						},
						{
							"name": "LookupICAO5"
						},
						{
							"name": "AddActlDptrID"
						},
						{
							"name": "RemoveIATAICAO5"
						},
						{
							"name": "LookupCLNDR"
						},
						{
							"name": "RemoveCLNDRColumns"
						},
						{
							"name": "Exists"
						},
						{
							"name": "AlterRowUpdate"
						},
						{
							"name": "LeftJoinFlightsDelay"
						},
						{
							"name": "AddTimeStamp"
						}
					],
					"script": "parameters{\n\tdate as string ('1899-01-01')\n}\nsource(output(\n\t\tACTL_ARRVL_AIR_PORT as string,\n\t\tACTL_DPTR_AIR_PORT as string,\n\t\tACTL_OOOI_IN as timestamp,\n\t\tACTL_OOOI_OFF as timestamp,\n\t\tACTL_OOOI_ON as timestamp,\n\t\tACTL_OOOI_OUT as timestamp,\n\t\tAIR_CRAFT_RGSTRN_NUM as string,\n\t\tAIR_CRAFT_TYPE as string,\n\t\tBASE_AIR_PORT as string,\n\t\tCRGO_WGT as integer,\n\t\tESTD_ARRVL as timestamp,\n\t\tESTD_DPTR as timestamp,\n\t\tFLT_DT as date,\n\t\tFLT_ID as long,\n\t\tFLT_NUM as string,\n\t\tFLT_TYPE as string,\n\t\tFUEL_IN as double,\n\t\tFUEL_OUT as double,\n\t\tFUEL_UPLIFT as integer,\n\t\tIS_CNCLD as boolean,\n\t\tIS_VERFD as boolean,\n\t\tMAINT_LOG_PG as string,\n\t\tNOTES as string,\n\t\tSCHDD_ARRVL as timestamp,\n\t\tSCHDD_ARRVL_AIR_PORT as string,\n\t\tSCHDD_DPTR as timestamp,\n\t\tSCHDD_DPTR_AIR_PORT as string,\n\t\tUPDTD_AT as timestamp,\n\t\tADF_TIME_STMP as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT * FROM [dbo].[S_FLIGHTS] where  UPDTD_AT >= '\"+$date+\"' and UPDTD_AT <  CAST(GETDATE() AS DATE)\"),\n\tformat: 'query') ~> StagingFlights\nsource(output(\n\t\tARPT_ID as integer,\n\t\tARPT_IATA_CD as string,\n\t\tARPT_ICAO_CD as string,\n\t\tARPT_NAME as string,\n\t\tARPT_CNTRY as string,\n\t\tARPT_CITY as string,\n\t\tARPT_LAT as decimal(8,6),\n\t\tARPT_LONG as decimal(9,6),\n\t\tARPT_ALTD as decimal(6,2),\n\t\tARPT_UTC_OFSET as decimal(2,2),\n\t\tARPT_DST_CD as string,\n\t\tARPT_TZONE as string,\n\t\tEFF_STRT_DT as timestamp,\n\t\tEFF_END_DT as timestamp,\n\t\tACTV_IND as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ARPT\nsource(output(\n\t\tCLNDR_ID as string,\n\t\tTheDate as date,\n\t\tTheDay as integer,\n\t\tTheDaySuffix as string,\n\t\tTheDayName as string,\n\t\tTheDayOfWeek as integer,\n\t\tTheDayOfWeekInMonth as integer,\n\t\tTheDayOfYear as integer,\n\t\tIsWeekend as integer,\n\t\tTheWeek as integer,\n\t\tTheISOweek as integer,\n\t\tTheFirstOfWeek as date,\n\t\tTheLastOfWeek as date,\n\t\tTheWeekOfMonth as integer,\n\t\tTheMonth as integer,\n\t\tTheMonthName as string,\n\t\tTheFirstOfMonth as date,\n\t\tTheLastOfMonth as date,\n\t\tTheFirstOfNextMonth as date,\n\t\tTheLastOfNextMonth as date,\n\t\tTheQuarter as integer,\n\t\tTheFirstOfQuarter as date,\n\t\tTheLastOfQuarter as date,\n\t\tTheYear as integer,\n\t\tTheISOYear as integer,\n\t\tTheFirstOfYear as date,\n\t\tTheLastOfYear as date,\n\t\tIsLeapYear as boolean,\n\t\tHas53Weeks as integer,\n\t\tHas53ISOWeeks as integer,\n\t\tMMYYYY as string,\n\t\tStyle101 as string,\n\t\tStyle103 as string,\n\t\tStyle112 as string,\n\t\tStyle120 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CLNDR\nsource(output(\n\t\tFLGHT_ID as integer,\n\t\tFLGHT_DT_ID as integer,\n\t\tFLGHT_NUM as string,\n\t\tFLGHT_TYP as string,\n\t\tAIR_CRAFT_RGSTRN_NUM as string,\n\t\tAIR_CRAFT_TYP as string,\n\t\tSCHDD_DPRT_TS_UTC as timestamp,\n\t\tSCHDD_ARRVL_TS_UTC as timestamp,\n\t\tESTD_DPRT_TS_UTC as timestamp,\n\t\tESTD_ARRVL_TS_UTC as timestamp,\n\t\tACTL_OOOI_OUT_TS_UTC as timestamp,\n\t\tACTL_OOOI_OFF_TS_UTC as timestamp,\n\t\tACTL_OOOI_ON_TS_UTC as timestamp,\n\t\tACTL_OOOI_IN_TS_UTC as timestamp,\n\t\tBASE_ARPT_CD as string,\n\t\tBASE_ARPT_ID as integer,\n\t\tSCHDD_DRPT_ARPT_CD as string,\n\t\tSCHDD_DRPT_ARPT_ID as integer,\n\t\tSCHDD_ARRVL_ARPT_CD as string,\n\t\tSCHDD_ARRVL_ARPT_ID as integer,\n\t\tACTL_ARRVL_ARPT_CD as string,\n\t\tACTL_ARRVL_ARPT_ID as integer,\n\t\tACTL_DPTR_ARPT_CD as string,\n\t\tACTL_DPTR_ARPT_ID as integer,\n\t\tFUEL_IN as string,\n\t\tFUEL_OUT as integer,\n\t\tFUEL_UPLIFT as integer,\n\t\tCRGO_WT as integer,\n\t\tMAINT_LOG as integer,\n\t\tNOTES as string,\n\t\tIS_CNCLD as boolean,\n\t\tIS_VERFD as boolean,\n\t\tDEP_VAR as integer,\n\t\tARRVL_VAR as integer,\n\t\tSCHDD_BLK_DUR as integer,\n\t\tACTL_BLK_DUR as integer,\n\t\tACTL_FLGHT_DUR as integer,\n\t\tDPRT_DELAY_DUR_D0_IND as integer,\n\t\tDPRT_DELAY_DUR_D15_IND as integer,\n\t\tARRVL_DELAY_DUR_A0_IND as integer,\n\t\tARRVL_DELAY_DUR_A14_IND as integer,\n\t\tBLK_DUR_B0_IND as integer,\n\t\tSCHDD_FLT_DUR as string,\n\t\tDELAY_TYP as string,\n\t\tDELAY_DUR as integer,\n\t\tDELAY_CD as string,\n\t\tDELAY_DESC as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Flights\nsource(output(\n\t\tFLT_ID as long,\n\t\tDLAY_TYP as string,\n\t\tDURTN_MNT as integer,\n\t\tDLAY_CD as string,\n\t\tDLAY_CD_NAME as string,\n\t\tADF_TIME_STMP as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> FlightDelay\nStagingFlights filter(FLT_TYPE <=>'flight') ~> FilterFlightType\nFilterFlightType, FilterActvInd lookup(BASE_AIR_PORT == ARPT_IATA_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIATA\nARPT filter(ACTV_IND == 'Y') ~> FilterActvInd\nLookupIATA select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tUPDTD_AT,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tIATA_ARPT_ID = ARPT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns1\nRemoveColumns1, FilterActvInd lookup(BASE_AIR_PORT == ARPT_ICAO_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupICAO\nLookupICAO derive(BASE_ARPT_ID = iif(isNull(IATA_ARPT_ID), ARPT_ID, IATA_ARPT_ID)) ~> AddBaseAirportID\nAddBaseAirportID select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tUPDTD_AT,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveIATAICAO\nRemoveIATAICAO, FilterActvInd lookup(SCHDD_DPTR_AIR_PORT == ARPT_IATA_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIATA2\nLookupIATA2 select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tUPDTD_AT,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tIATA_ARPT_ID = ARPT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns2\nRemoveColumns2, FilterActvInd lookup(ACTL_DPTR_AIR_PORT == ARPT_ICAO_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupICAO2\nLookupICAO2 derive(SCHDD_DRPT_ARPT_ID = iif(isNull(IATA_ARPT_ID), ARPT_ID, IATA_ARPT_ID)) ~> AddSchdDptrID\nAddSchdDptrID select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveIATAICAO2\nRemoveIATAICAO2, FilterActvInd lookup(ACTL_ARRVL_AIR_PORT == ARPT_IATA_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIATA3\nLookupIATA3 select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tIATA_ARPT_ID = ARPT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns3\nRemoveColumns3, FilterActvInd lookup(ACTL_ARRVL_AIR_PORT == ARPT_ICAO_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupICAO3\nLookupICAO3 derive(SCHDD_ARRVL_ARPT_ID = iif(isNull(IATA_ARPT_ID), ARPT_ID, IATA_ARPT_ID)) ~> AddSchdArrID\nAddSchdArrID select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveIATAICAO3\nRemoveIATAICAO3, FilterActvInd lookup(ACTL_ARRVL_AIR_PORT == ARPT_IATA_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIATA4\nLookupIATA4 select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tIATA_ARPT_ID = ARPT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns4\nRemoveColumns4, FilterActvInd lookup(ACTL_ARRVL_AIR_PORT == ARPT_ICAO_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupICAO4\nLookupICAO4 derive(ACTL_ARRVL_ARPT_ID = iif(isNull(IATA_ARPT_ID), ARPT_ID, IATA_ARPT_ID)) ~> AddActArrID\nAddActArrID select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_ARRVL_ARPT_ID,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveIATAICAO4\nRemoveIATAICAO5 derive(DEP_VAR = (ACTL_OOOI_OUT - SCHDD_DPTR)/60000,\n\t\tARRVL_VAR = (ACTL_OOOI_IN - SCHDD_ARRVL)/60000,\n\t\tSCHDD_BLK_DUR = (SCHDD_ARRVL - SCHDD_DPTR)/60000,\n\t\tACTL_BLK_DUR = (ACTL_OOOI_IN - ACTL_OOOI_OUT)/60000,\n\t\tACTL_FLGHT_DUR = (ACTL_OOOI_IN - ACTL_OOOI_OUT)/60000) ~> AddNewColumns\nAddNewColumns derive(DPRT_DELAY_DUR_D0_IND = iif(DEP_VAR>0||isNull(ACTL_OOOI_OUT), 0, 1),\n\t\tDPRT_DELAY_DUR_D15_IND = iif(DEP_VAR>15||isNull(ACTL_OOOI_OUT), 0, 1),\n\t\tARRVL_DELAY_DUR_A0_IND = iif(ARRVL_VAR>0||isNull(ACTL_OOOI_IN), 0, 1),\n\t\tARRVL_DELAY_DUR_A14_IND = iif(ARRVL_VAR>14||isNull(ACTL_OOOI_IN), 0, 1),\n\t\tBLK_DUR_B0_IND = iif(ACTL_BLK_DUR>0||isNull(ACTL_OOOI_IN), 0, 1),\n\t\tSCHDD_FLT_DUR = '') ~> AddNewColumns2\nRemoveIATAICAO4, FilterActvInd lookup(ACTL_DPTR_AIR_PORT == ARPT_IATA_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIATA5\nLookupIATA5 select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_ARRVL_ARPT_ID,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tIATA_ARPT_ID = ARPT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns5\nRemoveColumns5, FilterActvInd lookup(ACTL_DPTR_AIR_PORT == ARPT_ICAO_CD,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupICAO5\nLookupICAO5 derive(ACTL_DPTR_ARPT_ID = iif(isNull(IATA_ARPT_ID), ARPT_ID, IATA_ARPT_ID)) ~> AddActlDptrID\nAddActlDptrID select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_ARRVL_ARPT_ID,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tACTL_DPTR_ARPT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveIATAICAO5\nAddNewColumns2, CLNDR lookup(FLT_DT == TheDate,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCLNDR\nLookupCLNDR select(mapColumn(\n\t\tACTL_ARRVL_AIR_PORT,\n\t\tACTL_ARRVL_ARPT_ID,\n\t\tACTL_DPTR_AIR_PORT,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYPE,\n\t\tBASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tCRGO_WGT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT,\n\t\tFLT_ID,\n\t\tFLT_NUM,\n\t\tFLT_TYPE,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tMAINT_LOG_PG,\n\t\tNOTES,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tUPDTD_AT,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID,\n\t\tACTL_DPTR_ARPT_ID,\n\t\tDEP_VAR,\n\t\tARRVL_VAR,\n\t\tSCHDD_BLK_DUR,\n\t\tACTL_BLK_DUR,\n\t\tACTL_FLGHT_DUR,\n\t\tDPRT_DELAY_DUR_D0_IND,\n\t\tDPRT_DELAY_DUR_D15_IND,\n\t\tARRVL_DELAY_DUR_A0_IND,\n\t\tARRVL_DELAY_DUR_A14_IND,\n\t\tBLK_DUR_B0_IND,\n\t\tSCHDD_FLT_DUR,\n\t\tCLNDR_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveCLNDRColumns\nRemoveCLNDRColumns, Flights exists(iif(FLT_NUM == FLGHT_NUM\n\t&& CLNDR_ID == toString(FLGHT_DT_ID)\n\t&& (SCHDD_ARRVL_AIR_PORT == SCHDD_ARRVL_ARPT_CD\n\t|| SCHDD_DPTR_AIR_PORT == SCHDD_DRPT_ARPT_CD),true(),false()),\n\tnegate:false,\n\tbroadcast: 'auto')~> Exists\nAddTimeStamp alterRow(updateIf(true())) ~> AlterRowUpdate\nExists, FlightDelay join(RemoveCLNDRColumns@FLT_ID == FlightDelay@FLT_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LeftJoinFlightsDelay\nLeftJoinFlightsDelay derive(UPDTD_TIME_STMP = currentTimestamp()) ~> AddTimeStamp\nAlterRowUpdate sink(input(\n\t\tFLGHT_ID as integer,\n\t\tFLGHT_DT_ID as long,\n\t\tFLGHT_NUM as string,\n\t\tFLGHT_TYP as string,\n\t\tAIR_CRAFT_RGSTRN_NUM as string,\n\t\tAIR_CRAFT_TYP as string,\n\t\tSCHDD_DPRT_TS_UTC as timestamp,\n\t\tSCHDD_ARRVL_TS_UTC as timestamp,\n\t\tESTD_DPRT_TS_UTC as timestamp,\n\t\tESTD_ARRVL_TS_UTC as timestamp,\n\t\tACTL_OOOI_OUT_TS_UTC as timestamp,\n\t\tACTL_OOOI_OFF_TS_UTC as timestamp,\n\t\tACTL_OOOI_ON_TS_UTC as timestamp,\n\t\tACTL_OOOI_IN_TS_UTC as timestamp,\n\t\tBASE_ARPT_CD as string,\n\t\tBASE_ARPT_ID as integer,\n\t\tSCHDD_DRPT_ARPT_CD as string,\n\t\tSCHDD_DRPT_ARPT_ID as integer,\n\t\tSCHDD_ARRVL_ARPT_CD as string,\n\t\tSCHDD_ARRVL_ARPT_ID as integer,\n\t\tACTL_ARRVL_ARPT_CD as string,\n\t\tACTL_ARRVL_ARPT_ID as integer,\n\t\tACTL_DPTR_ARPT_CD as string,\n\t\tACTL_DPTR_ARPT_ID as integer,\n\t\tFUEL_IN as double,\n\t\tFUEL_OUT as integer,\n\t\tFUEL_UPLIFT as integer,\n\t\tCRGO_WT as integer,\n\t\tMAINT_LOG as integer,\n\t\tNOTES as string,\n\t\tIS_CNCLD as boolean,\n\t\tIS_VERFD as boolean,\n\t\tDEP_VAR as integer,\n\t\tARRVL_VAR as integer,\n\t\tSCHDD_BLK_DUR as integer,\n\t\tACTL_BLK_DUR as integer,\n\t\tACTL_FLGHT_DUR as integer,\n\t\tDPRT_DELAY_DUR_D0_IND as integer,\n\t\tDPRT_DELAY_DUR_D15_IND as integer,\n\t\tARRVL_DELAY_DUR_A0_IND as integer,\n\t\tARRVL_DELAY_DUR_A14_IND as integer,\n\t\tBLK_DUR_B0_IND as integer,\n\t\tSCHDD_FLT_DUR as string,\n\t\tDELAY_TYP as string,\n\t\tDELAY_DUR as integer,\n\t\tDELAY_CD as string,\n\t\tDELAY_DESC as string,\n\t\tUPDT_TIME_STMP as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['FLGHT_NUM','FLGHT_DT_ID','SCHDD_DRPT_ARPT_ID','SCHDD_ARRVL_ARPT_ID','DELAY_TYP','DELAY_CD'],\n\tformat: 'table',\n\tmapColumn(\n\t\tFLGHT_DT_ID = CLNDR_ID,\n\t\tFLGHT_NUM = FLT_NUM,\n\t\tFLGHT_TYP = FLT_TYPE,\n\t\tAIR_CRAFT_RGSTRN_NUM,\n\t\tAIR_CRAFT_TYP = AIR_CRAFT_TYPE,\n\t\tSCHDD_DPRT_TS_UTC = SCHDD_DPTR,\n\t\tSCHDD_ARRVL_TS_UTC = SCHDD_ARRVL,\n\t\tESTD_DPRT_TS_UTC = ESTD_DPTR,\n\t\tESTD_ARRVL_TS_UTC = ESTD_ARRVL,\n\t\tACTL_OOOI_OUT_TS_UTC = ACTL_OOOI_OUT,\n\t\tACTL_OOOI_OFF_TS_UTC = ACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON_TS_UTC = ACTL_OOOI_ON,\n\t\tACTL_OOOI_IN_TS_UTC = ACTL_OOOI_IN,\n\t\tBASE_ARPT_CD = BASE_AIR_PORT,\n\t\tBASE_ARPT_ID,\n\t\tSCHDD_DRPT_ARPT_CD = SCHDD_DPTR_AIR_PORT,\n\t\tSCHDD_DRPT_ARPT_ID,\n\t\tSCHDD_ARRVL_ARPT_CD = SCHDD_ARRVL_AIR_PORT,\n\t\tSCHDD_ARRVL_ARPT_ID,\n\t\tACTL_ARRVL_ARPT_CD = ACTL_ARRVL_AIR_PORT,\n\t\tACTL_ARRVL_ARPT_ID,\n\t\tACTL_DPTR_ARPT_CD = ACTL_DPTR_AIR_PORT,\n\t\tACTL_DPTR_ARPT_ID,\n\t\tFUEL_IN,\n\t\tFUEL_OUT,\n\t\tFUEL_UPLIFT,\n\t\tCRGO_WT = CRGO_WGT,\n\t\tMAINT_LOG = MAINT_LOG_PG,\n\t\tNOTES,\n\t\tIS_CNCLD,\n\t\tIS_VERFD,\n\t\tDEP_VAR,\n\t\tARRVL_VAR,\n\t\tSCHDD_BLK_DUR,\n\t\tACTL_BLK_DUR,\n\t\tACTL_FLGHT_DUR,\n\t\tDPRT_DELAY_DUR_D0_IND,\n\t\tDPRT_DELAY_DUR_D15_IND,\n\t\tARRVL_DELAY_DUR_A0_IND,\n\t\tARRVL_DELAY_DUR_A14_IND,\n\t\tBLK_DUR_B0_IND,\n\t\tSCHDD_FLT_DUR,\n\t\tDELAY_TYP = DLAY_TYP,\n\t\tDELAY_DUR = DURTN_MNT,\n\t\tDELAY_CD = DLAY_CD,\n\t\tDELAY_DESC = DLAY_CD_NAME,\n\t\tUPDT_TIME_STMP = UPDTD_TIME_STMP\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Update"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_f_flights_ops')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/s_arpt_load')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Airport"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "eal_src_arpt",
								"type": "DatasetReference"
							},
							"name": "ArptBlob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_s_airports",
								"type": "DatasetReference"
							},
							"name": "StgAirports"
						}
					],
					"transformations": [
						{
							"name": "AddADFColumns"
						},
						{
							"name": "FilterByDate"
						}
					],
					"script": "parameters{\n\trun_id as string (''),\n\tdate as string ('1899-01-01 00:00:00.000')\n}\nsource(output(\n\t\tARPT_NAME as string,\n\t\tARPT_CITY as string,\n\t\tARPT_CNTRY as string,\n\t\tARPT_IATA_CD as string,\n\t\tARPT_ICAO_CD as string,\n\t\tARPT_LAT as double,\n\t\tARPT_LONG as double,\n\t\tARPT_ALTD as string,\n\t\tARPT_UTC_OFSET as double,\n\t\tARPT_DST as string,\n\t\tARPT_TZONE as string,\n\t\tLAST_UPDT_DT as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> ArptBlob\nFilterByDate derive(ADF_RUN_ID = $run_id,\n\t\tADF_TIME_STMP = currentTimestamp()) ~> AddADFColumns\nArptBlob filter(toDate(LAST_UPDT_DT)  >= toDate($date) && toDate(LAST_UPDT_DT) < currentDate()) ~> FilterByDate\nAddADFColumns sink(input(\n\t\tARPT_NAME as string,\n\t\tARPT_CITY as string,\n\t\tARPT_CNTRY as string,\n\t\tARPT_IATA_CD as string,\n\t\tARPT_ICAO_CD as string,\n\t\tARPT_LAT as double,\n\t\tARPT_LONG as double,\n\t\tARPT_ALTD as integer,\n\t\tARPT_UTC_OFSET as double,\n\t\tARPT_DST as string,\n\t\tARPT_TZONE as string,\n\t\tLAST_UPDT_DT as date,\n\t\tADF_RUN_ID as string,\n\t\tADF_TIME_STMP as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tARPT_NAME,\n\t\tARPT_CITY,\n\t\tARPT_CNTRY,\n\t\tARPT_IATA_CD,\n\t\tARPT_ICAO_CD,\n\t\tARPT_LAT,\n\t\tARPT_LONG,\n\t\tARPT_ALTD,\n\t\tARPT_UTC_OFSET,\n\t\tARPT_DST,\n\t\tARPT_TZONE,\n\t\tLAST_UPDT_DT,\n\t\tADF_RUN_ID,\n\t\tADF_TIME_STMP\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> StgAirports"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/eal_src_arpt')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/s_equip_schd_load')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Equip Schd"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "eal_src_equipment_schd",
								"type": "DatasetReference"
							},
							"name": "StgEquipSchd"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_eqip_schd_rej",
								"type": "DatasetReference"
							},
							"name": "EquipReject"
						},
						{
							"dataset": {
								"referenceName": "sql_s_eqip_schd",
								"type": "DatasetReference"
							},
							"name": "EquipStg"
						}
					],
					"transformations": [
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "AddADFColumns"
						},
						{
							"name": "AddADFColumns2"
						},
						{
							"name": "FilterByDate"
						}
					],
					"script": "parameters{\n\trun_id as string (''),\n\tdate as string ('2021-02-06')\n}\nsource(output(\n\t\teqp_sched_id as string,\n\t\tac_registration as string,\n\t\tstatus_code as string,\n\t\tstatus_name as string,\n\t\tstatus_description as string,\n\t\tstart_time as string,\n\t\tend_time as string,\n\t\tnotes as string,\n\t\tis_deleted as boolean,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> StgEquipSchd\nFilterByDate split(isNull(ac_registration) || iif(isNull(end_time), false(), iif(isNull(start_time), false(), start_time>end_time)),\n\tdisjoint: false) ~> ConditionalSplit1@(Reject, FilteredData)\nConditionalSplit1@Reject derive(REJECT_REASON = \"Data Validation Error\",\n\t\tADF_TIME_STMP = currentTimestamp(),\n\t\tADF_RUN_ID = $run_id) ~> AddADFColumns\nConditionalSplit1@FilteredData derive(ADF_TIME_STMP = currentTimestamp(),\n\t\tADF_RUN_ID = $run_id) ~> AddADFColumns2\nStgEquipSchd filter(toDate(updated_at)  >= toDate($date) && toDate(updated_at) < currentDate()) ~> FilterByDate\nAddADFColumns sink(input(\n\t\tEQP_SCHED_ID as integer,\n\t\tAC_RGSTRN as string,\n\t\tSTS_CD as string,\n\t\tSTS_NAME as string,\n\t\tSTS_DESC as string,\n\t\tSTRT_TIME as timestamp,\n\t\tEND_TIME as timestamp,\n\t\tNOTE as string,\n\t\tIS_DELD as boolean,\n\t\tUPDTD_AT as timestamp,\n\t\tREJECT_REASON as string,\n\t\tADF_TIME_STMP as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tEQP_SCHED_ID = eqp_sched_id,\n\t\tAC_RGSTRN = ac_registration,\n\t\tSTS_CD = status_code,\n\t\tSTS_NAME = status_name,\n\t\tSTS_DESC = status_description,\n\t\tSTRT_TIME = start_time,\n\t\tEND_TIME = end_time,\n\t\tNOTE = notes,\n\t\tIS_DELD = is_deleted,\n\t\tUPDTD_AT = updated_at,\n\t\tREJECT_REASON,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> EquipReject\nAddADFColumns2 sink(input(\n\t\tEQP_SCHED_ID as integer,\n\t\tAC_RGSTRN as string,\n\t\tSTS_CD as string,\n\t\tSTS_NAME as string,\n\t\tSTS_DESC as string,\n\t\tSTRT_TIME as string,\n\t\tEND_TIME as string,\n\t\tNOTE as string,\n\t\tIS_DELD as boolean,\n\t\tUPDTD_AT as string,\n\t\tADF_TIME_STMP as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tEQP_SCHED_ID = eqp_sched_id,\n\t\tAC_RGSTRN = ac_registration,\n\t\tSTS_CD = status_code,\n\t\tSTS_NAME = status_name,\n\t\tSTS_DESC = status_description,\n\t\tSTRT_TIME = start_time,\n\t\tEND_TIME = end_time,\n\t\tNOTE = notes,\n\t\tIS_DELD = is_deleted,\n\t\tUPDTD_AT = updated_at,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> EquipStg"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/eal_src_equipment_schd')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/s_flights_delay_load')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Flights"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "eal_src_flights_delay",
								"type": "DatasetReference"
							},
							"name": "FlightsDelayBlob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_s_flights_delay",
								"type": "DatasetReference"
							},
							"name": "WriteStagingDelay"
						}
					],
					"transformations": [
						{
							"name": "AddADFColumns"
						}
					],
					"script": "parameters{\n\trun_id as string ('')\n}\nsource(output(\n\t\tflight_id as string,\n\t\tdelay_type as string,\n\t\tduration_mins as string,\n\t\tdelay_code as string,\n\t\tdelay_code_name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> FlightsDelayBlob\nFlightsDelayBlob derive(ADF_TIME_STMP = currentTimestamp(),\n\t\tADF_RUN_ID = $run_id) ~> AddADFColumns\nAddADFColumns sink(input(\n\t\tFLT_ID as long,\n\t\tDLAY_TYP as string,\n\t\tDURTN_MNT as integer,\n\t\tDLAY_CD as string,\n\t\tDLAY_CD_NAME as string,\n\t\tADF_TIME_STMP as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tFLT_ID = flight_id,\n\t\tDLAY_TYP = delay_type,\n\t\tDURTN_MNT = duration_mins,\n\t\tDLAY_CD = delay_code,\n\t\tDLAY_CD_NAME = delay_code_name,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> WriteStagingDelay"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/eal_src_flights_delay')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/s_flights_load')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Flights"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "eal_src_flights",
								"type": "DatasetReference"
							},
							"name": "BlobFlights"
						},
						{
							"dataset": {
								"referenceName": "eal_ac_bdavis_Airports",
								"type": "DatasetReference"
							},
							"name": "BdavisAirport"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_flights_rej",
								"type": "DatasetReference"
							},
							"name": "Reject"
						},
						{
							"dataset": {
								"referenceName": "sql_s_flights",
								"type": "DatasetReference"
							},
							"name": "StagingFlights"
						}
					],
					"transformations": [
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "IATAAirportExists"
						},
						{
							"name": "IATAAirportDoesntExists1"
						},
						{
							"name": "ICAOAirportExists"
						},
						{
							"name": "ExsistUnion"
						},
						{
							"name": "ICAOAirportdoesntExists"
						},
						{
							"name": "RejectUnion1"
						},
						{
							"name": "NullRejectReason"
						},
						{
							"name": "AddRejectReason2"
						},
						{
							"name": "ConditionalSplit2"
						},
						{
							"name": "FilterUnion1"
						},
						{
							"name": "ConditionalSplit3"
						},
						{
							"name": "IATAAirportDoesntExists2"
						},
						{
							"name": "ICAOAirportExists2"
						},
						{
							"name": "ICAOAirportdoesntExists2"
						},
						{
							"name": "AddRejectReason3"
						},
						{
							"name": "RejectUnion2"
						},
						{
							"name": "FilterUnion2"
						},
						{
							"name": "ConditionalSplit4"
						},
						{
							"name": "IATAAirportExists3"
						},
						{
							"name": "IATAAirportDoesntExists3"
						},
						{
							"name": "IATAAirportExists2"
						},
						{
							"name": "ICAOAirportExists3"
						},
						{
							"name": "ICAOAirportdoesntExists3"
						},
						{
							"name": "FilterUnion3"
						},
						{
							"name": "AddRejectReason4"
						},
						{
							"name": "ExistUnion2"
						},
						{
							"name": "ExistUnion3"
						},
						{
							"name": "RejectUnion3"
						},
						{
							"name": "SchdArrvlAirportNull"
						},
						{
							"name": "IATAAirportDoesntExists4"
						},
						{
							"name": "ICAOAirportExists4"
						},
						{
							"name": "ICAOAirportDoesntExists4"
						},
						{
							"name": "IATAAirportExists4"
						},
						{
							"name": "ExistUnion4"
						},
						{
							"name": "FilterUnion4"
						},
						{
							"name": "AddRejectReason5"
						},
						{
							"name": "SchdDptrAirportNull"
						},
						{
							"name": "IATAAirportDoesntExists5"
						},
						{
							"name": "ICAOAirportExists5"
						},
						{
							"name": "ICAOAirportDoesntExists5"
						},
						{
							"name": "IATAAirportExists5"
						},
						{
							"name": "ExistUnion5"
						},
						{
							"name": "FilterUnion5"
						},
						{
							"name": "AddRejectReason6"
						},
						{
							"name": "RejectUnion4"
						},
						{
							"name": "RejectUnion5"
						},
						{
							"name": "AddADFColumns"
						},
						{
							"name": "AddADFColumns2"
						},
						{
							"name": "TypeConvertion"
						},
						{
							"name": "RemoveDuplicates"
						},
						{
							"name": "FilterRows"
						},
						{
							"name": "ConditionalSplit5"
						},
						{
							"name": "OOOIRejectReason"
						},
						{
							"name": "ConditionalSplit6"
						},
						{
							"name": "EstSchdRejectReason"
						},
						{
							"name": "UnionNullRejection"
						},
						{
							"name": "UnionOOOIRejection"
						}
					],
					"script": "parameters{\n\trun_id as string (''),\n\tdate as string ('2021-03-15')\n}\nsource(output(\n\t\tflight_id as string,\n\t\tflight_number as string,\n\t\tflight_date as string,\n\t\taircraft_registration_number as string,\n\t\taircraft_type as string,\n\t\tscheduled_departure as string,\n\t\tscheduled_arrival as string,\n\t\testimated_departure as string,\n\t\testimated_arrival as string,\n\t\tactual_oooi_out as string,\n\t\tactual_oooi_off as string,\n\t\tactual_oooi_on as string,\n\t\tactual_oooi_in as string,\n\t\tbase_airport as string,\n\t\tscheduled_departure_airport as string,\n\t\tscheduled_arrival_airport as string,\n\t\tactual_departure_airport as string,\n\t\tactual_arrival_airport as string,\n\t\tis_verified as boolean,\n\t\tnotes as string,\n\t\tis_canceled as boolean,\n\t\tflight_type as string,\n\t\tcargo_weight as string,\n\t\tfuel_out as string,\n\t\tfuel_in as string,\n\t\tfuel_uplift as string,\n\t\tmaint_log_page as string,\n\t\tupdated_at as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> BlobFlights\nsource(output(\n\t\tAirport_Name as string,\n\t\tCity as string,\n\t\tCountry as string,\n\t\tIATA as string,\n\t\tICAO as string,\n\t\tLatitude as double,\n\t\tLongitude as double,\n\t\tAltitude as integer,\n\t\tUTC_offset as double,\n\t\tDST as string,\n\t\tTime_Zone as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> BdavisAirport\nFilterRows split(isNull(flight_date) || isNull(flight_id) || isNull(flight_number) || isNull(flight_type) || isNull(SCHDD_DPTR) || isNull(UPDTD_AT),\n\tdisjoint: false) ~> ConditionalSplit1@(NullReject, NullAcpt)\nConditionalSplit2@ActlArrvlAirportNotNull, BdavisAirport exists(actual_arrival_airport == IATA,\n\tnegate:false,\n\tbroadcast: 'auto')~> IATAAirportExists\nConditionalSplit2@ActlArrvlAirportNotNull, BdavisAirport exists(actual_arrival_airport == IATA,\n\tnegate:true,\n\tbroadcast: 'auto')~> IATAAirportDoesntExists1\nIATAAirportDoesntExists1, BdavisAirport exists(toString(actual_arrival_airport)  == ICAO,\n\tnegate:false,\n\tbroadcast: 'auto')~> ICAOAirportExists\nIATAAirportExists, ICAOAirportExists union(byName: true)~> ExsistUnion\nIATAAirportDoesntExists1, BdavisAirport exists(actual_arrival_airport == ICAO,\n\tnegate:true,\n\tbroadcast: 'auto')~> ICAOAirportdoesntExists\nAddRejectReason2, UnionOOOIRejection union(byName: true)~> RejectUnion1\nConditionalSplit1@NullReject derive(Reject_Reason = \"Null Error\") ~> NullRejectReason\nICAOAirportdoesntExists derive(Reject_Reason = \"Invalid ACTL_ARRVL Airport Name\") ~> AddRejectReason2\nConditionalSplit6@EstSchdAcpt split(isNull(actual_arrival_airport),\n\tdisjoint: false) ~> ConditionalSplit2@(ActlArrvlAirportNull, ActlArrvlAirportNotNull)\nExsistUnion, ConditionalSplit2@ActlArrvlAirportNull union(byName: true)~> FilterUnion1\nFilterUnion1 split(isNull(actual_departure_airport),\n\tdisjoint: false) ~> ConditionalSplit3@(ActlDptrAirportNull, ActlDptrAirportNotNull)\nConditionalSplit3@ActlDptrAirportNotNull, BdavisAirport exists(actual_departure_airport == IATA,\n\tnegate:true,\n\tbroadcast: 'auto')~> IATAAirportDoesntExists2\nIATAAirportDoesntExists2, BdavisAirport exists(actual_departure_airport == ICAO,\n\tnegate:false,\n\tbroadcast: 'auto')~> ICAOAirportExists2\nIATAAirportDoesntExists2, BdavisAirport exists(actual_departure_airport == ICAO,\n\tnegate:true,\n\tbroadcast: 'auto')~> ICAOAirportdoesntExists2\nICAOAirportdoesntExists2 derive(Reject_Reason = \"Actl Dptr Airport Name not found\") ~> AddRejectReason3\nRejectUnion1, AddRejectReason3 union(byName: true)~> RejectUnion2\nExistUnion2, ConditionalSplit3@ActlDptrAirportNull union(byName: true)~> FilterUnion2\nFilterUnion2 split(isNull(base_airport),\n\tdisjoint: false) ~> ConditionalSplit4@(BaseAirportNull, BaseAirportNotNull)\nConditionalSplit4@BaseAirportNotNull, BdavisAirport exists(base_airport == IATA,\n\tnegate:false,\n\tbroadcast: 'auto')~> IATAAirportExists3\nConditionalSplit4@BaseAirportNotNull, BdavisAirport exists(base_airport == IATA,\n\tnegate:true,\n\tbroadcast: 'auto')~> IATAAirportDoesntExists3\nConditionalSplit3@ActlDptrAirportNotNull, BdavisAirport exists(actual_departure_airport == IATA,\n\tnegate:false,\n\tbroadcast: 'auto')~> IATAAirportExists2\nIATAAirportDoesntExists3, BdavisAirport exists(base_airport == ICAO,\n\tnegate:false,\n\tbroadcast: 'auto')~> ICAOAirportExists3\nIATAAirportDoesntExists3, BdavisAirport exists(base_airport == ICAO,\n\tnegate:true,\n\tbroadcast: 'auto')~> ICAOAirportdoesntExists3\nExistUnion3, ConditionalSplit4@BaseAirportNull union(byName: true)~> FilterUnion3\nICAOAirportdoesntExists3 derive(Reject_Reason = \"Base Airport Name not found\") ~> AddRejectReason4\nICAOAirportExists2, IATAAirportExists2 union(byName: true)~> ExistUnion2\nIATAAirportExists3, ICAOAirportExists3 union(byName: true)~> ExistUnion3\nRejectUnion2, AddRejectReason4 union(byName: true)~> RejectUnion3\nFilterUnion3 split(isNull(scheduled_arrival_airport),\n\tdisjoint: false) ~> SchdArrvlAirportNull@(SchdArrvlAirportNull, SchdArrvlAirportNotNull)\nSchdArrvlAirportNull@SchdArrvlAirportNotNull, BdavisAirport exists(scheduled_arrival_airport == IATA,\n\tnegate:true,\n\tbroadcast: 'auto')~> IATAAirportDoesntExists4\nIATAAirportDoesntExists4, BdavisAirport exists(scheduled_arrival_airport == ICAO,\n\tnegate:false,\n\tbroadcast: 'auto')~> ICAOAirportExists4\nIATAAirportDoesntExists4, BdavisAirport exists(scheduled_arrival_airport == ICAO,\n\tnegate:true,\n\tbroadcast: 'auto')~> ICAOAirportDoesntExists4\nSchdArrvlAirportNull@SchdArrvlAirportNotNull, BdavisAirport exists(scheduled_arrival_airport == IATA,\n\tnegate:false,\n\tbroadcast: 'auto')~> IATAAirportExists4\nICAOAirportExists4, IATAAirportExists4 union(byName: true)~> ExistUnion4\nExistUnion4, SchdArrvlAirportNull@SchdArrvlAirportNull union(byName: true)~> FilterUnion4\nICAOAirportDoesntExists4 derive(Reject_Reason = \"Schd Arrvl Airport Name not found\") ~> AddRejectReason5\nFilterUnion4 split(isNull(scheduled_departure_airport),\n\tdisjoint: false) ~> SchdDptrAirportNull@(SchdDptrAirportNull, SchdDptrAirportNotNull)\nSchdDptrAirportNull@SchdDptrAirportNotNull, BdavisAirport exists(scheduled_departure_airport == IATA,\n\tnegate:true,\n\tbroadcast: 'auto')~> IATAAirportDoesntExists5\nIATAAirportDoesntExists5, BdavisAirport exists(scheduled_departure_airport == ICAO,\n\tnegate:false,\n\tbroadcast: 'auto')~> ICAOAirportExists5\nIATAAirportDoesntExists5, BdavisAirport exists(scheduled_departure_airport == ICAO,\n\tnegate:true,\n\tbroadcast: 'auto')~> ICAOAirportDoesntExists5\nSchdDptrAirportNull@SchdDptrAirportNotNull, BdavisAirport exists(scheduled_departure_airport == IATA,\n\tnegate:false,\n\tbroadcast: 'auto')~> IATAAirportExists5\nICAOAirportExists5, IATAAirportExists5 union(byName: true)~> ExistUnion5\nExistUnion5, SchdDptrAirportNull@SchdDptrAirportNull union(byName: true)~> FilterUnion5\nICAOAirportDoesntExists5 derive(Reject_Reason = \"Schd Dptr Airport Name not found\") ~> AddRejectReason6\nRejectUnion3, AddRejectReason5 union(byName: true)~> RejectUnion4\nRejectUnion4, AddRejectReason6 union(byName: true)~> RejectUnion5\nRejectUnion5 derive(ADF_TIME_STMP = currentTimestamp(),\n\t\tADF_RUN_ID = $run_id) ~> AddADFColumns\nFilterUnion5 derive(ADF_TIME_STMP = currentTimestamp(),\n\t\tADF_RUN_ID = $run_id) ~> AddADFColumns2\nBlobFlights derive(ACTL_OOOI_IN = toTimestamp(actual_oooi_in),\n\t\tACTL_OOOI_OFF = toTimestamp(actual_oooi_off),\n\t\tACTL_OOOI_ON = toTimestamp(actual_oooi_on),\n\t\tACTL_OOOI_OUT = toTimestamp(actual_oooi_out),\n\t\tESTD_ARRVL = toTimestamp(estimated_arrival),\n\t\tESTD_DPTR = toTimestamp(estimated_departure),\n\t\tSCHDD_ARRVL = toTimestamp(scheduled_arrival),\n\t\tSCHDD_DPTR = toTimestamp(scheduled_departure),\n\t\tUPDTD_AT = toTimestamp(updated_at)) ~> TypeConvertion\nTypeConvertion select(mapColumn(\n\t\tflight_id,\n\t\tflight_number,\n\t\tflight_date,\n\t\taircraft_registration_number,\n\t\taircraft_type,\n\t\tbase_airport,\n\t\tscheduled_departure_airport,\n\t\tscheduled_arrival_airport,\n\t\tactual_departure_airport,\n\t\tactual_arrival_airport,\n\t\tis_verified,\n\t\tnotes,\n\t\tis_canceled,\n\t\tflight_type,\n\t\tcargo_weight,\n\t\tfuel_out,\n\t\tfuel_in,\n\t\tfuel_uplift,\n\t\tmaint_log_page,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_DPTR,\n\t\tUPDTD_AT\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveDuplicates\nRemoveDuplicates filter(toDate(UPDTD_AT)  >= toDate($date) && toDate(UPDTD_AT) < (currentDate())) ~> FilterRows\nConditionalSplit1@NullAcpt split(iif(isNull(ACTL_OOOI_IN), false(), iif(isNull(ACTL_OOOI_ON), iif(isNull(ACTL_OOOI_OUT), false(), ACTL_OOOI_IN<ACTL_OOOI_OUT), ACTL_OOOI_IN<ACTL_OOOI_ON)) || \r\niif(isNull(ACTL_OOOI_OFF), iif(isNull(ACTL_OOOI_ON), false(),true()), iif(isNull(ACTL_OOOI_OUT), false(), ACTL_OOOI_OFF<ACTL_OOOI_OUT)) ||\r\niif(isNull(ACTL_OOOI_ON), iif(isNull(ACTL_OOOI_IN), iif(isNull(ACTL_OOOI_OFF), false(),true()),true()),iif(isNull(ACTL_OOOI_OFF), false(), ACTL_OOOI_ON<=ACTL_OOOI_OFF)) ||\r\niif(isNull(ACTL_OOOI_OUT), iif(isNull(ACTL_OOOI_OFF), false(), true()), false()),\n\tdisjoint: false) ~> ConditionalSplit5@(OOOIReject, OOOIAcpt)\nConditionalSplit5@OOOIReject derive(Reject_Reason = \"OOOI Validation Error\") ~> OOOIRejectReason\nConditionalSplit5@OOOIAcpt split(iif(isNull(ESTD_ARRVL), false() ,iif(isNull(ESTD_DPTR), false(), ESTD_ARRVL<ESTD_DPTR))  ||\r\niif(isNull(SCHDD_ARRVL), true(), SCHDD_ARRVL<SCHDD_DPTR),\n\tdisjoint: false) ~> ConditionalSplit6@(EstSchdReject, EstSchdAcpt)\nConditionalSplit6@EstSchdReject derive(Reject_Reason = \"Estimated or Scheduled Arrival Validation Error\") ~> EstSchdRejectReason\nEstSchdRejectReason, NullRejectReason union(byName: true)~> UnionNullRejection\nUnionNullRejection, OOOIRejectReason union(byName: true)~> UnionOOOIRejection\nAddADFColumns sink(input(\n\t\tACTL_ARRVL_AIR_PORT as string,\n\t\tACTL_DPTR_AIR_PORT as string,\n\t\tACTL_OOOI_IN as timestamp,\n\t\tACTL_OOOI_OFF as timestamp,\n\t\tACTL_OOOI_ON as timestamp,\n\t\tACTL_OOOI_OUT as timestamp,\n\t\tAIR_CRAFT_RGSTRN_NUM as string,\n\t\tAIR_CRAFT_TYPE as string,\n\t\tBASE_AIR_PORT as string,\n\t\tCRGO_WGT as integer,\n\t\tESTD_ARRVL as timestamp,\n\t\tESTD_DPTR as timestamp,\n\t\tFLT_DT as date,\n\t\tFLT_ID as long,\n\t\tFLT_NUM as string,\n\t\tFLT_TYPE as string,\n\t\tFUEL_IN as double,\n\t\tFUEL_OUT as double,\n\t\tFUEL_UPLIFT as integer,\n\t\tIS_CNCLD as boolean,\n\t\tIS_VERFD as boolean,\n\t\tMAINT_LOG_PG as string,\n\t\tNOTES as string,\n\t\tSCHDD_ARRVL as timestamp,\n\t\tSCHDD_ARRVL_AIR_PORT as string,\n\t\tSCHDD_DPTR as timestamp,\n\t\tSCHDD_DPTR_AIR_PORT as string,\n\t\tUPDTD_AT as timestamp,\n\t\tREJECT_REASON as string,\n\t\tADF_TIME_STMP as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tACTL_ARRVL_AIR_PORT = actual_arrival_airport,\n\t\tACTL_DPTR_AIR_PORT = actual_departure_airport,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM = aircraft_registration_number,\n\t\tAIR_CRAFT_TYPE = aircraft_type,\n\t\tBASE_AIR_PORT = base_airport,\n\t\tCRGO_WGT = cargo_weight,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT = flight_date,\n\t\tFLT_ID = flight_id,\n\t\tFLT_NUM = flight_number,\n\t\tFLT_TYPE = flight_type,\n\t\tFUEL_IN = fuel_in,\n\t\tFUEL_OUT = fuel_out,\n\t\tFUEL_UPLIFT = fuel_uplift,\n\t\tIS_CNCLD = is_canceled,\n\t\tIS_VERFD = is_verified,\n\t\tMAINT_LOG_PG = maint_log_page,\n\t\tNOTES = notes,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT = scheduled_arrival_airport,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT = scheduled_departure_airport,\n\t\tUPDTD_AT,\n\t\tREJECT_REASON = Reject_Reason,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Reject\nAddADFColumns2 sink(input(\n\t\tACTL_ARRVL_AIR_PORT as string,\n\t\tACTL_DPTR_AIR_PORT as string,\n\t\tACTL_OOOI_IN as timestamp,\n\t\tACTL_OOOI_OFF as timestamp,\n\t\tACTL_OOOI_ON as timestamp,\n\t\tACTL_OOOI_OUT as timestamp,\n\t\tAIR_CRAFT_RGSTRN_NUM as string,\n\t\tAIR_CRAFT_TYPE as string,\n\t\tBASE_AIR_PORT as string,\n\t\tCRGO_WGT as integer,\n\t\tESTD_ARRVL as timestamp,\n\t\tESTD_DPTR as timestamp,\n\t\tFLT_DT as date,\n\t\tFLT_ID as long,\n\t\tFLT_NUM as string,\n\t\tFLT_TYPE as string,\n\t\tFUEL_IN as double,\n\t\tFUEL_OUT as double,\n\t\tFUEL_UPLIFT as integer,\n\t\tIS_CNCLD as boolean,\n\t\tIS_VERFD as boolean,\n\t\tMAINT_LOG_PG as string,\n\t\tNOTES as string,\n\t\tSCHDD_ARRVL as timestamp,\n\t\tSCHDD_ARRVL_AIR_PORT as string,\n\t\tSCHDD_DPTR as timestamp,\n\t\tSCHDD_DPTR_AIR_PORT as string,\n\t\tUPDTD_AT as timestamp,\n\t\tADF_TIME_STMP as timestamp,\n\t\tADF_RUN_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tACTL_ARRVL_AIR_PORT = actual_arrival_airport,\n\t\tACTL_DPTR_AIR_PORT = actual_departure_airport,\n\t\tACTL_OOOI_IN,\n\t\tACTL_OOOI_OFF,\n\t\tACTL_OOOI_ON,\n\t\tACTL_OOOI_OUT,\n\t\tAIR_CRAFT_RGSTRN_NUM = aircraft_registration_number,\n\t\tAIR_CRAFT_TYPE = aircraft_type,\n\t\tBASE_AIR_PORT = base_airport,\n\t\tCRGO_WGT = cargo_weight,\n\t\tESTD_ARRVL,\n\t\tESTD_DPTR,\n\t\tFLT_DT = flight_date,\n\t\tFLT_ID = flight_id,\n\t\tFLT_NUM = flight_number,\n\t\tFLT_TYPE = flight_type,\n\t\tFUEL_IN = fuel_in,\n\t\tFUEL_OUT = fuel_out,\n\t\tFUEL_UPLIFT = fuel_uplift,\n\t\tIS_CNCLD = is_canceled,\n\t\tIS_VERFD = is_verified,\n\t\tMAINT_LOG_PG = maint_log_page,\n\t\tNOTES = notes,\n\t\tSCHDD_ARRVL,\n\t\tSCHDD_ARRVL_AIR_PORT = scheduled_arrival_airport,\n\t\tSCHDD_DPTR,\n\t\tSCHDD_DPTR_AIR_PORT = scheduled_departure_airport,\n\t\tUPDTD_AT,\n\t\tADF_TIME_STMP,\n\t\tADF_RUN_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> StagingFlights"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/eal_src_flights')]"
			]
		}
	]
}